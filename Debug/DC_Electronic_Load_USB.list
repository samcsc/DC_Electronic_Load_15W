
DC_Electronic_Load_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc2c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800fe10  0800fe10  0001fe10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104b0  080104b0  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  080104b0  080104b0  000204b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104b8  080104b8  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104b8  080104b8  000204b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104bc  080104bc  000204bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080104c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005098  20000208  080106c8  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200052a0  080106c8  000352a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dc20  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005007  00000000  00000000  0005de58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002318  00000000  00000000  00062e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002130  00000000  00000000  00065178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007465  00000000  00000000  000672a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b372  00000000  00000000  0006e70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed9cd  00000000  00000000  00099a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018744c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aadc  00000000  00000000  001874a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fdf4 	.word	0x0800fdf4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800fdf4 	.word	0x0800fdf4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b96e 	b.w	8000fcc <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468c      	mov	ip, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8083 	bne.w	8000e1e <__udivmoddi4+0x116>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4617      	mov	r7, r2
 8000d1c:	d947      	bls.n	8000dae <__udivmoddi4+0xa6>
 8000d1e:	fab2 f282 	clz	r2, r2
 8000d22:	b142      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	f1c2 0020 	rsb	r0, r2, #32
 8000d28:	fa24 f000 	lsr.w	r0, r4, r0
 8000d2c:	4091      	lsls	r1, r2
 8000d2e:	4097      	lsls	r7, r2
 8000d30:	ea40 0c01 	orr.w	ip, r0, r1
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d40:	fa1f fe87 	uxth.w	lr, r7
 8000d44:	fb08 c116 	mls	r1, r8, r6, ip
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5a:	f080 8119 	bcs.w	8000f90 <__udivmoddi4+0x288>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8116 	bls.w	8000f90 <__udivmoddi4+0x288>
 8000d64:	3e02      	subs	r6, #2
 8000d66:	443b      	add	r3, r7
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3310 	mls	r3, r8, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8105 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f240 8102 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d90:	3802      	subs	r0, #2
 8000d92:	443c      	add	r4, r7
 8000d94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	b11d      	cbz	r5, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c5 4300 	strd	r4, r3, [r5]
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xaa>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	d150      	bne.n	8000e5c <__udivmoddi4+0x154>
 8000dba:	1bcb      	subs	r3, r1, r7
 8000dbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc0:	fa1f f887 	uxth.w	r8, r7
 8000dc4:	2601      	movs	r6, #1
 8000dc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dca:	0c21      	lsrs	r1, r4, #16
 8000dcc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0xe2>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	f200 80e9 	bhi.w	8000fbc <__udivmoddi4+0x2b4>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1ac9      	subs	r1, r1, r3
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x10c>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x10a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80d9 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e7bf      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x12e>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80b1 	beq.w	8000f8a <__udivmoddi4+0x282>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x1cc>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0x140>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80b8 	bhi.w	8000fb8 <__udivmoddi4+0x2b0>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	468c      	mov	ip, r1
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0a8      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000e56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e5a:	e7a5      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f603 	lsr.w	r6, r0, r3
 8000e64:	4097      	lsls	r7, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6e:	40d9      	lsrs	r1, r3
 8000e70:	4330      	orrs	r0, r6
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e78:	fa1f f887 	uxth.w	r8, r7
 8000e7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb06 f108 	mul.w	r1, r6, r8
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x19c>
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e96:	f080 808d 	bcs.w	8000fb4 <__udivmoddi4+0x2ac>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 808a 	bls.w	8000fb4 <__udivmoddi4+0x2ac>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	443b      	add	r3, r7
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b281      	uxth	r1, r0
 8000ea8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb4:	fb00 f308 	mul.w	r3, r0, r8
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x1c4>
 8000ebc:	1879      	adds	r1, r7, r1
 8000ebe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec2:	d273      	bcs.n	8000fac <__udivmoddi4+0x2a4>
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d971      	bls.n	8000fac <__udivmoddi4+0x2a4>
 8000ec8:	3802      	subs	r0, #2
 8000eca:	4439      	add	r1, r7
 8000ecc:	1acb      	subs	r3, r1, r3
 8000ece:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ed2:	e778      	b.n	8000dc6 <__udivmoddi4+0xbe>
 8000ed4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed8:	fa03 f406 	lsl.w	r4, r3, r6
 8000edc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	0c3b      	lsrs	r3, r7, #16
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fa1f f884 	uxth.w	r8, r4
 8000efe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f06:	fb09 fa08 	mul.w	sl, r9, r8
 8000f0a:	458a      	cmp	sl, r1
 8000f0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f10:	fa00 f306 	lsl.w	r3, r0, r6
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x220>
 8000f16:	1861      	adds	r1, r4, r1
 8000f18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f1c:	d248      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f1e:	458a      	cmp	sl, r1
 8000f20:	d946      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4421      	add	r1, r4
 8000f28:	eba1 010a 	sub.w	r1, r1, sl
 8000f2c:	b2bf      	uxth	r7, r7
 8000f2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f3a:	fb00 f808 	mul.w	r8, r0, r8
 8000f3e:	45b8      	cmp	r8, r7
 8000f40:	d907      	bls.n	8000f52 <__udivmoddi4+0x24a>
 8000f42:	19e7      	adds	r7, r4, r7
 8000f44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f48:	d22e      	bcs.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4a:	45b8      	cmp	r8, r7
 8000f4c:	d92c      	bls.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4427      	add	r7, r4
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	eba7 0708 	sub.w	r7, r7, r8
 8000f5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5e:	454f      	cmp	r7, r9
 8000f60:	46c6      	mov	lr, r8
 8000f62:	4649      	mov	r1, r9
 8000f64:	d31a      	bcc.n	8000f9c <__udivmoddi4+0x294>
 8000f66:	d017      	beq.n	8000f98 <__udivmoddi4+0x290>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x27a>
 8000f6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f76:	40f2      	lsrs	r2, r6
 8000f78:	ea4c 0202 	orr.w	r2, ip, r2
 8000f7c:	40f7      	lsrs	r7, r6
 8000f7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f82:	2600      	movs	r6, #0
 8000f84:	4631      	mov	r1, r6
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e70b      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6fd      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f98:	4543      	cmp	r3, r8
 8000f9a:	d2e5      	bcs.n	8000f68 <__udivmoddi4+0x260>
 8000f9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fa0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7df      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e7d2      	b.n	8000f52 <__udivmoddi4+0x24a>
 8000fac:	4660      	mov	r0, ip
 8000fae:	e78d      	b.n	8000ecc <__udivmoddi4+0x1c4>
 8000fb0:	4681      	mov	r9, r0
 8000fb2:	e7b9      	b.n	8000f28 <__udivmoddi4+0x220>
 8000fb4:	4666      	mov	r6, ip
 8000fb6:	e775      	b.n	8000ea4 <__udivmoddi4+0x19c>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	e74a      	b.n	8000e52 <__udivmoddi4+0x14a>
 8000fbc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc0:	4439      	add	r1, r7
 8000fc2:	e713      	b.n	8000dec <__udivmoddi4+0xe4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	443c      	add	r4, r7
 8000fc8:	e724      	b.n	8000e14 <__udivmoddi4+0x10c>
 8000fca:	bf00      	nop

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd4:	f000 fdcd 	bl	8001b72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd8:	f000 f824 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f000 f9f6 	bl	80013cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe0:	f000 f9ca 	bl	8001378 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000fe4:	f000 f940 	bl	8001268 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000fe8:	f000 f886 	bl	80010f8 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000fec:	f000 f986 	bl	80012fc <MX_SPI2_Init>
  MX_I2C3_Init();
 8000ff0:	f000 f8fa 	bl	80011e8 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ff4:	f006 fb82 	bl	80076fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <main+0x48>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <main+0x4c>)
 8000ffe:	f006 fbdc 	bl	80077ba <osThreadNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <main+0x50>)
 8001006:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  mutex_creation();
 8001008:	f009 ff90 	bl	800af2c <mutex_creation>
  task_creation();
 800100c:	f009 ff9c 	bl	800af48 <task_creation>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001010:	f006 fb98 	bl	8007744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001014:	e7fe      	b.n	8001014 <main+0x44>
 8001016:	bf00      	nop
 8001018:	0800ff28 	.word	0x0800ff28
 800101c:	080014f5 	.word	0x080014f5
 8001020:	20004fbc 	.word	0x20004fbc

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0a4      	sub	sp, #144	; 0x90
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800102e:	2238      	movs	r2, #56	; 0x38
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f00a fe96 	bl	800bd64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2244      	movs	r2, #68	; 0x44
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00a fe88 	bl	800bd64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001054:	2000      	movs	r0, #0
 8001056:	f003 faed 	bl	8004634 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105a:	2302      	movs	r3, #2
 800105c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001062:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001064:	2340      	movs	r3, #64	; 0x40
 8001066:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001068:	2302      	movs	r3, #2
 800106a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800106c:	2302      	movs	r3, #2
 800106e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001070:	2304      	movs	r3, #4
 8001072:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001074:	2355      	movs	r3, #85	; 0x55
 8001076:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001080:	2302      	movs	r3, #2
 8001082:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001090:	4618      	mov	r0, r3
 8001092:	f003 fb83 	bl	800479c <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800109c:	f000 fa44 	bl	8001528 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	230f      	movs	r3, #15
 80010a2:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a4:	2303      	movs	r3, #3
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010b8:	2104      	movs	r1, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fe86 	bl	8004dcc <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010c6:	f000 fa2f 	bl	8001528 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C3
 80010ca:	f248 1320 	movw	r3, #33056	; 0x8120
 80010ce:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80010d8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010de:	463b      	mov	r3, r7
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 f8c1 	bl	8005268 <HAL_RCCEx_PeriphCLKConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80010ec:	f000 fa1c 	bl	8001528 <Error_Handler>
  }
}
 80010f0:	bf00      	nop
 80010f2:	3790      	adds	r7, #144	; 0x90
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2220      	movs	r2, #32
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f00a fe27 	bl	800bd64 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001116:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <MX_ADC1_Init+0xe8>)
 8001118:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800111c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800111e:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <MX_ADC1_Init+0xe8>)
 8001120:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001124:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001126:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <MX_ADC1_Init+0xe8>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <MX_ADC1_Init+0xe8>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001132:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <MX_ADC1_Init+0xe8>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <MX_ADC1_Init+0xe8>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <MX_ADC1_Init+0xe8>)
 8001140:	2204      	movs	r2, #4
 8001142:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001144:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <MX_ADC1_Init+0xe8>)
 8001146:	2200      	movs	r2, #0
 8001148:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <MX_ADC1_Init+0xe8>)
 800114c:	2200      	movs	r2, #0
 800114e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <MX_ADC1_Init+0xe8>)
 8001152:	2201      	movs	r2, #1
 8001154:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <MX_ADC1_Init+0xe8>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_ADC1_Init+0xe8>)
 8001160:	2200      	movs	r2, #0
 8001162:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_ADC1_Init+0xe8>)
 8001166:	2200      	movs	r2, #0
 8001168:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_ADC1_Init+0xe8>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_ADC1_Init+0xe8>)
 8001174:	2200      	movs	r2, #0
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_ADC1_Init+0xe8>)
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001180:	4817      	ldr	r0, [pc, #92]	; (80011e0 <MX_ADC1_Init+0xe8>)
 8001182:	f000 ff59 	bl	8002038 <HAL_ADC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800118c:	f000 f9cc 	bl	8001528 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	4619      	mov	r1, r3
 800119a:	4811      	ldr	r0, [pc, #68]	; (80011e0 <MX_ADC1_Init+0xe8>)
 800119c:	f001 fef0 	bl	8002f80 <HAL_ADCEx_MultiModeConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011a6:	f000 f9bf 	bl	8001528 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_ADC1_Init+0xec>)
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ae:	2306      	movs	r3, #6
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b6:	237f      	movs	r3, #127	; 0x7f
 80011b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ba:	2304      	movs	r3, #4
 80011bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <MX_ADC1_Init+0xe8>)
 80011c8:	f001 fa62 	bl	8002690 <HAL_ADC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80011d2:	f000 f9a9 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3730      	adds	r7, #48	; 0x30
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20005100 	.word	0x20005100
 80011e4:	3ac04000 	.word	0x3ac04000

080011e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011ec:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_I2C3_Init+0x74>)
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <MX_I2C3_Init+0x78>)
 80011f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A0A7FB;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_I2C3_Init+0x74>)
 80011f4:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <MX_I2C3_Init+0x7c>)
 80011f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_I2C3_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_I2C3_Init+0x74>)
 8001200:	2201      	movs	r2, #1
 8001202:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_I2C3_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_I2C3_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <MX_I2C3_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_I2C3_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_I2C3_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001222:	480e      	ldr	r0, [pc, #56]	; (800125c <MX_I2C3_Init+0x74>)
 8001224:	f002 fd14 	bl	8003c50 <HAL_I2C_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800122e:	f000 f97b 	bl	8001528 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001232:	2100      	movs	r1, #0
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <MX_I2C3_Init+0x74>)
 8001236:	f003 f965 	bl	8004504 <HAL_I2CEx_ConfigAnalogFilter>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001240:	f000 f972 	bl	8001528 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_I2C3_Init+0x74>)
 8001248:	f003 f9a7 	bl	800459a <HAL_I2CEx_ConfigDigitalFilter>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001252:	f000 f969 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20004fc0 	.word	0x20004fc0
 8001260:	40007800 	.word	0x40007800
 8001264:	30a0a7fb 	.word	0x30a0a7fb

08001268 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 800126e:	4a22      	ldr	r2, [pc, #136]	; (80012f8 <MX_LPUART1_UART_Init+0x90>)
 8001270:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 800129a:	2200      	movs	r2, #0
 800129c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012aa:	4812      	ldr	r0, [pc, #72]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 80012ac:	f005 f890 	bl	80063d0 <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80012b6:	f000 f937 	bl	8001528 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 80012be:	f006 f90f 	bl	80074e0 <HAL_UARTEx_SetTxFifoThreshold>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80012c8:	f000 f92e 	bl	8001528 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4809      	ldr	r0, [pc, #36]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 80012d0:	f006 f944 	bl	800755c <HAL_UARTEx_SetRxFifoThreshold>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80012da:	f000 f925 	bl	8001528 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_LPUART1_UART_Init+0x8c>)
 80012e0:	f006 f8c5 	bl	800746e <HAL_UARTEx_DisableFifoMode>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80012ea:	f000 f91d 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20005070 	.word	0x20005070
 80012f8:	40008000 	.word	0x40008000

080012fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_SPI2_Init+0x74>)
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <MX_SPI2_Init+0x78>)
 8001304:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_SPI2_Init+0x74>)
 8001308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800130c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_SPI2_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <MX_SPI2_Init+0x74>)
 8001316:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800131a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_SPI2_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <MX_SPI2_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_SPI2_Init+0x74>)
 800132a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_SPI2_Init+0x74>)
 8001332:	2228      	movs	r2, #40	; 0x28
 8001334:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_SPI2_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_SPI2_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_SPI2_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_SPI2_Init+0x74>)
 800134a:	2207      	movs	r2, #7
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_SPI2_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_SPI2_Init+0x74>)
 8001356:	2208      	movs	r2, #8
 8001358:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_SPI2_Init+0x74>)
 800135c:	f004 f974 	bl	8005648 <HAL_SPI_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001366:	f000 f8df 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000500c 	.word	0x2000500c
 8001374:	40003800 	.word	0x40003800

08001378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_DMA_Init+0x50>)
 8001380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001382:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <MX_DMA_Init+0x50>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6493      	str	r3, [r2, #72]	; 0x48
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_DMA_Init+0x50>)
 800138c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_DMA_Init+0x50>)
 8001398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <MX_DMA_Init+0x50>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6493      	str	r3, [r2, #72]	; 0x48
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_DMA_Init+0x50>)
 80013a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2105      	movs	r1, #5
 80013b2:	200b      	movs	r0, #11
 80013b4:	f001 ff40 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b8:	200b      	movs	r0, #11
 80013ba:	f001 ff57 	bl	800326c <HAL_NVIC_EnableIRQ>

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <MX_GPIO_Init+0x118>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <MX_GPIO_Init+0x118>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <MX_GPIO_Init+0x118>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <MX_GPIO_Init+0x118>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a39      	ldr	r2, [pc, #228]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a33      	ldr	r2, [pc, #204]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <MX_GPIO_Init+0x118>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PC_GPIO_Port, LED_PC_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f002 fbdd 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RUN_Pin|LED_100_Pin|CS_DAC_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2170      	movs	r1, #112	; 0x70
 800143a:	482b      	ldr	r0, [pc, #172]	; (80014e8 <MX_GPIO_Init+0x11c>)
 800143c:	f002 fbd8 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_500_Pin|LED_1000_Pin|LED_2000_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2107      	movs	r1, #7
 8001444:	4829      	ldr	r0, [pc, #164]	; (80014ec <MX_GPIO_Init+0x120>)
 8001446:	f002 fbd3 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT_A_Pin BT_INC_Pin BT_DEC_Pin */
  GPIO_InitStruct.Pin = BT_A_Pin|BT_INC_Pin|BT_DEC_Pin;
 800144a:	2370      	movs	r3, #112	; 0x70
 800144c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_GPIO_Init+0x124>)
 8001450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001460:	f002 fa44 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PC_Pin */
  GPIO_InitStruct.Pin = LED_PC_Pin;
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_PC_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147e:	f002 fa35 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RUN_Pin LED_100_Pin CS_DAC_Pin */
  GPIO_InitStruct.Pin = LED_RUN_Pin|LED_100_Pin|CS_DAC_Pin;
 8001482:	2370      	movs	r3, #112	; 0x70
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	4619      	mov	r1, r3
 8001498:	4813      	ldr	r0, [pc, #76]	; (80014e8 <MX_GPIO_Init+0x11c>)
 800149a:	f002 fa27 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_500_Pin LED_1000_Pin LED_2000_Pin */
  GPIO_InitStruct.Pin = LED_500_Pin|LED_1000_Pin|LED_2000_Pin;
 800149e:	2307      	movs	r3, #7
 80014a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_GPIO_Init+0x120>)
 80014b6:	f002 fa19 	bl	80038ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2105      	movs	r1, #5
 80014be:	200a      	movs	r0, #10
 80014c0:	f001 feba 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014c4:	200a      	movs	r0, #10
 80014c6:	f001 fed1 	bl	800326c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2105      	movs	r1, #5
 80014ce:	2017      	movs	r0, #23
 80014d0:	f001 feb2 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014d4:	2017      	movs	r0, #23
 80014d6:	f001 fec9 	bl	800326c <HAL_NVIC_EnableIRQ>

}
 80014da:	bf00      	nop
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000800 	.word	0x48000800
 80014ec:	48000400 	.word	0x48000400
 80014f0:	10210000 	.word	0x10210000

080014f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f006 fa37 	bl	8007970 <osDelay>
 8001502:	e7fb      	b.n	80014fc <StartDefaultTask+0x8>

08001504 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001516:	f000 fb45 	bl	8001ba4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40001000 	.word	0x40001000

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_MspInit+0x50>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	4a11      	ldr	r2, [pc, #68]	; (8001584 <HAL_MspInit+0x50>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6613      	str	r3, [r2, #96]	; 0x60
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_MspInit+0x50>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_MspInit+0x50>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <HAL_MspInit+0x50>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6593      	str	r3, [r2, #88]	; 0x58
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_MspInit+0x50>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	210f      	movs	r1, #15
 800156e:	f06f 0001 	mvn.w	r0, #1
 8001572:	f001 fe61 	bl	8003238 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001576:	f003 f901 	bl	800477c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a8:	d124      	bne.n	80015f4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_ADC_MspInit+0x74>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a13      	ldr	r2, [pc, #76]	; (80015fc <HAL_ADC_MspInit+0x74>)
 80015b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_ADC_MspInit+0x74>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_ADC_MspInit+0x74>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <HAL_ADC_MspInit+0x74>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_ADC_MspInit+0x74>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e0:	2303      	movs	r3, #3
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4804      	ldr	r0, [pc, #16]	; (8001600 <HAL_ADC_MspInit+0x78>)
 80015f0:	f002 f97c 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	; 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000400 	.word	0x48000400

08001604 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_I2C_MspInit+0x7c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d128      	bne.n	8001678 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_I2C_MspInit+0x80>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a16      	ldr	r2, [pc, #88]	; (8001684 <HAL_I2C_MspInit+0x80>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_I2C_MspInit+0x80>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800163e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001644:	2312      	movs	r3, #18
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001648:	2301      	movs	r3, #1
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001650:	2308      	movs	r3, #8
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	480b      	ldr	r0, [pc, #44]	; (8001688 <HAL_I2C_MspInit+0x84>)
 800165c:	f002 f946 	bl	80038ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_I2C_MspInit+0x80>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_I2C_MspInit+0x80>)
 8001666:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800166a:	6593      	str	r3, [r2, #88]	; 0x58
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_I2C_MspInit+0x80>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40007800 	.word	0x40007800
 8001684:	40021000 	.word	0x40021000
 8001688:	48000800 	.word	0x48000800

0800168c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a30      	ldr	r2, [pc, #192]	; (800176c <HAL_UART_MspInit+0xe0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d159      	bne.n	8001762 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016ae:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_UART_MspInit+0xe4>)
 80016b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b2:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <HAL_UART_MspInit+0xe4>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_UART_MspInit+0xe4>)
 80016bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_UART_MspInit+0xe4>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	4a29      	ldr	r2, [pc, #164]	; (8001770 <HAL_UART_MspInit+0xe4>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d2:	4b27      	ldr	r3, [pc, #156]	; (8001770 <HAL_UART_MspInit+0xe4>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016de:	230c      	movs	r3, #12
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80016ee:	230c      	movs	r3, #12
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fc:	f002 f8f6 	bl	80038ec <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_UART_MspInit+0xe8>)
 8001702:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <HAL_UART_MspInit+0xec>)
 8001704:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_UART_MspInit+0xe8>)
 8001708:	2223      	movs	r2, #35	; 0x23
 800170a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_UART_MspInit+0xe8>)
 800170e:	2210      	movs	r2, #16
 8001710:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <HAL_UART_MspInit+0xe8>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_UART_MspInit+0xe8>)
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_UART_MspInit+0xe8>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_UART_MspInit+0xe8>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_UART_MspInit+0xe8>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_UART_MspInit+0xe8>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001736:	480f      	ldr	r0, [pc, #60]	; (8001774 <HAL_UART_MspInit+0xe8>)
 8001738:	f001 fda6 	bl	8003288 <HAL_DMA_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8001742:	f7ff fef1 	bl	8001528 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <HAL_UART_MspInit+0xe8>)
 800174a:	679a      	str	r2, [r3, #120]	; 0x78
 800174c:	4a09      	ldr	r2, [pc, #36]	; (8001774 <HAL_UART_MspInit+0xe8>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2105      	movs	r1, #5
 8001756:	205b      	movs	r0, #91	; 0x5b
 8001758:	f001 fd6e 	bl	8003238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800175c:	205b      	movs	r0, #91	; 0x5b
 800175e:	f001 fd85 	bl	800326c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40008000 	.word	0x40008000
 8001770:	40021000 	.word	0x40021000
 8001774:	2000516c 	.word	0x2000516c
 8001778:	40020008 	.word	0x40020008

0800177c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <HAL_SPI_MspInit+0x7c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d128      	bne.n	80017f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_SPI_MspInit+0x80>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	4a16      	ldr	r2, [pc, #88]	; (80017fc <HAL_SPI_MspInit+0x80>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6593      	str	r3, [r2, #88]	; 0x58
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_SPI_MspInit+0x80>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_SPI_MspInit+0x80>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	4a10      	ldr	r2, [pc, #64]	; (80017fc <HAL_SPI_MspInit+0x80>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_SPI_MspInit+0x80>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017e0:	2305      	movs	r3, #5
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <HAL_SPI_MspInit+0x84>)
 80017ec:	f002 f87e 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017f0:	bf00      	nop
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40003800 	.word	0x40003800
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000400 	.word	0x48000400

08001804 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08c      	sub	sp, #48	; 0x30
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_InitTick+0xcc>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	4a2c      	ldr	r2, [pc, #176]	; (80018d0 <HAL_InitTick+0xcc>)
 8001820:	f043 0310 	orr.w	r3, r3, #16
 8001824:	6593      	str	r3, [r2, #88]	; 0x58
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_InitTick+0xcc>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001832:	f107 020c 	add.w	r2, r7, #12
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f003 fc9b 	bl	8005178 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001842:	f003 fc6d 	bl	8005120 <HAL_RCC_GetPCLK1Freq>
 8001846:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184a:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <HAL_InitTick+0xd0>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	0c9b      	lsrs	r3, r3, #18
 8001852:	3b01      	subs	r3, #1
 8001854:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_InitTick+0xd4>)
 8001858:	4a20      	ldr	r2, [pc, #128]	; (80018dc <HAL_InitTick+0xd8>)
 800185a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <HAL_InitTick+0xd4>)
 800185e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001862:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001864:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <HAL_InitTick+0xd4>)
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_InitTick+0xd4>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <HAL_InitTick+0xd4>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001876:	4818      	ldr	r0, [pc, #96]	; (80018d8 <HAL_InitTick+0xd4>)
 8001878:	f004 fa60 	bl	8005d3c <HAL_TIM_Base_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001886:	2b00      	cmp	r3, #0
 8001888:	d11b      	bne.n	80018c2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800188a:	4813      	ldr	r0, [pc, #76]	; (80018d8 <HAL_InitTick+0xd4>)
 800188c:	f004 fab8 	bl	8005e00 <HAL_TIM_Base_Start_IT>
 8001890:	4603      	mov	r3, r0
 8001892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800189a:	2b00      	cmp	r3, #0
 800189c:	d111      	bne.n	80018c2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800189e:	2036      	movs	r0, #54	; 0x36
 80018a0:	f001 fce4 	bl	800326c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	d808      	bhi.n	80018bc <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80018aa:	2200      	movs	r2, #0
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	2036      	movs	r0, #54	; 0x36
 80018b0:	f001 fcc2 	bl	8003238 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_InitTick+0xdc>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e002      	b.n	80018c2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 80018c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3730      	adds	r7, #48	; 0x30
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	431bde83 	.word	0x431bde83
 80018d8:	200051cc 	.word	0x200051cc
 80018dc:	40001000 	.word	0x40001000
 80018e0:	20000004 	.word	0x20000004

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <NMI_Handler+0x4>

080018ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <MemManage_Handler+0x4>

080018f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <BusFault_Handler+0x4>

080018fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <UsageFault_Handler+0x4>

08001902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001914:	2010      	movs	r0, #16
 8001916:	f002 f983 	bl	8003c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA1_Channel1_IRQHandler+0x10>)
 8001926:	f001 fe92 	bl	800364e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000516c 	.word	0x2000516c

08001934 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001938:	2020      	movs	r0, #32
 800193a:	f002 f971 	bl	8003c20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800193e:	2040      	movs	r0, #64	; 0x40
 8001940:	f002 f96e 	bl	8003c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <TIM6_DAC_IRQHandler+0x10>)
 800194e:	f004 fac1 	bl	8005ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200051cc 	.word	0x200051cc

0800195c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <LPUART1_IRQHandler+0x10>)
 8001962:	f004 fe05 	bl	8006570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20005070 	.word	0x20005070

08001970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
	return 1;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_kill>:

int _kill(int pid, int sig)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800198a:	f00a f9b3 	bl	800bcf4 <__errno>
 800198e:	4603      	mov	r3, r0
 8001990:	2216      	movs	r2, #22
 8001992:	601a      	str	r2, [r3, #0]
	return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_exit>:

void _exit (int status)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ffe7 	bl	8001980 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019b2:	e7fe      	b.n	80019b2 <_exit+0x12>

080019b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e00a      	b.n	80019dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019c6:	f3af 8000 	nop.w
 80019ca:	4601      	mov	r1, r0
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	60ba      	str	r2, [r7, #8]
 80019d2:	b2ca      	uxtb	r2, r1
 80019d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbf0      	blt.n	80019c6 <_read+0x12>
	}

return len;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e009      	b.n	8001a14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbf1      	blt.n	8001a00 <_write+0x12>
	}
	return len;
 8001a1c:	687b      	ldr	r3, [r7, #4]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_close>:

int _close(int file)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_isatty>:

int _isatty(int file)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
	return 1;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <_sbrk+0x5c>)
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <_sbrk+0x60>)
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <_sbrk+0x64>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <_sbrk+0x68>)
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d207      	bcs.n	8001ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac0:	f00a f918 	bl	800bcf4 <__errno>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	e009      	b.n	8001ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <_sbrk+0x64>)
 8001ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20008000 	.word	0x20008000
 8001af0:	00000400 	.word	0x00000400
 8001af4:	20000224 	.word	0x20000224
 8001af8:	200052a0 	.word	0x200052a0

08001afc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <SystemInit+0x20>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <SystemInit+0x20>)
 8001b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b24:	480d      	ldr	r0, [pc, #52]	; (8001b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b26:	490e      	ldr	r1, [pc, #56]	; (8001b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b28:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <LoopForever+0xe>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b3c:	4c0b      	ldr	r4, [pc, #44]	; (8001b6c <LoopForever+0x16>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b4a:	f7ff ffd7 	bl	8001afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f00a f8d7 	bl	800bd00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b52:	f7ff fa3d 	bl	8000fd0 <main>

08001b56 <LoopForever>:

LoopForever:
    b LoopForever
 8001b56:	e7fe      	b.n	8001b56 <LoopForever>
  ldr   r0, =_estack
 8001b58:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b60:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001b64:	080104c0 	.word	0x080104c0
  ldr r2, =_sbss
 8001b68:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001b6c:	200052a0 	.word	0x200052a0

08001b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC1_2_IRQHandler>

08001b72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f001 fb50 	bl	8003222 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff fe3e 	bl	8001804 <HAL_InitTick>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	71fb      	strb	r3, [r7, #7]
 8001b92:	e001      	b.n	8001b98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b94:	f7ff fcce 	bl	8001534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b98:	79fb      	ldrb	r3, [r7, #7]

}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_IncTick+0x1c>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_IncTick+0x20>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a03      	ldr	r2, [pc, #12]	; (8001bc0 <HAL_IncTick+0x1c>)
 8001bb4:	6013      	str	r3, [r2, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	20005218 	.word	0x20005218
 8001bc4:	20000008 	.word	0x20000008

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20005218 	.word	0x20005218

08001be0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3360      	adds	r3, #96	; 0x60
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <LL_ADC_SetOffset+0x44>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c80:	bf00      	nop
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	03fff000 	.word	0x03fff000

08001c90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3360      	adds	r3, #96	; 0x60
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3360      	adds	r3, #96	; 0x60
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ce6:	bf00      	nop
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b087      	sub	sp, #28
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3360      	adds	r3, #96	; 0x60
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3360      	adds	r3, #96	; 0x60
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	615a      	str	r2, [r3, #20]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3330      	adds	r3, #48	; 0x30
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	4413      	add	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	211f      	movs	r1, #31
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	401a      	ands	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	f003 011f 	and.w	r1, r3, #31
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	431a      	orrs	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b087      	sub	sp, #28
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3314      	adds	r3, #20
 8001e12:	461a      	mov	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	0e5b      	lsrs	r3, r3, #25
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	4413      	add	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	0d1b      	lsrs	r3, r3, #20
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2107      	movs	r1, #7
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	401a      	ands	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	0d1b      	lsrs	r3, r3, #20
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	431a      	orrs	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e4c:	bf00      	nop
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0318 	and.w	r3, r3, #24
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e7c:	40d9      	lsrs	r1, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	400b      	ands	r3, r1
 8001e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e86:	431a      	orrs	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	0007ffff 	.word	0x0007ffff

08001ea0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 031f 	and.w	r3, r3, #31
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ee8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6093      	str	r3, [r2, #8]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f10:	d101      	bne.n	8001f16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f60:	d101      	bne.n	8001f66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <LL_ADC_IsEnabled+0x18>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <LL_ADC_IsEnabled+0x1a>
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd6:	f043 0204 	orr.w	r2, r3, #4
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d101      	bne.n	8002002 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b08      	cmp	r3, #8
 8002022:	d101      	bne.n	8002028 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e16d      	b.n	800232e <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2b00      	cmp	r3, #0
 800205e:	d109      	bne.n	8002074 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff fa91 	bl	8001588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff3f 	bl	8001efc <LL_ADC_IsDeepPowerDownEnabled>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff25 	bl	8001ed8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff5a 	bl	8001f4c <LL_ADC_IsInternalRegulatorEnabled>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d115      	bne.n	80020ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff3e 	bl	8001f24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020a8:	4ba3      	ldr	r3, [pc, #652]	; (8002338 <HAL_ADC_Init+0x300>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	4aa3      	ldr	r2, [pc, #652]	; (800233c <HAL_ADC_Init+0x304>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	099b      	lsrs	r3, r3, #6
 80020b6:	3301      	adds	r3, #1
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020bc:	e002      	b.n	80020c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f9      	bne.n	80020be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff3c 	bl	8001f4c <LL_ADC_IsInternalRegulatorEnabled>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	f043 0210 	orr.w	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff75 	bl	8001fea <LL_ADC_REG_IsConversionOngoing>
 8002100:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 8106 	bne.w	800231c <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 8102 	bne.w	800231c <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002120:	f043 0202 	orr.w	r2, r3, #2
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff35 	bl	8001f9c <LL_ADC_IsEnabled>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d111      	bne.n	800215c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002138:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800213c:	f7ff ff2e 	bl	8001f9c <LL_ADC_IsEnabled>
 8002140:	4604      	mov	r4, r0
 8002142:	487f      	ldr	r0, [pc, #508]	; (8002340 <HAL_ADC_Init+0x308>)
 8002144:	f7ff ff2a 	bl	8001f9c <LL_ADC_IsEnabled>
 8002148:	4603      	mov	r3, r0
 800214a:	4323      	orrs	r3, r4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d105      	bne.n	800215c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4619      	mov	r1, r3
 8002156:	487b      	ldr	r0, [pc, #492]	; (8002344 <HAL_ADC_Init+0x30c>)
 8002158:	f7ff fd42 	bl	8001be0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7f5b      	ldrb	r3, [r3, #29]
 8002160:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002166:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800216c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002172:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800217a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002186:	2b01      	cmp	r3, #1
 8002188:	d106      	bne.n	8002198 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	3b01      	subs	r3, #1
 8002190:	045b      	lsls	r3, r3, #17
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d009      	beq.n	80021b4 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	4b63      	ldr	r3, [pc, #396]	; (8002348 <HAL_ADC_Init+0x310>)
 80021bc:	4013      	ands	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	69b9      	ldr	r1, [r7, #24]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff01 	bl	8001fea <LL_ADC_REG_IsConversionOngoing>
 80021e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff0e 	bl	8002010 <LL_ADC_INJ_IsConversionOngoing>
 80021f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d16d      	bne.n	80022d8 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d16a      	bne.n	80022d8 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002206:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800220e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800221e:	f023 0302 	bic.w	r3, r3, #2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	69b9      	ldr	r1, [r7, #24]
 8002228:	430b      	orrs	r3, r1
 800222a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d017      	beq.n	8002264 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002242:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800224c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002250:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6911      	ldr	r1, [r2, #16]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	430b      	orrs	r3, r1
 800225e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002262:	e013      	b.n	800228c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002272:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002284:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002288:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002292:	2b01      	cmp	r3, #1
 8002294:	d118      	bne.n	80022c8 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022ac:	4311      	orrs	r1, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022b8:	430a      	orrs	r2, r1
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0201 	orr.w	r2, r2, #1
 80022c4:	611a      	str	r2, [r3, #16]
 80022c6:	e007      	b.n	80022d8 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10c      	bne.n	80022fa <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f023 010f 	bic.w	r1, r3, #15
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	1e5a      	subs	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
 80022f8:	e007      	b.n	800230a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 020f 	bic.w	r2, r2, #15
 8002308:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	65da      	str	r2, [r3, #92]	; 0x5c
 800231a:	e007      	b.n	800232c <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002320:	f043 0210 	orr.w	r2, r3, #16
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800232c:	7ffb      	ldrb	r3, [r7, #31]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd90      	pop	{r4, r7, pc}
 8002336:	bf00      	nop
 8002338:	20000000 	.word	0x20000000
 800233c:	053e2d63 	.word	0x053e2d63
 8002340:	50000100 	.word	0x50000100
 8002344:	50000300 	.word	0x50000300
 8002348:	fff04007 	.word	0xfff04007

0800234c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002354:	4859      	ldr	r0, [pc, #356]	; (80024bc <HAL_ADC_Start+0x170>)
 8002356:	f7ff fda3 	bl	8001ea0 <LL_ADC_GetMultimode>
 800235a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fe42 	bl	8001fea <LL_ADC_REG_IsConversionOngoing>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	f040 809f 	bne.w	80024ac <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_ADC_Start+0x30>
 8002378:	2302      	movs	r3, #2
 800237a:	e09a      	b.n	80024b2 <HAL_ADC_Start+0x166>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fd73 	bl	8002e70 <ADC_Enable>
 800238a:	4603      	mov	r3, r0
 800238c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	2b00      	cmp	r3, #0
 8002392:	f040 8086 	bne.w	80024a2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a44      	ldr	r2, [pc, #272]	; (80024c0 <HAL_ADC_Start+0x174>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d002      	beq.n	80023ba <HAL_ADC_Start+0x6e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	e001      	b.n	80023be <HAL_ADC_Start+0x72>
 80023ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d002      	beq.n	80023cc <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e4:	d106      	bne.n	80023f4 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ea:	f023 0206 	bic.w	r2, r3, #6
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	661a      	str	r2, [r3, #96]	; 0x60
 80023f2:	e002      	b.n	80023fa <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	221c      	movs	r2, #28
 8002400:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2c      	ldr	r2, [pc, #176]	; (80024c0 <HAL_ADC_Start+0x174>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d002      	beq.n	800241a <HAL_ADC_Start+0xce>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	e001      	b.n	800241e <HAL_ADC_Start+0xd2>
 800241a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	4293      	cmp	r3, r2
 8002424:	d008      	beq.n	8002438 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b05      	cmp	r3, #5
 8002430:	d002      	beq.n	8002438 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b09      	cmp	r3, #9
 8002436:	d114      	bne.n	8002462 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800244e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fdb1 	bl	8001fc2 <LL_ADC_REG_StartConversion>
 8002460:	e026      	b.n	80024b0 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <HAL_ADC_Start+0x174>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d002      	beq.n	800247e <HAL_ADC_Start+0x132>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	e001      	b.n	8002482 <HAL_ADC_Start+0x136>
 800247e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002482:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00f      	beq.n	80024b0 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002498:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	65da      	str	r2, [r3, #92]	; 0x5c
 80024a0:	e006      	b.n	80024b0 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80024aa:	e001      	b.n	80024b0 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
 80024ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	50000300 	.word	0x50000300
 80024c0:	50000100 	.word	0x50000100

080024c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024ce:	4867      	ldr	r0, [pc, #412]	; (800266c <HAL_ADC_PollForConversion+0x1a8>)
 80024d0:	f7ff fce6 	bl	8001ea0 <LL_ADC_GetMultimode>
 80024d4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d102      	bne.n	80024e4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80024de:	2308      	movs	r3, #8
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e02a      	b.n	800253a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d002      	beq.n	80024f6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b09      	cmp	r3, #9
 80024f4:	d111      	bne.n	800251a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0a6      	b.n	8002662 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002514:	2304      	movs	r3, #4
 8002516:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002518:	e00f      	b.n	800253a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800251a:	4854      	ldr	r0, [pc, #336]	; (800266c <HAL_ADC_PollForConversion+0x1a8>)
 800251c:	f7ff fcce 	bl	8001ebc <LL_ADC_GetMultiDMATransfer>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	f043 0220 	orr.w	r2, r3, #32
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e095      	b.n	8002662 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002536:	2304      	movs	r3, #4
 8002538:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800253a:	f7ff fb45 	bl	8001bc8 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002540:	e021      	b.n	8002586 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d01d      	beq.n	8002586 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800254a:	f7ff fb3d 	bl	8001bc8 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <HAL_ADC_PollForConversion+0x9c>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d112      	bne.n	8002586 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10b      	bne.n	8002586 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	f043 0204 	orr.w	r2, r3, #4
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e06d      	b.n	8002662 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0d6      	beq.n	8002542 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fbed 	bl	8001d84 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01c      	beq.n	80025ea <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	7f5b      	ldrb	r3, [r3, #29]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d118      	bne.n	80025ea <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d111      	bne.n	80025ea <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	f043 0201 	orr.w	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a20      	ldr	r2, [pc, #128]	; (8002670 <HAL_ADC_PollForConversion+0x1ac>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d002      	beq.n	80025fa <HAL_ADC_PollForConversion+0x136>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	e001      	b.n	80025fe <HAL_ADC_PollForConversion+0x13a>
 80025fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	4293      	cmp	r3, r2
 8002604:	d008      	beq.n	8002618 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b05      	cmp	r3, #5
 8002610:	d002      	beq.n	8002618 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2b09      	cmp	r3, #9
 8002616:	d104      	bne.n	8002622 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	61bb      	str	r3, [r7, #24]
 8002620:	e00d      	b.n	800263e <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <HAL_ADC_PollForConversion+0x1ac>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d002      	beq.n	8002632 <HAL_ADC_PollForConversion+0x16e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	e001      	b.n	8002636 <HAL_ADC_PollForConversion+0x172>
 8002632:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002636:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d104      	bne.n	800264e <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2208      	movs	r2, #8
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e008      	b.n	8002660 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d103      	bne.n	8002660 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	220c      	movs	r2, #12
 800265e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	50000300 	.word	0x50000300
 8002670:	50000100 	.word	0x50000100

08002674 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0b6      	sub	sp, #216	; 0xd8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x22>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e3c8      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x7b4>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fc93 	bl	8001fea <LL_ADC_REG_IsConversionOngoing>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f040 83ad 	bne.w	8002e26 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	f7ff fb66 	bl	8001daa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fc81 	bl	8001fea <LL_ADC_REG_IsConversionOngoing>
 80026e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fc8d 	bl	8002010 <LL_ADC_INJ_IsConversionOngoing>
 80026f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 81d9 	bne.w	8002ab6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 81d4 	bne.w	8002ab6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002716:	d10f      	bne.n	8002738 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2200      	movs	r2, #0
 8002722:	4619      	mov	r1, r3
 8002724:	f7ff fb6d 	bl	8001e02 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fb14 	bl	8001d5e <LL_ADC_SetSamplingTimeCommonConfig>
 8002736:	e00e      	b.n	8002756 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	461a      	mov	r2, r3
 8002746:	f7ff fb5c 	bl	8001e02 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fb04 	bl	8001d5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	08db      	lsrs	r3, r3, #3
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b04      	cmp	r3, #4
 8002776:	d022      	beq.n	80027be <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6919      	ldr	r1, [r3, #16]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002788:	f7ff fa5e 	bl	8001c48 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6919      	ldr	r1, [r3, #16]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	461a      	mov	r2, r3
 800279a:	f7ff faaa 	bl	8001cf2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6919      	ldr	r1, [r3, #16]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	7f1b      	ldrb	r3, [r3, #28]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d102      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x124>
 80027ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b2:	e000      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x126>
 80027b4:	2300      	movs	r3, #0
 80027b6:	461a      	mov	r2, r3
 80027b8:	f7ff fab6 	bl	8001d28 <LL_ADC_SetOffsetSaturation>
 80027bc:	e17b      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fa63 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x15a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fa58 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 80027e0:	4603      	mov	r3, r0
 80027e2:	0e9b      	lsrs	r3, r3, #26
 80027e4:	f003 021f 	and.w	r2, r3, #31
 80027e8:	e01e      	b.n	8002828 <HAL_ADC_ConfigChannel+0x198>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fa4d 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002808:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800280c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002810:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002818:	2320      	movs	r3, #32
 800281a:	e004      	b.n	8002826 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800281c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1b0>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0e9b      	lsrs	r3, r3, #26
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	e018      	b.n	8002872 <HAL_ADC_ConfigChannel+0x1e2>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800284c:	fa93 f3a3 	rbit	r3, r3
 8002850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800285c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002864:	2320      	movs	r3, #32
 8002866:	e004      	b.n	8002872 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002868:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002872:	429a      	cmp	r2, r3
 8002874:	d106      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fa1c 	bl	8001cbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fa00 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10a      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x220>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2101      	movs	r1, #1
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff f9f5 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 80028a6:	4603      	mov	r3, r0
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	f003 021f 	and.w	r2, r3, #31
 80028ae:	e01e      	b.n	80028ee <HAL_ADC_ConfigChannel+0x25e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2101      	movs	r1, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f9ea 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80028d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80028de:	2320      	movs	r3, #32
 80028e0:	e004      	b.n	80028ec <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80028e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x276>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	0e9b      	lsrs	r3, r3, #26
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	e018      	b.n	8002938 <HAL_ADC_ConfigChannel+0x2a8>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800291a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800291e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002922:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e004      	b.n	8002938 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800292e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002938:	429a      	cmp	r2, r3
 800293a:	d106      	bne.n	800294a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2200      	movs	r2, #0
 8002942:	2101      	movs	r1, #1
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff f9b9 	bl	8001cbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2102      	movs	r1, #2
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff f99d 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 8002956:	4603      	mov	r3, r0
 8002958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x2e6>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2102      	movs	r1, #2
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff f992 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 800296c:	4603      	mov	r3, r0
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	e01e      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x324>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2102      	movs	r1, #2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff f987 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002994:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800299c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80029a4:	2320      	movs	r3, #32
 80029a6:	e004      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80029a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x33c>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	e016      	b.n	80029fa <HAL_ADC_ConfigChannel+0x36a>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80029de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80029e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e004      	b.n	80029fa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80029f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d106      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2102      	movs	r1, #2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff f958 	bl	8001cbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2103      	movs	r1, #3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff f93c 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10a      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x3a8>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2103      	movs	r1, #3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff f931 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	f003 021f 	and.w	r2, r3, #31
 8002a36:	e017      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x3d8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2103      	movs	r1, #3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f926 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a52:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	e003      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x3f0>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0e9b      	lsrs	r3, r3, #26
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	e011      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x414>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a90:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	e003      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d106      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2200      	movs	r2, #0
 8002aae:	2103      	movs	r1, #3
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff f903 	bl	8001cbc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fa6e 	bl	8001f9c <LL_ADC_IsEnabled>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 8140 	bne.w	8002d48 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6819      	ldr	r1, [r3, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f7ff f9bf 	bl	8001e58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4a8f      	ldr	r2, [pc, #572]	; (8002d1c <HAL_ADC_ConfigChannel+0x68c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	f040 8131 	bne.w	8002d48 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x47e>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	3301      	adds	r3, #1
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	bf94      	ite	ls
 8002b06:	2301      	movls	r3, #1
 8002b08:	2300      	movhi	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	e019      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x4b2>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002b20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e003      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2b09      	cmp	r3, #9
 8002b3a:	bf94      	ite	ls
 8002b3c:	2301      	movls	r3, #1
 8002b3e:	2300      	movhi	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d079      	beq.n	8002c3a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d107      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x4d2>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	0e9b      	lsrs	r3, r3, #26
 8002b58:	3301      	adds	r3, #1
 8002b5a:	069b      	lsls	r3, r3, #26
 8002b5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b60:	e015      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x4fe>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b72:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	e003      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b80:	fab3 f383 	clz	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	3301      	adds	r3, #1
 8002b88:	069b      	lsls	r3, r3, #26
 8002b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x51e>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	0e9b      	lsrs	r3, r3, #26
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	e017      	b.n	8002bde <HAL_ADC_ConfigChannel+0x54e>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e003      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bcc:	fab3 f383 	clz	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2101      	movs	r1, #1
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	ea42 0103 	orr.w	r1, r2, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x574>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	0e9b      	lsrs	r3, r3, #26
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	f003 021f 	and.w	r2, r3, #31
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	051b      	lsls	r3, r3, #20
 8002c02:	e018      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x5a6>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	e003      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f003 021f 	and.w	r2, r3, #31
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c36:	430b      	orrs	r3, r1
 8002c38:	e081      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d107      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x5c6>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	0e9b      	lsrs	r3, r3, #26
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	069b      	lsls	r3, r3, #26
 8002c50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c54:	e015      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x5f2>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002c6e:	2320      	movs	r3, #32
 8002c70:	e003      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	069b      	lsls	r3, r3, #26
 8002c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x612>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e9b      	lsrs	r3, r3, #26
 8002c94:	3301      	adds	r3, #1
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	e017      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x642>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	61fb      	str	r3, [r7, #28]
  return result;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002cba:	2320      	movs	r3, #32
 8002cbc:	e003      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2101      	movs	r1, #1
 8002cce:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd2:	ea42 0103 	orr.w	r1, r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x66e>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0e9b      	lsrs	r3, r3, #26
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f003 021f 	and.w	r2, r3, #31
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b1e      	subs	r3, #30
 8002cf6:	051b      	lsls	r3, r3, #20
 8002cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	e01e      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x6ac>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	613b      	str	r3, [r7, #16]
  return result;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d104      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002d16:	2320      	movs	r3, #32
 8002d18:	e006      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x698>
 8002d1a:	bf00      	nop
 8002d1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f003 021f 	and.w	r2, r3, #31
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	3b1e      	subs	r3, #30
 8002d36:	051b      	lsls	r3, r3, #20
 8002d38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	6892      	ldr	r2, [r2, #8]
 8002d42:	4619      	mov	r1, r3
 8002d44:	f7ff f85d 	bl	8001e02 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <HAL_ADC_ConfigChannel+0x7bc>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d071      	beq.n	8002e38 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d54:	483e      	ldr	r0, [pc, #248]	; (8002e50 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d56:	f7fe ff69 	bl	8001c2c <LL_ADC_GetCommonPathInternalCh>
 8002d5a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a3c      	ldr	r2, [pc, #240]	; (8002e54 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d004      	beq.n	8002d72 <HAL_ADC_ConfigChannel+0x6e2>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a3a      	ldr	r2, [pc, #232]	; (8002e58 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d127      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d121      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d86:	d157      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d90:	4619      	mov	r1, r3
 8002d92:	482f      	ldr	r0, [pc, #188]	; (8002e50 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d94:	f7fe ff37 	bl	8001c06 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d98:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <HAL_ADC_ConfigChannel+0x7cc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	099b      	lsrs	r3, r3, #6
 8002d9e:	4a30      	ldr	r2, [pc, #192]	; (8002e60 <HAL_ADC_ConfigChannel+0x7d0>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	099b      	lsrs	r3, r3, #6
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002db2:	e002      	b.n	8002dba <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f9      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dc0:	e03a      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a27      	ldr	r2, [pc, #156]	; (8002e64 <HAL_ADC_ConfigChannel+0x7d4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d113      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x764>
 8002dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10d      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a22      	ldr	r2, [pc, #136]	; (8002e68 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d02a      	beq.n	8002e38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002de2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dea:	4619      	mov	r1, r3
 8002dec:	4818      	ldr	r0, [pc, #96]	; (8002e50 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dee:	f7fe ff0a 	bl	8001c06 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002df2:	e021      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <HAL_ADC_ConfigChannel+0x7dc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d11c      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d116      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d011      	beq.n	8002e38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	480c      	ldr	r0, [pc, #48]	; (8002e50 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e20:	f7fe fef1 	bl	8001c06 <LL_ADC_SetCommonPathInternalCh>
 8002e24:	e008      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	f043 0220 	orr.w	r2, r3, #32
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e40:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	37d8      	adds	r7, #216	; 0xd8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	80080000 	.word	0x80080000
 8002e50:	50000300 	.word	0x50000300
 8002e54:	c3210000 	.word	0xc3210000
 8002e58:	90c00010 	.word	0x90c00010
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	053e2d63 	.word	0x053e2d63
 8002e64:	c7520000 	.word	0xc7520000
 8002e68:	50000100 	.word	0x50000100
 8002e6c:	cb840000 	.word	0xcb840000

08002e70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff f88d 	bl	8001f9c <LL_ADC_IsEnabled>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d14d      	bne.n	8002f24 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <ADC_Enable+0xc0>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	f043 0210 	orr.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e039      	b.n	8002f26 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff f85c 	bl	8001f74 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ebc:	f7fe fe84 	bl	8001bc8 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ec2:	e028      	b.n	8002f16 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff f867 	bl	8001f9c <LL_ADC_IsEnabled>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d104      	bne.n	8002ede <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f84b 	bl	8001f74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ede:	f7fe fe73 	bl	8001bc8 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d914      	bls.n	8002f16 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d00d      	beq.n	8002f16 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	f043 0210 	orr.w	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0a:	f043 0201 	orr.w	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e007      	b.n	8002f26 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d1cf      	bne.n	8002ec4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	8000003f 	.word	0x8000003f

08002f34 <LL_ADC_IsEnabled>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <LL_ADC_IsEnabled+0x18>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <LL_ADC_IsEnabled+0x1a>
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_ADC_REG_IsConversionOngoing>:
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d101      	bne.n	8002f72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b0a1      	sub	sp, #132	; 0x84
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e08b      	b.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002faa:	2300      	movs	r3, #0
 8002fac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb6:	d102      	bne.n	8002fbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fb8:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	e001      	b.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e06a      	b.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ffb9 	bl	8002f5a <LL_ADC_REG_IsConversionOngoing>
 8002fe8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ffb3 	bl	8002f5a <LL_ADC_REG_IsConversionOngoing>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d14c      	bne.n	8003094 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d149      	bne.n	8003094 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003000:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003002:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d028      	beq.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800300c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800301e:	035b      	lsls	r3, r3, #13
 8003020:	430b      	orrs	r3, r1
 8003022:	431a      	orrs	r2, r3
 8003024:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003026:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003028:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800302c:	f7ff ff82 	bl	8002f34 <LL_ADC_IsEnabled>
 8003030:	4604      	mov	r4, r0
 8003032:	4823      	ldr	r0, [pc, #140]	; (80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003034:	f7ff ff7e 	bl	8002f34 <LL_ADC_IsEnabled>
 8003038:	4603      	mov	r3, r0
 800303a:	4323      	orrs	r3, r4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d133      	bne.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003048:	f023 030f 	bic.w	r3, r3, #15
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	6811      	ldr	r1, [r2, #0]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	6892      	ldr	r2, [r2, #8]
 8003054:	430a      	orrs	r2, r1
 8003056:	431a      	orrs	r2, r3
 8003058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800305a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800305c:	e024      	b.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800305e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003068:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800306a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800306e:	f7ff ff61 	bl	8002f34 <LL_ADC_IsEnabled>
 8003072:	4604      	mov	r4, r0
 8003074:	4812      	ldr	r0, [pc, #72]	; (80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003076:	f7ff ff5d 	bl	8002f34 <LL_ADC_IsEnabled>
 800307a:	4603      	mov	r3, r0
 800307c:	4323      	orrs	r3, r4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d112      	bne.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800308a:	f023 030f 	bic.w	r3, r3, #15
 800308e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003090:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003092:	e009      	b.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003098:	f043 0220 	orr.w	r2, r3, #32
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030a6:	e000      	b.n	80030aa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80030b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3784      	adds	r7, #132	; 0x84
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd90      	pop	{r4, r7, pc}
 80030be:	bf00      	nop
 80030c0:	50000100 	.word	0x50000100
 80030c4:	50000300 	.word	0x50000300

080030c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <__NVIC_SetPriorityGrouping+0x44>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e4:	4013      	ands	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030fa:	4a04      	ldr	r2, [pc, #16]	; (800310c <__NVIC_SetPriorityGrouping+0x44>)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	60d3      	str	r3, [r2, #12]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <__NVIC_GetPriorityGrouping+0x18>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	f003 0307 	and.w	r3, r3, #7
}
 800311e:	4618      	mov	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	2b00      	cmp	r3, #0
 800313c:	db0b      	blt.n	8003156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	f003 021f 	and.w	r2, r3, #31
 8003144:	4907      	ldr	r1, [pc, #28]	; (8003164 <__NVIC_EnableIRQ+0x38>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2001      	movs	r0, #1
 800314e:	fa00 f202 	lsl.w	r2, r0, r2
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000e100 	.word	0xe000e100

08003168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	6039      	str	r1, [r7, #0]
 8003172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003178:	2b00      	cmp	r3, #0
 800317a:	db0a      	blt.n	8003192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	b2da      	uxtb	r2, r3
 8003180:	490c      	ldr	r1, [pc, #48]	; (80031b4 <__NVIC_SetPriority+0x4c>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	0112      	lsls	r2, r2, #4
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	440b      	add	r3, r1
 800318c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003190:	e00a      	b.n	80031a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4908      	ldr	r1, [pc, #32]	; (80031b8 <__NVIC_SetPriority+0x50>)
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	3b04      	subs	r3, #4
 80031a0:	0112      	lsls	r2, r2, #4
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	440b      	add	r3, r1
 80031a6:	761a      	strb	r2, [r3, #24]
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000e100 	.word	0xe000e100
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f1c3 0307 	rsb	r3, r3, #7
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	bf28      	it	cs
 80031da:	2304      	movcs	r3, #4
 80031dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3304      	adds	r3, #4
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d902      	bls.n	80031ec <NVIC_EncodePriority+0x30>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3b03      	subs	r3, #3
 80031ea:	e000      	b.n	80031ee <NVIC_EncodePriority+0x32>
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	f04f 32ff 	mov.w	r2, #4294967295
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	401a      	ands	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003204:	f04f 31ff 	mov.w	r1, #4294967295
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	43d9      	mvns	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	4313      	orrs	r3, r2
         );
}
 8003216:	4618      	mov	r0, r3
 8003218:	3724      	adds	r7, #36	; 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ff4c 	bl	80030c8 <__NVIC_SetPriorityGrouping>
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003246:	f7ff ff63 	bl	8003110 <__NVIC_GetPriorityGrouping>
 800324a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	6978      	ldr	r0, [r7, #20]
 8003252:	f7ff ffb3 	bl	80031bc <NVIC_EncodePriority>
 8003256:	4602      	mov	r2, r0
 8003258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff ff82 	bl	8003168 <__NVIC_SetPriority>
}
 8003264:	bf00      	nop
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff56 	bl	800312c <__NVIC_EnableIRQ>
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e08d      	b.n	80033b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <HAL_DMA_Init+0x138>)
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d80f      	bhi.n	80032c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	4b45      	ldr	r3, [pc, #276]	; (80033c4 <HAL_DMA_Init+0x13c>)
 80032ae:	4413      	add	r3, r2
 80032b0:	4a45      	ldr	r2, [pc, #276]	; (80033c8 <HAL_DMA_Init+0x140>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	009a      	lsls	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a42      	ldr	r2, [pc, #264]	; (80033cc <HAL_DMA_Init+0x144>)
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40
 80032c4:	e00e      	b.n	80032e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <HAL_DMA_Init+0x148>)
 80032ce:	4413      	add	r3, r2
 80032d0:	4a3d      	ldr	r2, [pc, #244]	; (80033c8 <HAL_DMA_Init+0x140>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	091b      	lsrs	r3, r3, #4
 80032d8:	009a      	lsls	r2, r3, #2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a3c      	ldr	r2, [pc, #240]	; (80033d4 <HAL_DMA_Init+0x14c>)
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa76 	bl	8003828 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003344:	d102      	bne.n	800334c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003360:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d010      	beq.n	800338c <HAL_DMA_Init+0x104>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b04      	cmp	r3, #4
 8003370:	d80c      	bhi.n	800338c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fa96 	bl	80038a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	e008      	b.n	800339e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40020407 	.word	0x40020407
 80033c4:	bffdfff8 	.word	0xbffdfff8
 80033c8:	cccccccd 	.word	0xcccccccd
 80033cc:	40020000 	.word	0x40020000
 80033d0:	bffdfbf8 	.word	0xbffdfbf8
 80033d4:	40020400 	.word	0x40020400

080033d8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_DMA_Start_IT+0x20>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e066      	b.n	80034c6 <HAL_DMA_Start_IT+0xee>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d155      	bne.n	80034b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f9bb 	bl	80037ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 020e 	orr.w	r2, r2, #14
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e00f      	b.n	8003470 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0204 	bic.w	r2, r2, #4
 800345e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 020a 	orr.w	r2, r2, #10
 800346e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d007      	beq.n	800348e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800348c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 0201 	orr.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e005      	b.n	80034c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80034c0:	2302      	movs	r3, #2
 80034c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d005      	beq.n	80034f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2204      	movs	r2, #4
 80034ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	e037      	b.n	8003562 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 020e 	bic.w	r2, r2, #14
 8003500:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003510:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f003 021f 	and.w	r2, r3, #31
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	2101      	movs	r1, #1
 8003530:	fa01 f202 	lsl.w	r2, r1, r2
 8003534:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800353e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00c      	beq.n	8003562 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003552:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003556:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003560:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d00d      	beq.n	80035b4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2204      	movs	r2, #4
 800359c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	e047      	b.n	8003644 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 020e 	bic.w	r2, r2, #14
 80035c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	f003 021f 	and.w	r2, r3, #31
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f202 	lsl.w	r2, r1, r2
 80035f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003600:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00c      	beq.n	8003624 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003618:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003622:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
    }
  }
  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	2204      	movs	r2, #4
 8003670:	409a      	lsls	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d026      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x7a>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d021      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d107      	bne.n	80036a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0204 	bic.w	r2, r2, #4
 80036a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f003 021f 	and.w	r2, r3, #31
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2104      	movs	r1, #4
 80036b0:	fa01 f202 	lsl.w	r2, r1, r2
 80036b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d071      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036c6:	e06c      	b.n	80037a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	2202      	movs	r2, #2
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02e      	beq.n	800373a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d029      	beq.n	800373a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 020a 	bic.w	r2, r2, #10
 8003702:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	f003 021f 	and.w	r2, r3, #31
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	2102      	movs	r1, #2
 800371a:	fa01 f202 	lsl.w	r2, r1, r2
 800371e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d038      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003738:	e033      	b.n	80037a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2208      	movs	r2, #8
 8003744:	409a      	lsls	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d02a      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d025      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 020e 	bic.w	r2, r2, #14
 8003766:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f003 021f 	and.w	r2, r3, #31
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2101      	movs	r1, #1
 8003776:	fa01 f202 	lsl.w	r2, r1, r2
 800377a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
}
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f003 021f 	and.w	r2, r3, #31
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2101      	movs	r1, #1
 80037e4:	fa01 f202 	lsl.w	r2, r1, r2
 80037e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b10      	cmp	r3, #16
 80037f8:	d108      	bne.n	800380c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800380a:	e007      	b.n	800381c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	4b16      	ldr	r3, [pc, #88]	; (8003890 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003838:	429a      	cmp	r2, r3
 800383a:	d802      	bhi.n	8003842 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800383c:	4b15      	ldr	r3, [pc, #84]	; (8003894 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e001      	b.n	8003846 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003844:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	3b08      	subs	r3, #8
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	009a      	lsls	r2, r3, #2
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4413      	add	r3, r2
 8003868:	461a      	mov	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003872:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	2201      	movs	r2, #1
 800387c:	409a      	lsls	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40020407 	.word	0x40020407
 8003894:	40020800 	.word	0x40020800
 8003898:	40020820 	.word	0x40020820
 800389c:	cccccccd 	.word	0xcccccccd
 80038a0:	40020880 	.word	0x40020880

080038a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	461a      	mov	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038c6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	2201      	movs	r2, #1
 80038d2:	409a      	lsls	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	1000823f 	.word	0x1000823f
 80038e8:	40020940 	.word	0x40020940

080038ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038fa:	e15a      	b.n	8003bb2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	2101      	movs	r1, #1
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	4013      	ands	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 814c 	beq.w	8003bac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d00b      	beq.n	8003934 <HAL_GPIO_Init+0x48>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d007      	beq.n	8003934 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003928:	2b11      	cmp	r3, #17
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b12      	cmp	r3, #18
 8003932:	d130      	bne.n	8003996 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800396a:	2201      	movs	r2, #1
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 0201 	and.w	r2, r3, #1
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	2203      	movs	r2, #3
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d003      	beq.n	80039d6 <HAL_GPIO_Init+0xea>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b12      	cmp	r3, #18
 80039d4:	d123      	bne.n	8003a1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	08da      	lsrs	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	220f      	movs	r2, #15
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	08da      	lsrs	r2, r3, #3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3208      	adds	r2, #8
 8003a18:	6939      	ldr	r1, [r7, #16]
 8003a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	2203      	movs	r2, #3
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 0203 	and.w	r2, r3, #3
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 80a6 	beq.w	8003bac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a60:	4b5b      	ldr	r3, [pc, #364]	; (8003bd0 <HAL_GPIO_Init+0x2e4>)
 8003a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a64:	4a5a      	ldr	r2, [pc, #360]	; (8003bd0 <HAL_GPIO_Init+0x2e4>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6613      	str	r3, [r2, #96]	; 0x60
 8003a6c:	4b58      	ldr	r3, [pc, #352]	; (8003bd0 <HAL_GPIO_Init+0x2e4>)
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a78:	4a56      	ldr	r2, [pc, #344]	; (8003bd4 <HAL_GPIO_Init+0x2e8>)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	089b      	lsrs	r3, r3, #2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	220f      	movs	r2, #15
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003aa2:	d01f      	beq.n	8003ae4 <HAL_GPIO_Init+0x1f8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a4c      	ldr	r2, [pc, #304]	; (8003bd8 <HAL_GPIO_Init+0x2ec>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d019      	beq.n	8003ae0 <HAL_GPIO_Init+0x1f4>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a4b      	ldr	r2, [pc, #300]	; (8003bdc <HAL_GPIO_Init+0x2f0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <HAL_GPIO_Init+0x1f0>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a4a      	ldr	r2, [pc, #296]	; (8003be0 <HAL_GPIO_Init+0x2f4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00d      	beq.n	8003ad8 <HAL_GPIO_Init+0x1ec>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a49      	ldr	r2, [pc, #292]	; (8003be4 <HAL_GPIO_Init+0x2f8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d007      	beq.n	8003ad4 <HAL_GPIO_Init+0x1e8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a48      	ldr	r2, [pc, #288]	; (8003be8 <HAL_GPIO_Init+0x2fc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d101      	bne.n	8003ad0 <HAL_GPIO_Init+0x1e4>
 8003acc:	2305      	movs	r3, #5
 8003ace:	e00a      	b.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003ad0:	2306      	movs	r3, #6
 8003ad2:	e008      	b.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	e006      	b.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e004      	b.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e002      	b.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_GPIO_Init+0x1fa>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	f002 0203 	and.w	r2, r2, #3
 8003aec:	0092      	lsls	r2, r2, #2
 8003aee:	4093      	lsls	r3, r2
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af6:	4937      	ldr	r1, [pc, #220]	; (8003bd4 <HAL_GPIO_Init+0x2e8>)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	3302      	adds	r3, #2
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b04:	4b39      	ldr	r3, [pc, #228]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b28:	4a30      	ldr	r2, [pc, #192]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003b2e:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b52:	4a26      	ldr	r2, [pc, #152]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b58:	4b24      	ldr	r3, [pc, #144]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b7c:	4a1b      	ldr	r2, [pc, #108]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b82:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ba6:	4a11      	ldr	r2, [pc, #68]	; (8003bec <HAL_GPIO_Init+0x300>)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f47f ae9d 	bne.w	80038fc <HAL_GPIO_Init+0x10>
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40010000 	.word	0x40010000
 8003bd8:	48000400 	.word	0x48000400
 8003bdc:	48000800 	.word	0x48000800
 8003be0:	48000c00 	.word	0x48000c00
 8003be4:	48001000 	.word	0x48001000
 8003be8:	48001400 	.word	0x48001400
 8003bec:	40010400 	.word	0x40010400

08003bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c00:	787b      	ldrb	r3, [r7, #1]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c0c:	e002      	b.n	8003c14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c0e:	887a      	ldrh	r2, [r7, #2]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d006      	beq.n	8003c44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c36:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f008 f82a 	bl	800bc98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40010400 	.word	0x40010400

08003c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e081      	b.n	8003d66 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd fcc4 	bl	8001604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2224      	movs	r2, #36	; 0x24
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ca0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	e006      	b.n	8003cd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d104      	bne.n	8003cea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	ea42 0103 	orr.w	r1, r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	021a      	lsls	r2, r3, #8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	817b      	strh	r3, [r7, #10]
 8003d80:	4613      	mov	r3, r2
 8003d82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	f040 80da 	bne.w	8003f46 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_I2C_Master_Transmit+0x30>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e0d3      	b.n	8003f48 <HAL_I2C_Master_Transmit+0x1d8>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003da8:	f7fd ff0e 	bl	8001bc8 <HAL_GetTick>
 8003dac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2319      	movs	r3, #25
 8003db4:	2201      	movs	r2, #1
 8003db6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f9e6 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0be      	b.n	8003f48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2221      	movs	r2, #33	; 0x21
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	893a      	ldrh	r2, [r7, #8]
 8003dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2bff      	cmp	r3, #255	; 0xff
 8003dfa:	d90e      	bls.n	8003e1a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	22ff      	movs	r2, #255	; 0xff
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	8979      	ldrh	r1, [r7, #10]
 8003e0a:	4b51      	ldr	r3, [pc, #324]	; (8003f50 <HAL_I2C_Master_Transmit+0x1e0>)
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fb48 	bl	80044a8 <I2C_TransferConfig>
 8003e18:	e06c      	b.n	8003ef4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	8979      	ldrh	r1, [r7, #10]
 8003e2c:	4b48      	ldr	r3, [pc, #288]	; (8003f50 <HAL_I2C_Master_Transmit+0x1e0>)
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fb37 	bl	80044a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003e3a:	e05b      	b.n	8003ef4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	6a39      	ldr	r1, [r7, #32]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f9e3 	bl	800420c <I2C_WaitOnTXISFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e07b      	b.n	8003f48 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d034      	beq.n	8003ef4 <HAL_I2C_Master_Transmit+0x184>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d130      	bne.n	8003ef4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2180      	movs	r1, #128	; 0x80
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f975 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e04d      	b.n	8003f48 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2bff      	cmp	r3, #255	; 0xff
 8003eb4:	d90e      	bls.n	8003ed4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	22ff      	movs	r2, #255	; 0xff
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	8979      	ldrh	r1, [r7, #10]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 faeb 	bl	80044a8 <I2C_TransferConfig>
 8003ed2:	e00f      	b.n	8003ef4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	8979      	ldrh	r1, [r7, #10]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fada 	bl	80044a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d19e      	bne.n	8003e3c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	6a39      	ldr	r1, [r7, #32]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f9c2 	bl	800428c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e01a      	b.n	8003f48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2220      	movs	r2, #32
 8003f18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6859      	ldr	r1, [r3, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_I2C_Master_Transmit+0x1e4>)
 8003f26:	400b      	ands	r3, r1
 8003f28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	80002000 	.word	0x80002000
 8003f54:	fe00e800 	.word	0xfe00e800

08003f58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	461a      	mov	r2, r3
 8003f64:	460b      	mov	r3, r1
 8003f66:	817b      	strh	r3, [r7, #10]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	f040 80db 	bne.w	8004130 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_I2C_Master_Receive+0x30>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e0d4      	b.n	8004132 <HAL_I2C_Master_Receive+0x1da>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f90:	f7fd fe1a 	bl	8001bc8 <HAL_GetTick>
 8003f94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2319      	movs	r3, #25
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f8f2 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e0bf      	b.n	8004132 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2222      	movs	r2, #34	; 0x22
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2210      	movs	r2, #16
 8003fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	893a      	ldrh	r2, [r7, #8]
 8003fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2bff      	cmp	r3, #255	; 0xff
 8003fe2:	d90e      	bls.n	8004002 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	22ff      	movs	r2, #255	; 0xff
 8003fe8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	8979      	ldrh	r1, [r7, #10]
 8003ff2:	4b52      	ldr	r3, [pc, #328]	; (800413c <HAL_I2C_Master_Receive+0x1e4>)
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fa54 	bl	80044a8 <I2C_TransferConfig>
 8004000:	e06d      	b.n	80040de <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004010:	b2da      	uxtb	r2, r3
 8004012:	8979      	ldrh	r1, [r7, #10]
 8004014:	4b49      	ldr	r3, [pc, #292]	; (800413c <HAL_I2C_Master_Receive+0x1e4>)
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 fa43 	bl	80044a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004022:	e05c      	b.n	80040de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	6a39      	ldr	r1, [r7, #32]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f96b 	bl	8004304 <I2C_WaitOnRXNEFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e07c      	b.n	8004132 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d034      	beq.n	80040de <HAL_I2C_Master_Receive+0x186>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	d130      	bne.n	80040de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	2200      	movs	r2, #0
 8004084:	2180      	movs	r1, #128	; 0x80
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f880 	bl	800418c <I2C_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e04d      	b.n	8004132 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	2bff      	cmp	r3, #255	; 0xff
 800409e:	d90e      	bls.n	80040be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	22ff      	movs	r2, #255	; 0xff
 80040a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	8979      	ldrh	r1, [r7, #10]
 80040ae:	2300      	movs	r3, #0
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f9f6 	bl	80044a8 <I2C_TransferConfig>
 80040bc:	e00f      	b.n	80040de <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	8979      	ldrh	r1, [r7, #10]
 80040d0:	2300      	movs	r3, #0
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f9e5 	bl	80044a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d19d      	bne.n	8004024 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	6a39      	ldr	r1, [r7, #32]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f8cd 	bl	800428c <I2C_WaitOnSTOPFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e01a      	b.n	8004132 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2220      	movs	r2, #32
 8004102:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <HAL_I2C_Master_Receive+0x1e8>)
 8004110:	400b      	ands	r3, r1
 8004112:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	e000      	b.n	8004132 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004130:	2302      	movs	r3, #2
  }
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	80002400 	.word	0x80002400
 8004140:	fe00e800 	.word	0xfe00e800

08004144 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b02      	cmp	r3, #2
 8004158:	d103      	bne.n	8004162 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2200      	movs	r2, #0
 8004160:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b01      	cmp	r3, #1
 800416e:	d007      	beq.n	8004180 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	619a      	str	r2, [r3, #24]
  }
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419c:	e022      	b.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d01e      	beq.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a6:	f7fd fd0f 	bl	8001bc8 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d302      	bcc.n	80041bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d113      	bne.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e00f      	b.n	8004204 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d0cd      	beq.n	800419e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004218:	e02c      	b.n	8004274 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f8dc 	bl	80043dc <I2C_IsAcknowledgeFailed>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e02a      	b.n	8004284 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d01e      	beq.n	8004274 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004236:	f7fd fcc7 	bl	8001bc8 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d113      	bne.n	8004274 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e007      	b.n	8004284 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	d1cb      	bne.n	800421a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004298:	e028      	b.n	80042ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f89c 	bl	80043dc <I2C_IsAcknowledgeFailed>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e026      	b.n	80042fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fd fc8b 	bl	8001bc8 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d113      	bne.n	80042ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e007      	b.n	80042fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b20      	cmp	r3, #32
 80042f8:	d1cf      	bne.n	800429a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004310:	e055      	b.n	80043be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f860 	bl	80043dc <I2C_IsAcknowledgeFailed>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e053      	b.n	80043ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b20      	cmp	r3, #32
 8004332:	d129      	bne.n	8004388 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b04      	cmp	r3, #4
 8004340:	d105      	bne.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e03f      	b.n	80043ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2220      	movs	r2, #32
 8004354:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004362:	400b      	ands	r3, r1
 8004364:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e022      	b.n	80043ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004388:	f7fd fc1e 	bl	8001bc8 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	429a      	cmp	r2, r3
 8004396:	d302      	bcc.n	800439e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e007      	b.n	80043ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d1a2      	bne.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	fe00e800 	.word	0xfe00e800

080043dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b10      	cmp	r3, #16
 80043f4:	d151      	bne.n	800449a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043f6:	e022      	b.n	800443e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d01e      	beq.n	800443e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004400:	f7fd fbe2 	bl	8001bc8 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	429a      	cmp	r2, r3
 800440e:	d302      	bcc.n	8004416 <I2C_IsAcknowledgeFailed+0x3a>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d113      	bne.n	800443e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	f043 0220 	orr.w	r2, r3, #32
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e02e      	b.n	800449c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b20      	cmp	r3, #32
 800444a:	d1d5      	bne.n	80043f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2210      	movs	r2, #16
 8004452:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2220      	movs	r2, #32
 800445a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff fe71 	bl	8004144 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6859      	ldr	r1, [r3, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <I2C_IsAcknowledgeFailed+0xc8>)
 800446e:	400b      	ands	r3, r1
 8004470:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	f043 0204 	orr.w	r2, r3, #4
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	fe00e800 	.word	0xfe00e800

080044a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	460b      	mov	r3, r1
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	4613      	mov	r3, r2
 80044b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	0d5b      	lsrs	r3, r3, #21
 80044c4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80044c8:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <I2C_TransferConfig+0x58>)
 80044ca:	430b      	orrs	r3, r1
 80044cc:	43db      	mvns	r3, r3
 80044ce:	ea02 0103 	and.w	r1, r2, r3
 80044d2:	897b      	ldrh	r3, [r7, #10]
 80044d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044d8:	7a7b      	ldrb	r3, [r7, #9]
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	03ff63ff 	.word	0x03ff63ff

08004504 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b20      	cmp	r3, #32
 8004518:	d138      	bne.n	800458c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004524:	2302      	movs	r3, #2
 8004526:	e032      	b.n	800458e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2224      	movs	r2, #36	; 0x24
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004556:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6819      	ldr	r1, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	e000      	b.n	800458e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800458c:	2302      	movs	r3, #2
  }
}
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d139      	bne.n	8004624 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045ba:	2302      	movs	r3, #2
 80045bc:	e033      	b.n	8004626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2224      	movs	r2, #36	; 0x24
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	e000      	b.n	8004626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004624:	2302      	movs	r3, #2
  }
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d141      	bne.n	80046c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004642:	4b4b      	ldr	r3, [pc, #300]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464e:	d131      	bne.n	80046b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004650:	4b47      	ldr	r3, [pc, #284]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004656:	4a46      	ldr	r2, [pc, #280]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800465c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004660:	4b43      	ldr	r3, [pc, #268]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004668:	4a41      	ldr	r2, [pc, #260]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800466e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004670:	4b40      	ldr	r3, [pc, #256]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2232      	movs	r2, #50	; 0x32
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	4a3f      	ldr	r2, [pc, #252]	; (8004778 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	0c9b      	lsrs	r3, r3, #18
 8004682:	3301      	adds	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004686:	e002      	b.n	800468e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b01      	subs	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468e:	4b38      	ldr	r3, [pc, #224]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469a:	d102      	bne.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f2      	bne.n	8004688 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046a2:	4b33      	ldr	r3, [pc, #204]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ae:	d158      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e057      	b.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b4:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ba:	4a2d      	ldr	r2, [pc, #180]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046c4:	e04d      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046cc:	d141      	bne.n	8004752 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ce:	4b28      	ldr	r3, [pc, #160]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046da:	d131      	bne.n	8004740 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046dc:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e2:	4a23      	ldr	r2, [pc, #140]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046f4:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046fc:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2232      	movs	r2, #50	; 0x32
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	0c9b      	lsrs	r3, r3, #18
 800470e:	3301      	adds	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004712:	e002      	b.n	800471a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b01      	subs	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471a:	4b15      	ldr	r3, [pc, #84]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004726:	d102      	bne.n	800472e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f2      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473a:	d112      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e011      	b.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004746:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004750:	e007      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800475a:	4a05      	ldr	r2, [pc, #20]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004760:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40007000 	.word	0x40007000
 8004774:	20000000 	.word	0x20000000
 8004778:	431bde83 	.word	0x431bde83

0800477c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800478a:	6093      	str	r3, [r2, #8]
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40007000 	.word	0x40007000

0800479c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e308      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d075      	beq.n	80048a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ba:	4ba3      	ldr	r3, [pc, #652]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c4:	4ba0      	ldr	r3, [pc, #640]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b0c      	cmp	r3, #12
 80047d2:	d102      	bne.n	80047da <HAL_RCC_OscConfig+0x3e>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d002      	beq.n	80047e0 <HAL_RCC_OscConfig+0x44>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d10b      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	4b99      	ldr	r3, [pc, #612]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d05b      	beq.n	80048a4 <HAL_RCC_OscConfig+0x108>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d157      	bne.n	80048a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e2e3      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004800:	d106      	bne.n	8004810 <HAL_RCC_OscConfig+0x74>
 8004802:	4b91      	ldr	r3, [pc, #580]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a90      	ldr	r2, [pc, #576]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e01d      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x98>
 800481a:	4b8b      	ldr	r3, [pc, #556]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a8a      	ldr	r2, [pc, #552]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	4b88      	ldr	r3, [pc, #544]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a87      	ldr	r2, [pc, #540]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 800482c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004834:	4b84      	ldr	r3, [pc, #528]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a83      	ldr	r2, [pc, #524]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 800483a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	4b81      	ldr	r3, [pc, #516]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a80      	ldr	r2, [pc, #512]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fd f9b8 	bl	8001bc8 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800485c:	f7fd f9b4 	bl	8001bc8 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	; 0x64
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e2a8      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800486e:	4b76      	ldr	r3, [pc, #472]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0xc0>
 800487a:	e014      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fd f9a4 	bl	8001bc8 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004884:	f7fd f9a0 	bl	8001bc8 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	; 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e294      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004896:	4b6c      	ldr	r3, [pc, #432]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0xe8>
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d075      	beq.n	800499e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b2:	4b65      	ldr	r3, [pc, #404]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048bc:	4b62      	ldr	r3, [pc, #392]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	d102      	bne.n	80048d2 <HAL_RCC_OscConfig+0x136>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d002      	beq.n	80048d8 <HAL_RCC_OscConfig+0x13c>
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d11f      	bne.n	8004918 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048d8:	4b5b      	ldr	r3, [pc, #364]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_OscConfig+0x154>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e267      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f0:	4b55      	ldr	r3, [pc, #340]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	061b      	lsls	r3, r3, #24
 80048fe:	4952      	ldr	r1, [pc, #328]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004900:	4313      	orrs	r3, r2
 8004902:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004904:	4b51      	ldr	r3, [pc, #324]	; (8004a4c <HAL_RCC_OscConfig+0x2b0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7fc ff7b 	bl	8001804 <HAL_InitTick>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d043      	beq.n	800499c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e253      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d023      	beq.n	8004968 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004920:	4b49      	ldr	r3, [pc, #292]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a48      	ldr	r2, [pc, #288]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fd f94c 	bl	8001bc8 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004934:	f7fd f948 	bl	8001bc8 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e23c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004946:	4b40      	ldr	r3, [pc, #256]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004952:	4b3d      	ldr	r3, [pc, #244]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	4939      	ldr	r1, [pc, #228]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004962:	4313      	orrs	r3, r2
 8004964:	604b      	str	r3, [r1, #4]
 8004966:	e01a      	b.n	800499e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004968:	4b37      	ldr	r3, [pc, #220]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a36      	ldr	r2, [pc, #216]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 800496e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fd f928 	bl	8001bc8 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497c:	f7fd f924 	bl	8001bc8 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e218      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800498e:	4b2e      	ldr	r3, [pc, #184]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x1e0>
 800499a:	e000      	b.n	800499e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800499c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d03c      	beq.n	8004a24 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01c      	beq.n	80049ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b2:	4b25      	ldr	r3, [pc, #148]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b8:	4a23      	ldr	r2, [pc, #140]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7fd f901 	bl	8001bc8 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ca:	f7fd f8fd 	bl	8001bc8 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e1f1      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049dc:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 80049de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ef      	beq.n	80049ca <HAL_RCC_OscConfig+0x22e>
 80049ea:	e01b      	b.n	8004a24 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ec:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 80049ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f2:	4a15      	ldr	r2, [pc, #84]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fc:	f7fd f8e4 	bl	8001bc8 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a04:	f7fd f8e0 	bl	8001bc8 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e1d4      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a16:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1ef      	bne.n	8004a04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80ab 	beq.w	8004b88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a32:	2300      	movs	r3, #0
 8004a34:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a36:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_RCC_OscConfig+0x2b4>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e005      	b.n	8004a52 <HAL_RCC_OscConfig+0x2b6>
 8004a46:	bf00      	nop
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	20000004 	.word	0x20000004
 8004a50:	2300      	movs	r3, #0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a56:	4baf      	ldr	r3, [pc, #700]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	4aae      	ldr	r2, [pc, #696]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a60:	6593      	str	r3, [r2, #88]	; 0x58
 8004a62:	4bac      	ldr	r3, [pc, #688]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a72:	4ba9      	ldr	r3, [pc, #676]	; (8004d18 <HAL_RCC_OscConfig+0x57c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d118      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a7e:	4ba6      	ldr	r3, [pc, #664]	; (8004d18 <HAL_RCC_OscConfig+0x57c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4aa5      	ldr	r2, [pc, #660]	; (8004d18 <HAL_RCC_OscConfig+0x57c>)
 8004a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a8a:	f7fd f89d 	bl	8001bc8 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a92:	f7fd f899 	bl	8001bc8 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e18d      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa4:	4b9c      	ldr	r3, [pc, #624]	; (8004d18 <HAL_RCC_OscConfig+0x57c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d108      	bne.n	8004aca <HAL_RCC_OscConfig+0x32e>
 8004ab8:	4b96      	ldr	r3, [pc, #600]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	4a95      	ldr	r2, [pc, #596]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ac8:	e024      	b.n	8004b14 <HAL_RCC_OscConfig+0x378>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d110      	bne.n	8004af4 <HAL_RCC_OscConfig+0x358>
 8004ad2:	4b90      	ldr	r3, [pc, #576]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad8:	4a8e      	ldr	r2, [pc, #568]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004ada:	f043 0304 	orr.w	r3, r3, #4
 8004ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ae2:	4b8c      	ldr	r3, [pc, #560]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae8:	4a8a      	ldr	r2, [pc, #552]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af2:	e00f      	b.n	8004b14 <HAL_RCC_OscConfig+0x378>
 8004af4:	4b87      	ldr	r3, [pc, #540]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afa:	4a86      	ldr	r2, [pc, #536]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b04:	4b83      	ldr	r3, [pc, #524]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0a:	4a82      	ldr	r2, [pc, #520]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004b0c:	f023 0304 	bic.w	r3, r3, #4
 8004b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d016      	beq.n	8004b4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fd f854 	bl	8001bc8 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b24:	f7fd f850 	bl	8001bc8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e142      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b3a:	4b76      	ldr	r3, [pc, #472]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0ed      	beq.n	8004b24 <HAL_RCC_OscConfig+0x388>
 8004b48:	e015      	b.n	8004b76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4a:	f7fd f83d 	bl	8001bc8 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b52:	f7fd f839 	bl	8001bc8 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e12b      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b68:	4b6a      	ldr	r3, [pc, #424]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ed      	bne.n	8004b52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b76:	7ffb      	ldrb	r3, [r7, #31]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7c:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b80:	4a64      	ldr	r2, [pc, #400]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d03c      	beq.n	8004c0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01c      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b9c:	4b5d      	ldr	r3, [pc, #372]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba2:	4a5c      	ldr	r2, [pc, #368]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fd f80c 	bl	8001bc8 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb4:	f7fd f808 	bl	8001bc8 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e0fc      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bc6:	4b53      	ldr	r3, [pc, #332]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ef      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x418>
 8004bd4:	e01b      	b.n	8004c0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bd6:	4b4f      	ldr	r3, [pc, #316]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bdc:	4a4d      	ldr	r2, [pc, #308]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be6:	f7fc ffef 	bl	8001bc8 <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bee:	f7fc ffeb 	bl	8001bc8 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0df      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c00:	4b44      	ldr	r3, [pc, #272]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ef      	bne.n	8004bee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80d3 	beq.w	8004dbe <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c18:	4b3e      	ldr	r3, [pc, #248]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	f000 808d 	beq.w	8004d40 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d15a      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b39      	ldr	r3, [pc, #228]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a38      	ldr	r2, [pc, #224]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fc ffc5 	bl	8001bc8 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fc ffc1 	bl	8001bc8 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e0b5      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c54:	4b2f      	ldr	r3, [pc, #188]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f0      	bne.n	8004c42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c60:	4b2c      	ldr	r3, [pc, #176]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <HAL_RCC_OscConfig+0x580>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6a11      	ldr	r1, [r2, #32]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c70:	3a01      	subs	r2, #1
 8004c72:	0112      	lsls	r2, r2, #4
 8004c74:	4311      	orrs	r1, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c7a:	0212      	lsls	r2, r2, #8
 8004c7c:	4311      	orrs	r1, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c82:	0852      	lsrs	r2, r2, #1
 8004c84:	3a01      	subs	r2, #1
 8004c86:	0552      	lsls	r2, r2, #21
 8004c88:	4311      	orrs	r1, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c8e:	0852      	lsrs	r2, r2, #1
 8004c90:	3a01      	subs	r2, #1
 8004c92:	0652      	lsls	r2, r2, #25
 8004c94:	4311      	orrs	r1, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c9a:	06d2      	lsls	r2, r2, #27
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	491d      	ldr	r1, [pc, #116]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca4:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cb0:	4b18      	ldr	r3, [pc, #96]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a17      	ldr	r2, [pc, #92]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7fc ff84 	bl	8001bc8 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7fc ff80 	bl	8001bc8 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e074      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd6:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x528>
 8004ce2:	e06c      	b.n	8004dbe <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004cf0:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a07      	ldr	r2, [pc, #28]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4a04      	ldr	r2, [pc, #16]	; (8004d14 <HAL_RCC_OscConfig+0x578>)
 8004d02:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fc ff5c 	bl	8001bc8 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d12:	e00e      	b.n	8004d32 <HAL_RCC_OscConfig+0x596>
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40007000 	.word	0x40007000
 8004d1c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fc ff52 	bl	8001bc8 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e046      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d32:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x584>
 8004d3e:	e03e      	b.n	8004dbe <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e039      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d4c:	4b1e      	ldr	r3, [pc, #120]	; (8004dc8 <HAL_RCC_OscConfig+0x62c>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f003 0203 	and.w	r2, r3, #3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d12c      	bne.n	8004dba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d123      	bne.n	8004dba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d11b      	bne.n	8004dba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d113      	bne.n	8004dba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d109      	bne.n	8004dba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	3b01      	subs	r3, #1
 8004db4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d001      	beq.n	8004dbe <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40021000 	.word	0x40021000

08004dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e11e      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de4:	4b91      	ldr	r3, [pc, #580]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d910      	bls.n	8004e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df2:	4b8e      	ldr	r3, [pc, #568]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f023 020f 	bic.w	r2, r3, #15
 8004dfa:	498c      	ldr	r1, [pc, #560]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e02:	4b8a      	ldr	r3, [pc, #552]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e106      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d073      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d129      	bne.n	8004e7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e28:	4b81      	ldr	r3, [pc, #516]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0f4      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e38:	f000 f9d0 	bl	80051dc <RCC_GetSysClockFreqFromPLLSource>
 8004e3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	4a7c      	ldr	r2, [pc, #496]	; (8005034 <HAL_RCC_ClockConfig+0x268>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d93f      	bls.n	8004ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e46:	4b7a      	ldr	r3, [pc, #488]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d033      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d12f      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e66:	4b72      	ldr	r3, [pc, #456]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6e:	4a70      	ldr	r2, [pc, #448]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	e024      	b.n	8004ec6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d107      	bne.n	8004e94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e84:	4b6a      	ldr	r3, [pc, #424]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0c6      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e94:	4b66      	ldr	r3, [pc, #408]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0be      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ea4:	f000 f8ce 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8004ea8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	4a61      	ldr	r2, [pc, #388]	; (8005034 <HAL_RCC_ClockConfig+0x268>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d909      	bls.n	8004ec6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eb2:	4b5f      	ldr	r3, [pc, #380]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eba:	4a5d      	ldr	r2, [pc, #372]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ec6:	4b5a      	ldr	r3, [pc, #360]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f023 0203 	bic.w	r2, r3, #3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4957      	ldr	r1, [pc, #348]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed8:	f7fc fe76 	bl	8001bc8 <HAL_GetTick>
 8004edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee0:	f7fc fe72 	bl	8001bc8 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e095      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef6:	4b4e      	ldr	r3, [pc, #312]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 020c 	and.w	r2, r3, #12
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d1eb      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d023      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f20:	4b43      	ldr	r3, [pc, #268]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4a42      	ldr	r2, [pc, #264]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f38:	4b3d      	ldr	r3, [pc, #244]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f40:	4a3b      	ldr	r2, [pc, #236]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b39      	ldr	r3, [pc, #228]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	4936      	ldr	r1, [pc, #216]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b80      	cmp	r3, #128	; 0x80
 8004f60:	d105      	bne.n	8004f6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f62:	4b33      	ldr	r3, [pc, #204]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4a32      	ldr	r2, [pc, #200]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f6e:	4b2f      	ldr	r3, [pc, #188]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d21d      	bcs.n	8004fb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7c:	4b2b      	ldr	r3, [pc, #172]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 020f 	bic.w	r2, r3, #15
 8004f84:	4929      	ldr	r1, [pc, #164]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f8c:	f7fc fe1c 	bl	8001bc8 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f94:	f7fc fe18 	bl	8001bc8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e03b      	b.n	8005022 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004faa:	4b20      	ldr	r3, [pc, #128]	; (800502c <HAL_RCC_ClockConfig+0x260>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d1ed      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4917      	ldr	r1, [pc, #92]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fe2:	4b13      	ldr	r3, [pc, #76]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	490f      	ldr	r1, [pc, #60]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ff6:	f000 f825 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <HAL_RCC_ClockConfig+0x264>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	490c      	ldr	r1, [pc, #48]	; (8005038 <HAL_RCC_ClockConfig+0x26c>)
 8005008:	5ccb      	ldrb	r3, [r1, r3]
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	fa22 f303 	lsr.w	r3, r2, r3
 8005012:	4a0a      	ldr	r2, [pc, #40]	; (800503c <HAL_RCC_ClockConfig+0x270>)
 8005014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005016:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <HAL_RCC_ClockConfig+0x274>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7fc fbf2 	bl	8001804 <HAL_InitTick>
 8005020:	4603      	mov	r3, r0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40022000 	.word	0x40022000
 8005030:	40021000 	.word	0x40021000
 8005034:	04c4b400 	.word	0x04c4b400
 8005038:	0800ff4c 	.word	0x0800ff4c
 800503c:	20000000 	.word	0x20000000
 8005040:	20000004 	.word	0x20000004

08005044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800504a:	4b2c      	ldr	r3, [pc, #176]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b04      	cmp	r3, #4
 8005054:	d102      	bne.n	800505c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005056:	4b2a      	ldr	r3, [pc, #168]	; (8005100 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	e047      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800505c:	4b27      	ldr	r3, [pc, #156]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 030c 	and.w	r3, r3, #12
 8005064:	2b08      	cmp	r3, #8
 8005066:	d102      	bne.n	800506e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005068:	4b26      	ldr	r3, [pc, #152]	; (8005104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	e03e      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800506e:	4b23      	ldr	r3, [pc, #140]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
 8005076:	2b0c      	cmp	r3, #12
 8005078:	d136      	bne.n	80050e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800507a:	4b20      	ldr	r3, [pc, #128]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005084:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	3301      	adds	r3, #1
 8005090:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d10c      	bne.n	80050b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005098:	4a1a      	ldr	r2, [pc, #104]	; (8005104 <HAL_RCC_GetSysClockFreq+0xc0>)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	4a16      	ldr	r2, [pc, #88]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a2:	68d2      	ldr	r2, [r2, #12]
 80050a4:	0a12      	lsrs	r2, r2, #8
 80050a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	617b      	str	r3, [r7, #20]
      break;
 80050b0:	e00c      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050b2:	4a13      	ldr	r2, [pc, #76]	; (8005100 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ba:	4a10      	ldr	r2, [pc, #64]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80050bc:	68d2      	ldr	r2, [r2, #12]
 80050be:	0a12      	lsrs	r2, r2, #8
 80050c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050c4:	fb02 f303 	mul.w	r3, r2, r3
 80050c8:	617b      	str	r3, [r7, #20]
      break;
 80050ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	0e5b      	lsrs	r3, r3, #25
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	3301      	adds	r3, #1
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e001      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050ec:	693b      	ldr	r3, [r7, #16]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40021000 	.word	0x40021000
 8005100:	00f42400 	.word	0x00f42400
 8005104:	007a1200 	.word	0x007a1200

08005108 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800510c:	4b03      	ldr	r3, [pc, #12]	; (800511c <HAL_RCC_GetHCLKFreq+0x14>)
 800510e:	681b      	ldr	r3, [r3, #0]
}
 8005110:	4618      	mov	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	20000000 	.word	0x20000000

08005120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005124:	f7ff fff0 	bl	8005108 <HAL_RCC_GetHCLKFreq>
 8005128:	4602      	mov	r2, r0
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	4904      	ldr	r1, [pc, #16]	; (8005148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005136:	5ccb      	ldrb	r3, [r1, r3]
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40021000 	.word	0x40021000
 8005148:	0800ff5c 	.word	0x0800ff5c

0800514c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005150:	f7ff ffda 	bl	8005108 <HAL_RCC_GetHCLKFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b06      	ldr	r3, [pc, #24]	; (8005170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	0adb      	lsrs	r3, r3, #11
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	4904      	ldr	r1, [pc, #16]	; (8005174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005162:	5ccb      	ldrb	r3, [r1, r3]
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40021000 	.word	0x40021000
 8005174:	0800ff5c 	.word	0x0800ff5c

08005178 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	220f      	movs	r2, #15
 8005186:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005188:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <HAL_RCC_GetClockConfig+0x5c>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 0203 	and.w	r2, r3, #3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005194:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <HAL_RCC_GetClockConfig+0x5c>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80051a0:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <HAL_RCC_GetClockConfig+0x5c>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80051ac:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <HAL_RCC_GetClockConfig+0x5c>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	08db      	lsrs	r3, r3, #3
 80051b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80051ba:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <HAL_RCC_GetClockConfig+0x60>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 020f 	and.w	r2, r3, #15
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	601a      	str	r2, [r3, #0]
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40022000 	.word	0x40022000

080051dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051e2:	4b1e      	ldr	r3, [pc, #120]	; (800525c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051ec:	4b1b      	ldr	r3, [pc, #108]	; (800525c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	3301      	adds	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d10c      	bne.n	800521a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005200:	4a17      	ldr	r2, [pc, #92]	; (8005260 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	fbb2 f3f3 	udiv	r3, r2, r3
 8005208:	4a14      	ldr	r2, [pc, #80]	; (800525c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800520a:	68d2      	ldr	r2, [r2, #12]
 800520c:	0a12      	lsrs	r2, r2, #8
 800520e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005212:	fb02 f303 	mul.w	r3, r2, r3
 8005216:	617b      	str	r3, [r7, #20]
    break;
 8005218:	e00c      	b.n	8005234 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800521a:	4a12      	ldr	r2, [pc, #72]	; (8005264 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005222:	4a0e      	ldr	r2, [pc, #56]	; (800525c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005224:	68d2      	ldr	r2, [r2, #12]
 8005226:	0a12      	lsrs	r2, r2, #8
 8005228:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800522c:	fb02 f303 	mul.w	r3, r2, r3
 8005230:	617b      	str	r3, [r7, #20]
    break;
 8005232:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005234:	4b09      	ldr	r3, [pc, #36]	; (800525c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	0e5b      	lsrs	r3, r3, #25
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	3301      	adds	r3, #1
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800524e:	687b      	ldr	r3, [r7, #4]
}
 8005250:	4618      	mov	r0, r3
 8005252:	371c      	adds	r7, #28
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	40021000 	.word	0x40021000
 8005260:	007a1200 	.word	0x007a1200
 8005264:	00f42400 	.word	0x00f42400

08005268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005270:	2300      	movs	r3, #0
 8005272:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005274:	2300      	movs	r3, #0
 8005276:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 8098 	beq.w	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005286:	2300      	movs	r3, #0
 8005288:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800528a:	4b43      	ldr	r3, [pc, #268]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10d      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005296:	4b40      	ldr	r3, [pc, #256]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529a:	4a3f      	ldr	r2, [pc, #252]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800529c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a0:	6593      	str	r3, [r2, #88]	; 0x58
 80052a2:	4b3d      	ldr	r3, [pc, #244]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ae:	2301      	movs	r3, #1
 80052b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052b2:	4b3a      	ldr	r3, [pc, #232]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a39      	ldr	r2, [pc, #228]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052be:	f7fc fc83 	bl	8001bc8 <HAL_GetTick>
 80052c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052c4:	e009      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c6:	f7fc fc7f 	bl	8001bc8 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d902      	bls.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	74fb      	strb	r3, [r7, #19]
        break;
 80052d8:	e005      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052da:	4b30      	ldr	r3, [pc, #192]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0ef      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80052e6:	7cfb      	ldrb	r3, [r7, #19]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d159      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052ec:	4b2a      	ldr	r3, [pc, #168]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01e      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	429a      	cmp	r2, r3
 8005306:	d019      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005308:	4b23      	ldr	r3, [pc, #140]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005312:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005314:	4b20      	ldr	r3, [pc, #128]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531a:	4a1f      	ldr	r2, [pc, #124]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005324:	4b1c      	ldr	r3, [pc, #112]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532a:	4a1b      	ldr	r2, [pc, #108]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800532c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d016      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005346:	f7fc fc3f 	bl	8001bc8 <HAL_GetTick>
 800534a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800534c:	e00b      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534e:	f7fc fc3b 	bl	8001bc8 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f241 3288 	movw	r2, #5000	; 0x1388
 800535c:	4293      	cmp	r3, r2
 800535e:	d902      	bls.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	74fb      	strb	r3, [r7, #19]
            break;
 8005364:	e006      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005366:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0ec      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10b      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800537a:	4b07      	ldr	r3, [pc, #28]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800537c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005380:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	4903      	ldr	r1, [pc, #12]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005390:	e008      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005392:	7cfb      	ldrb	r3, [r7, #19]
 8005394:	74bb      	strb	r3, [r7, #18]
 8005396:	e005      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005398:	40021000 	.word	0x40021000
 800539c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a0:	7cfb      	ldrb	r3, [r7, #19]
 80053a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053a4:	7c7b      	ldrb	r3, [r7, #17]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d105      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053aa:	4ba6      	ldr	r3, [pc, #664]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ae:	4aa5      	ldr	r2, [pc, #660]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053c2:	4ba0      	ldr	r3, [pc, #640]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f023 0203 	bic.w	r2, r3, #3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	499c      	ldr	r1, [pc, #624]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053e4:	4b97      	ldr	r3, [pc, #604]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f023 020c 	bic.w	r2, r3, #12
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	4994      	ldr	r1, [pc, #592]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005406:	4b8f      	ldr	r3, [pc, #572]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	498b      	ldr	r1, [pc, #556]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005416:	4313      	orrs	r3, r2
 8005418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005428:	4b86      	ldr	r3, [pc, #536]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	4983      	ldr	r1, [pc, #524]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800544a:	4b7e      	ldr	r3, [pc, #504]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	497a      	ldr	r1, [pc, #488]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800546c:	4b75      	ldr	r3, [pc, #468]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	4972      	ldr	r1, [pc, #456]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800548e:	4b6d      	ldr	r3, [pc, #436]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	4969      	ldr	r1, [pc, #420]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054b0:	4b64      	ldr	r3, [pc, #400]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	4961      	ldr	r1, [pc, #388]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054d2:	4b5c      	ldr	r3, [pc, #368]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	4958      	ldr	r1, [pc, #352]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d015      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054f4:	4b53      	ldr	r3, [pc, #332]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	4950      	ldr	r1, [pc, #320]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005512:	d105      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005514:	4b4b      	ldr	r3, [pc, #300]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a4a      	ldr	r2, [pc, #296]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800551e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800552c:	4b45      	ldr	r3, [pc, #276]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	4942      	ldr	r1, [pc, #264]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800554a:	d105      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554c:	4b3d      	ldr	r3, [pc, #244]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a3c      	ldr	r2, [pc, #240]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005556:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d015      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005564:	4b37      	ldr	r3, [pc, #220]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	4934      	ldr	r1, [pc, #208]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005582:	d105      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005584:	4b2f      	ldr	r3, [pc, #188]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4a2e      	ldr	r2, [pc, #184]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800558e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800559c:	4b29      	ldr	r3, [pc, #164]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	4926      	ldr	r1, [pc, #152]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ba:	d105      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055bc:	4b21      	ldr	r3, [pc, #132]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	4a20      	ldr	r2, [pc, #128]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d015      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055d4:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	4918      	ldr	r1, [pc, #96]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055f2:	d105      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055f4:	4b13      	ldr	r3, [pc, #76]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4a12      	ldr	r2, [pc, #72]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d015      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800560c:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	490a      	ldr	r1, [pc, #40]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800562a:	d105      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800562c:	4b05      	ldr	r3, [pc, #20]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4a04      	ldr	r2, [pc, #16]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005636:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005638:	7cbb      	ldrb	r3, [r7, #18]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40021000 	.word	0x40021000

08005648 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e09d      	b.n	8005796 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d108      	bne.n	8005674 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800566a:	d009      	beq.n	8005680 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	61da      	str	r2, [r3, #28]
 8005672:	e005      	b.n	8005680 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fc f86e 	bl	800177c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056c0:	d902      	bls.n	80056c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	e002      	b.n	80056ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80056d6:	d007      	beq.n	80056e8 <HAL_SPI_Init+0xa0>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056e0:	d002      	beq.n	80056e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572a:	ea42 0103 	orr.w	r1, r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	f003 0204 	and.w	r2, r3, #4
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	431a      	orrs	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005764:	ea42 0103 	orr.w	r1, r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69da      	ldr	r2, [r3, #28]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005784:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b088      	sub	sp, #32
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	4613      	mov	r3, r2
 80057ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_SPI_Transmit+0x22>
 80057bc:	2302      	movs	r3, #2
 80057be:	e158      	b.n	8005a72 <HAL_SPI_Transmit+0x2d4>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057c8:	f7fc f9fe 	bl	8001bc8 <HAL_GetTick>
 80057cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d002      	beq.n	80057e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057de:	2302      	movs	r3, #2
 80057e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057e2:	e13d      	b.n	8005a60 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_SPI_Transmit+0x52>
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057f4:	e134      	b.n	8005a60 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2203      	movs	r2, #3
 80057fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	88fa      	ldrh	r2, [r7, #6]
 800580e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005840:	d10f      	bne.n	8005862 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005850:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005860:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d007      	beq.n	8005880 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800587e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005888:	d94b      	bls.n	8005922 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_SPI_Transmit+0xfa>
 8005892:	8afb      	ldrh	r3, [r7, #22]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d13e      	bne.n	8005916 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	881a      	ldrh	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	1c9a      	adds	r2, r3, #2
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058bc:	e02b      	b.n	8005916 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d112      	bne.n	80058f2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	881a      	ldrh	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	1c9a      	adds	r2, r3, #2
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058f0:	e011      	b.n	8005916 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058f2:	f7fc f969 	bl	8001bc8 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d803      	bhi.n	800590a <HAL_SPI_Transmit+0x16c>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d102      	bne.n	8005910 <HAL_SPI_Transmit+0x172>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d102      	bne.n	8005916 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005914:	e0a4      	b.n	8005a60 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1ce      	bne.n	80058be <HAL_SPI_Transmit+0x120>
 8005920:	e07c      	b.n	8005a1c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_SPI_Transmit+0x192>
 800592a:	8afb      	ldrh	r3, [r7, #22]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d170      	bne.n	8005a12 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b01      	cmp	r3, #1
 8005938:	d912      	bls.n	8005960 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	881a      	ldrh	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	1c9a      	adds	r2, r3, #2
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b02      	subs	r3, #2
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800595e:	e058      	b.n	8005a12 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	330c      	adds	r3, #12
 800596a:	7812      	ldrb	r2, [r2, #0]
 800596c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005986:	e044      	b.n	8005a12 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b02      	cmp	r3, #2
 8005994:	d12b      	bne.n	80059ee <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	d912      	bls.n	80059c6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	881a      	ldrh	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	1c9a      	adds	r2, r3, #2
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b02      	subs	r3, #2
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059c4:	e025      	b.n	8005a12 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	330c      	adds	r3, #12
 80059d0:	7812      	ldrb	r2, [r2, #0]
 80059d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059ec:	e011      	b.n	8005a12 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ee:	f7fc f8eb 	bl	8001bc8 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d803      	bhi.n	8005a06 <HAL_SPI_Transmit+0x268>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a04:	d102      	bne.n	8005a0c <HAL_SPI_Transmit+0x26e>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d102      	bne.n	8005a12 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a10:	e026      	b.n	8005a60 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1b5      	bne.n	8005988 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	6839      	ldr	r1, [r7, #0]
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f945 	bl	8005cb0 <SPI_EndRxTxTransaction>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	77fb      	strb	r3, [r7, #31]
 8005a5c:	e000      	b.n	8005a60 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005a5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3720      	adds	r7, #32
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
	...

08005a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a8c:	f7fc f89c 	bl	8001bc8 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	4413      	add	r3, r2
 8005a9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a9c:	f7fc f894 	bl	8001bc8 <HAL_GetTick>
 8005aa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aa2:	4b39      	ldr	r3, [pc, #228]	; (8005b88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	015b      	lsls	r3, r3, #5
 8005aa8:	0d1b      	lsrs	r3, r3, #20
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	fb02 f303 	mul.w	r3, r2, r3
 8005ab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ab2:	e054      	b.n	8005b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d050      	beq.n	8005b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005abc:	f7fc f884 	bl	8001bc8 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d902      	bls.n	8005ad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d13d      	bne.n	8005b4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aea:	d111      	bne.n	8005b10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af4:	d004      	beq.n	8005b00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005afe:	d107      	bne.n	8005b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b18:	d10f      	bne.n	8005b3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e017      	b.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4013      	ands	r3, r2
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d19b      	bne.n	8005ab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000000 	.word	0x20000000

08005b8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b9a:	f7fc f815 	bl	8001bc8 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	1a9b      	subs	r3, r3, r2
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005baa:	f7fc f80d 	bl	8001bc8 <HAL_GetTick>
 8005bae:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005bb0:	4b3e      	ldr	r3, [pc, #248]	; (8005cac <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	00da      	lsls	r2, r3, #3
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	0d1b      	lsrs	r3, r3, #20
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005bc8:	e062      	b.n	8005c90 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bd0:	d109      	bne.n	8005be6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005be4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d050      	beq.n	8005c90 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bee:	f7fb ffeb 	bl	8001bc8 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d902      	bls.n	8005c04 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d13d      	bne.n	8005c80 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c1c:	d111      	bne.n	8005c42 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c26:	d004      	beq.n	8005c32 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c30:	d107      	bne.n	8005c42 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c4a:	d10f      	bne.n	8005c6c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e010      	b.n	8005ca2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d194      	bne.n	8005bca <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000000 	.word	0x20000000

08005cb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff ff5f 	bl	8005b8c <SPI_WaitFifoStateUntilTimeout>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd8:	f043 0220 	orr.w	r2, r3, #32
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e027      	b.n	8005d34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	2180      	movs	r1, #128	; 0x80
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff fec4 	bl	8005a7c <SPI_WaitFlagStateUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d007      	beq.n	8005d0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfe:	f043 0220 	orr.w	r2, r3, #32
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e014      	b.n	8005d34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff ff38 	bl	8005b8c <SPI_WaitFifoStateUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d26:	f043 0220 	orr.w	r2, r3, #32
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e000      	b.n	8005d34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e049      	b.n	8005de2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f841 	bl	8005dea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f000 fa52 	bl	8006224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d001      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e04a      	b.n	8005eae <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <HAL_TIM_Base_Start_IT+0xbc>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d018      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x6c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e42:	d013      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x6c>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00e      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x6c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1c      	ldr	r2, [pc, #112]	; (8005ec4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d009      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x6c>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1a      	ldr	r2, [pc, #104]	; (8005ec8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <HAL_TIM_Base_Start_IT+0x6c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a19      	ldr	r2, [pc, #100]	; (8005ecc <HAL_TIM_Base_Start_IT+0xcc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d115      	bne.n	8005e98 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	4b17      	ldr	r3, [pc, #92]	; (8005ed0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b06      	cmp	r3, #6
 8005e7c:	d015      	beq.n	8005eaa <HAL_TIM_Base_Start_IT+0xaa>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e84:	d011      	beq.n	8005eaa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e96:	e008      	b.n	8005eaa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	e000      	b.n	8005eac <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40012c00 	.word	0x40012c00
 8005ec0:	40000400 	.word	0x40000400
 8005ec4:	40000800 	.word	0x40000800
 8005ec8:	40013400 	.word	0x40013400
 8005ecc:	40014000 	.word	0x40014000
 8005ed0:	00010007 	.word	0x00010007

08005ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d122      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d11b      	bne.n	8005f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f06f 0202 	mvn.w	r2, #2
 8005f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f965 	bl	80061e6 <HAL_TIM_IC_CaptureCallback>
 8005f1c:	e005      	b.n	8005f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f957 	bl	80061d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f968 	bl	80061fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d122      	bne.n	8005f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d11b      	bne.n	8005f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0204 	mvn.w	r2, #4
 8005f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f93b 	bl	80061e6 <HAL_TIM_IC_CaptureCallback>
 8005f70:	e005      	b.n	8005f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f92d 	bl	80061d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f93e 	bl	80061fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d122      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d11b      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f06f 0208 	mvn.w	r2, #8
 8005fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2204      	movs	r2, #4
 8005fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f911 	bl	80061e6 <HAL_TIM_IC_CaptureCallback>
 8005fc4:	e005      	b.n	8005fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f903 	bl	80061d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f914 	bl	80061fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b10      	cmp	r3, #16
 8005fe4:	d122      	bne.n	800602c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b10      	cmp	r3, #16
 8005ff2:	d11b      	bne.n	800602c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0210 	mvn.w	r2, #16
 8005ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2208      	movs	r2, #8
 8006002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f8e7 	bl	80061e6 <HAL_TIM_IC_CaptureCallback>
 8006018:	e005      	b.n	8006026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8d9 	bl	80061d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f8ea 	bl	80061fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b01      	cmp	r3, #1
 8006038:	d10e      	bne.n	8006058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b01      	cmp	r3, #1
 8006046:	d107      	bne.n	8006058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0201 	mvn.w	r2, #1
 8006050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fb fa56 	bl	8001504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006062:	2b80      	cmp	r3, #128	; 0x80
 8006064:	d10e      	bne.n	8006084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006070:	2b80      	cmp	r3, #128	; 0x80
 8006072:	d107      	bne.n	8006084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800607c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f96a 	bl	8006358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006092:	d10e      	bne.n	80060b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609e:	2b80      	cmp	r3, #128	; 0x80
 80060a0:	d107      	bne.n	80060b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f95d 	bl	800636c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	d10e      	bne.n	80060de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d107      	bne.n	80060de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f898 	bl	800620e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d10e      	bne.n	800610a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d107      	bne.n	800610a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f06f 0220 	mvn.w	r2, #32
 8006102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f91d 	bl	8006344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006118:	d10f      	bne.n	800613a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006128:	d107      	bne.n	800613a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f923 	bl	8006380 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006144:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006148:	d10f      	bne.n	800616a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006158:	d107      	bne.n	800616a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f915 	bl	8006394 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006178:	d10f      	bne.n	800619a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006188:	d107      	bne.n	800619a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f907 	bl	80063a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061a8:	d10f      	bne.n	80061ca <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061b8:	d107      	bne.n	80061ca <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80061c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f8f9 	bl	80063bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a3c      	ldr	r2, [pc, #240]	; (8006328 <TIM_Base_SetConfig+0x104>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00f      	beq.n	800625c <TIM_Base_SetConfig+0x38>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006242:	d00b      	beq.n	800625c <TIM_Base_SetConfig+0x38>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a39      	ldr	r2, [pc, #228]	; (800632c <TIM_Base_SetConfig+0x108>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_Base_SetConfig+0x38>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a38      	ldr	r2, [pc, #224]	; (8006330 <TIM_Base_SetConfig+0x10c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_Base_SetConfig+0x38>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a37      	ldr	r2, [pc, #220]	; (8006334 <TIM_Base_SetConfig+0x110>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d108      	bne.n	800626e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2d      	ldr	r2, [pc, #180]	; (8006328 <TIM_Base_SetConfig+0x104>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d01b      	beq.n	80062ae <TIM_Base_SetConfig+0x8a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627c:	d017      	beq.n	80062ae <TIM_Base_SetConfig+0x8a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a2a      	ldr	r2, [pc, #168]	; (800632c <TIM_Base_SetConfig+0x108>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d013      	beq.n	80062ae <TIM_Base_SetConfig+0x8a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a29      	ldr	r2, [pc, #164]	; (8006330 <TIM_Base_SetConfig+0x10c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00f      	beq.n	80062ae <TIM_Base_SetConfig+0x8a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a28      	ldr	r2, [pc, #160]	; (8006334 <TIM_Base_SetConfig+0x110>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00b      	beq.n	80062ae <TIM_Base_SetConfig+0x8a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a27      	ldr	r2, [pc, #156]	; (8006338 <TIM_Base_SetConfig+0x114>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d007      	beq.n	80062ae <TIM_Base_SetConfig+0x8a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a26      	ldr	r2, [pc, #152]	; (800633c <TIM_Base_SetConfig+0x118>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d003      	beq.n	80062ae <TIM_Base_SetConfig+0x8a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a25      	ldr	r2, [pc, #148]	; (8006340 <TIM_Base_SetConfig+0x11c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d108      	bne.n	80062c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a10      	ldr	r2, [pc, #64]	; (8006328 <TIM_Base_SetConfig+0x104>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00f      	beq.n	800630c <TIM_Base_SetConfig+0xe8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a11      	ldr	r2, [pc, #68]	; (8006334 <TIM_Base_SetConfig+0x110>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00b      	beq.n	800630c <TIM_Base_SetConfig+0xe8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a10      	ldr	r2, [pc, #64]	; (8006338 <TIM_Base_SetConfig+0x114>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d007      	beq.n	800630c <TIM_Base_SetConfig+0xe8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a0f      	ldr	r2, [pc, #60]	; (800633c <TIM_Base_SetConfig+0x118>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d003      	beq.n	800630c <TIM_Base_SetConfig+0xe8>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a0e      	ldr	r2, [pc, #56]	; (8006340 <TIM_Base_SetConfig+0x11c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d103      	bne.n	8006314 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	615a      	str	r2, [r3, #20]
}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	40012c00 	.word	0x40012c00
 800632c:	40000400 	.word	0x40000400
 8006330:	40000800 	.word	0x40000800
 8006334:	40013400 	.word	0x40013400
 8006338:	40014000 	.word	0x40014000
 800633c:	40014400 	.word	0x40014400
 8006340:	40014800 	.word	0x40014800

08006344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e042      	b.n	8006468 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d106      	bne.n	80063fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7fb f949 	bl	800168c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2224      	movs	r2, #36	; 0x24
 80063fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0201 	bic.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fb0a 	bl	8006a2c <UART_SetConfig>
 8006418:	4603      	mov	r3, r0
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e022      	b.n	8006468 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fd9c 	bl	8006f68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800643e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800644e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fe23 	bl	80070ac <UART_CheckIdleState>
 8006466:	4603      	mov	r3, r0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006484:	2b20      	cmp	r3, #32
 8006486:	d168      	bne.n	800655a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_UART_Transmit_DMA+0x24>
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e061      	b.n	800655c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_UART_Transmit_DMA+0x36>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e05a      	b.n	800655c <HAL_UART_Transmit_DMA+0xec>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	88fa      	ldrh	r2, [r7, #6]
 80064b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	88fa      	ldrh	r2, [r7, #6]
 80064c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2221      	movs	r2, #33	; 0x21
 80064d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d02c      	beq.n	8006536 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064e0:	4a20      	ldr	r2, [pc, #128]	; (8006564 <HAL_UART_Transmit_DMA+0xf4>)
 80064e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064e8:	4a1f      	ldr	r2, [pc, #124]	; (8006568 <HAL_UART_Transmit_DMA+0xf8>)
 80064ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f0:	4a1e      	ldr	r2, [pc, #120]	; (800656c <HAL_UART_Transmit_DMA+0xfc>)
 80064f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f8:	2200      	movs	r2, #0
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006504:	4619      	mov	r1, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3328      	adds	r3, #40	; 0x28
 800650c:	461a      	mov	r2, r3
 800650e:	88fb      	ldrh	r3, [r7, #6]
 8006510:	f7fc ff62 	bl	80033d8 <HAL_DMA_Start_IT>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2210      	movs	r2, #16
 800651e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e012      	b.n	800655c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2240      	movs	r2, #64	; 0x40
 800653c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006554:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	080072e3 	.word	0x080072e3
 8006568:	08007337 	.word	0x08007337
 800656c:	08007353 	.word	0x08007353

08006570 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b088      	sub	sp, #32
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006590:	69fa      	ldr	r2, [r7, #28]
 8006592:	f640 030f 	movw	r3, #2063	; 0x80f
 8006596:	4013      	ands	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d118      	bne.n	80065d2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d013      	beq.n	80065d2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 81fb 	beq.w	80069be <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	4798      	blx	r3
      }
      return;
 80065d0:	e1f5      	b.n	80069be <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 80ef 	beq.w	80067b8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4b73      	ldr	r3, [pc, #460]	; (80067ac <HAL_UART_IRQHandler+0x23c>)
 80065de:	4013      	ands	r3, r2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	4b72      	ldr	r3, [pc, #456]	; (80067b0 <HAL_UART_IRQHandler+0x240>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 80e4 	beq.w	80067b8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d010      	beq.n	800661c <HAL_UART_IRQHandler+0xac>
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2201      	movs	r2, #1
 800660a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006612:	f043 0201 	orr.w	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d010      	beq.n	8006648 <HAL_UART_IRQHandler+0xd8>
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00b      	beq.n	8006648 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2202      	movs	r2, #2
 8006636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800663e:	f043 0204 	orr.w	r2, r3, #4
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	d010      	beq.n	8006674 <HAL_UART_IRQHandler+0x104>
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2204      	movs	r2, #4
 8006662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666a:	f043 0202 	orr.w	r2, r3, #2
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f003 0308 	and.w	r3, r3, #8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d015      	beq.n	80066aa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b00      	cmp	r3, #0
 8006686:	d104      	bne.n	8006692 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4b48      	ldr	r3, [pc, #288]	; (80067ac <HAL_UART_IRQHandler+0x23c>)
 800668c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00b      	beq.n	80066aa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2208      	movs	r2, #8
 8006698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a0:	f043 0208 	orr.w	r2, r3, #8
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d011      	beq.n	80066d8 <HAL_UART_IRQHandler+0x168>
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00c      	beq.n	80066d8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066ce:	f043 0220 	orr.w	r2, r3, #32
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 816f 	beq.w	80069c2 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d011      	beq.n	8006712 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006718:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b40      	cmp	r3, #64	; 0x40
 8006726:	d004      	beq.n	8006732 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800672e:	2b00      	cmp	r3, #0
 8006730:	d031      	beq.n	8006796 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fda3 	bl	800727e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d123      	bne.n	800678e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006754:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d013      	beq.n	8006786 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006762:	4a14      	ldr	r2, [pc, #80]	; (80067b4 <HAL_UART_IRQHandler+0x244>)
 8006764:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800676a:	4618      	mov	r0, r3
 800676c:	f7fc ff08 	bl	8003580 <HAL_DMA_Abort_IT>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d017      	beq.n	80067a6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006780:	4610      	mov	r0, r2
 8006782:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006784:	e00f      	b.n	80067a6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f93a 	bl	8006a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678c:	e00b      	b.n	80067a6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f936 	bl	8006a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006794:	e007      	b.n	80067a6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f932 	bl	8006a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80067a4:	e10d      	b.n	80069c2 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a6:	bf00      	nop
    return;
 80067a8:	e10b      	b.n	80069c2 <HAL_UART_IRQHandler+0x452>
 80067aa:	bf00      	nop
 80067ac:	10000001 	.word	0x10000001
 80067b0:	04000120 	.word	0x04000120
 80067b4:	080073d3 	.word	0x080073d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067bc:	2b01      	cmp	r3, #1
 80067be:	f040 80ab 	bne.w	8006918 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80a5 	beq.w	8006918 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	f003 0310 	and.w	r3, r3, #16
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 809f 	beq.w	8006918 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2210      	movs	r2, #16
 80067e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ec:	2b40      	cmp	r3, #64	; 0x40
 80067ee:	d155      	bne.n	800689c <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80067fa:	893b      	ldrh	r3, [r7, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80e2 	beq.w	80069c6 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006808:	893a      	ldrh	r2, [r7, #8]
 800680a:	429a      	cmp	r2, r3
 800680c:	f080 80db 	bcs.w	80069c6 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	893a      	ldrh	r2, [r7, #8]
 8006814:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d12b      	bne.n	8006880 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006836:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689a      	ldr	r2, [r3, #8]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0201 	bic.w	r2, r2, #1
 8006846:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006856:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 0210 	bic.w	r2, r2, #16
 8006874:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800687a:	4618      	mov	r0, r3
 800687c:	f7fc fe27 	bl	80034ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800688c:	b29b      	uxth	r3, r3
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	b29b      	uxth	r3, r3
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f8bd 	bl	8006a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800689a:	e094      	b.n	80069c6 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 8087 	beq.w	80069ca <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 80068bc:	897b      	ldrh	r3, [r7, #10]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8083 	beq.w	80069ca <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068d2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	6812      	ldr	r2, [r2, #0]
 80068de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068e2:	f023 0301 	bic.w	r3, r3, #1
 80068e6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0210 	bic.w	r2, r2, #16
 800690a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800690c:	897b      	ldrh	r3, [r7, #10]
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f87f 	bl	8006a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006916:	e058      	b.n	80069ca <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00d      	beq.n	800693e <HAL_UART_IRQHandler+0x3ce>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006934:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fd7b 	bl	8007432 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800693c:	e048      	b.n	80069d0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	2b00      	cmp	r3, #0
 8006946:	d012      	beq.n	800696e <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694e:	2b00      	cmp	r3, #0
 8006950:	d104      	bne.n	800695c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d008      	beq.n	800696e <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006960:	2b00      	cmp	r3, #0
 8006962:	d034      	beq.n	80069ce <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
    }
    return;
 800696c:	e02f      	b.n	80069ce <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006974:	2b00      	cmp	r3, #0
 8006976:	d008      	beq.n	800698a <HAL_UART_IRQHandler+0x41a>
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fd3b 	bl	80073fe <UART_EndTransmit_IT>
    return;
 8006988:	e022      	b.n	80069d0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d008      	beq.n	80069a6 <HAL_UART_IRQHandler+0x436>
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fd5b 	bl	800745a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069a4:	e014      	b.n	80069d0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00f      	beq.n	80069d0 <HAL_UART_IRQHandler+0x460>
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	da0c      	bge.n	80069d0 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fd45 	bl	8007446 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069bc:	e008      	b.n	80069d0 <HAL_UART_IRQHandler+0x460>
      return;
 80069be:	bf00      	nop
 80069c0:	e006      	b.n	80069d0 <HAL_UART_IRQHandler+0x460>
    return;
 80069c2:	bf00      	nop
 80069c4:	e004      	b.n	80069d0 <HAL_UART_IRQHandler+0x460>
      return;
 80069c6:	bf00      	nop
 80069c8:	e002      	b.n	80069d0 <HAL_UART_IRQHandler+0x460>
      return;
 80069ca:	bf00      	nop
 80069cc:	e000      	b.n	80069d0 <HAL_UART_IRQHandler+0x460>
    return;
 80069ce:	bf00      	nop
  }
}
 80069d0:	3720      	adds	r7, #32
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop

080069d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a2c:	b5b0      	push	{r4, r5, r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	4baf      	ldr	r3, [pc, #700]	; (8006d14 <UART_SetConfig+0x2e8>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	69f9      	ldr	r1, [r7, #28]
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4aa4      	ldr	r2, [pc, #656]	; (8006d18 <UART_SetConfig+0x2ec>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d004      	beq.n	8006a94 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006a9e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	69f9      	ldr	r1, [r7, #28]
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab2:	f023 010f 	bic.w	r1, r3, #15
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a95      	ldr	r2, [pc, #596]	; (8006d1c <UART_SetConfig+0x2f0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d120      	bne.n	8006b0e <UART_SetConfig+0xe2>
 8006acc:	4b94      	ldr	r3, [pc, #592]	; (8006d20 <UART_SetConfig+0x2f4>)
 8006ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad2:	f003 0303 	and.w	r3, r3, #3
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d816      	bhi.n	8006b08 <UART_SetConfig+0xdc>
 8006ada:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <UART_SetConfig+0xb4>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006af1 	.word	0x08006af1
 8006ae4:	08006afd 	.word	0x08006afd
 8006ae8:	08006af7 	.word	0x08006af7
 8006aec:	08006b03 	.word	0x08006b03
 8006af0:	2301      	movs	r3, #1
 8006af2:	76fb      	strb	r3, [r7, #27]
 8006af4:	e0bc      	b.n	8006c70 <UART_SetConfig+0x244>
 8006af6:	2302      	movs	r3, #2
 8006af8:	76fb      	strb	r3, [r7, #27]
 8006afa:	e0b9      	b.n	8006c70 <UART_SetConfig+0x244>
 8006afc:	2304      	movs	r3, #4
 8006afe:	76fb      	strb	r3, [r7, #27]
 8006b00:	e0b6      	b.n	8006c70 <UART_SetConfig+0x244>
 8006b02:	2308      	movs	r3, #8
 8006b04:	76fb      	strb	r3, [r7, #27]
 8006b06:	e0b3      	b.n	8006c70 <UART_SetConfig+0x244>
 8006b08:	2310      	movs	r3, #16
 8006b0a:	76fb      	strb	r3, [r7, #27]
 8006b0c:	e0b0      	b.n	8006c70 <UART_SetConfig+0x244>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a84      	ldr	r2, [pc, #528]	; (8006d24 <UART_SetConfig+0x2f8>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d132      	bne.n	8006b7e <UART_SetConfig+0x152>
 8006b18:	4b81      	ldr	r3, [pc, #516]	; (8006d20 <UART_SetConfig+0x2f4>)
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1e:	f003 030c 	and.w	r3, r3, #12
 8006b22:	2b0c      	cmp	r3, #12
 8006b24:	d828      	bhi.n	8006b78 <UART_SetConfig+0x14c>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <UART_SetConfig+0x100>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b61 	.word	0x08006b61
 8006b30:	08006b79 	.word	0x08006b79
 8006b34:	08006b79 	.word	0x08006b79
 8006b38:	08006b79 	.word	0x08006b79
 8006b3c:	08006b6d 	.word	0x08006b6d
 8006b40:	08006b79 	.word	0x08006b79
 8006b44:	08006b79 	.word	0x08006b79
 8006b48:	08006b79 	.word	0x08006b79
 8006b4c:	08006b67 	.word	0x08006b67
 8006b50:	08006b79 	.word	0x08006b79
 8006b54:	08006b79 	.word	0x08006b79
 8006b58:	08006b79 	.word	0x08006b79
 8006b5c:	08006b73 	.word	0x08006b73
 8006b60:	2300      	movs	r3, #0
 8006b62:	76fb      	strb	r3, [r7, #27]
 8006b64:	e084      	b.n	8006c70 <UART_SetConfig+0x244>
 8006b66:	2302      	movs	r3, #2
 8006b68:	76fb      	strb	r3, [r7, #27]
 8006b6a:	e081      	b.n	8006c70 <UART_SetConfig+0x244>
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	76fb      	strb	r3, [r7, #27]
 8006b70:	e07e      	b.n	8006c70 <UART_SetConfig+0x244>
 8006b72:	2308      	movs	r3, #8
 8006b74:	76fb      	strb	r3, [r7, #27]
 8006b76:	e07b      	b.n	8006c70 <UART_SetConfig+0x244>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	76fb      	strb	r3, [r7, #27]
 8006b7c:	e078      	b.n	8006c70 <UART_SetConfig+0x244>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a69      	ldr	r2, [pc, #420]	; (8006d28 <UART_SetConfig+0x2fc>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d120      	bne.n	8006bca <UART_SetConfig+0x19e>
 8006b88:	4b65      	ldr	r3, [pc, #404]	; (8006d20 <UART_SetConfig+0x2f4>)
 8006b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b92:	2b30      	cmp	r3, #48	; 0x30
 8006b94:	d013      	beq.n	8006bbe <UART_SetConfig+0x192>
 8006b96:	2b30      	cmp	r3, #48	; 0x30
 8006b98:	d814      	bhi.n	8006bc4 <UART_SetConfig+0x198>
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d009      	beq.n	8006bb2 <UART_SetConfig+0x186>
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d810      	bhi.n	8006bc4 <UART_SetConfig+0x198>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <UART_SetConfig+0x180>
 8006ba6:	2b10      	cmp	r3, #16
 8006ba8:	d006      	beq.n	8006bb8 <UART_SetConfig+0x18c>
 8006baa:	e00b      	b.n	8006bc4 <UART_SetConfig+0x198>
 8006bac:	2300      	movs	r3, #0
 8006bae:	76fb      	strb	r3, [r7, #27]
 8006bb0:	e05e      	b.n	8006c70 <UART_SetConfig+0x244>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	76fb      	strb	r3, [r7, #27]
 8006bb6:	e05b      	b.n	8006c70 <UART_SetConfig+0x244>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	76fb      	strb	r3, [r7, #27]
 8006bbc:	e058      	b.n	8006c70 <UART_SetConfig+0x244>
 8006bbe:	2308      	movs	r3, #8
 8006bc0:	76fb      	strb	r3, [r7, #27]
 8006bc2:	e055      	b.n	8006c70 <UART_SetConfig+0x244>
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	76fb      	strb	r3, [r7, #27]
 8006bc8:	e052      	b.n	8006c70 <UART_SetConfig+0x244>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a57      	ldr	r2, [pc, #348]	; (8006d2c <UART_SetConfig+0x300>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d120      	bne.n	8006c16 <UART_SetConfig+0x1ea>
 8006bd4:	4b52      	ldr	r3, [pc, #328]	; (8006d20 <UART_SetConfig+0x2f4>)
 8006bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006bde:	2bc0      	cmp	r3, #192	; 0xc0
 8006be0:	d013      	beq.n	8006c0a <UART_SetConfig+0x1de>
 8006be2:	2bc0      	cmp	r3, #192	; 0xc0
 8006be4:	d814      	bhi.n	8006c10 <UART_SetConfig+0x1e4>
 8006be6:	2b80      	cmp	r3, #128	; 0x80
 8006be8:	d009      	beq.n	8006bfe <UART_SetConfig+0x1d2>
 8006bea:	2b80      	cmp	r3, #128	; 0x80
 8006bec:	d810      	bhi.n	8006c10 <UART_SetConfig+0x1e4>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <UART_SetConfig+0x1cc>
 8006bf2:	2b40      	cmp	r3, #64	; 0x40
 8006bf4:	d006      	beq.n	8006c04 <UART_SetConfig+0x1d8>
 8006bf6:	e00b      	b.n	8006c10 <UART_SetConfig+0x1e4>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	76fb      	strb	r3, [r7, #27]
 8006bfc:	e038      	b.n	8006c70 <UART_SetConfig+0x244>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	76fb      	strb	r3, [r7, #27]
 8006c02:	e035      	b.n	8006c70 <UART_SetConfig+0x244>
 8006c04:	2304      	movs	r3, #4
 8006c06:	76fb      	strb	r3, [r7, #27]
 8006c08:	e032      	b.n	8006c70 <UART_SetConfig+0x244>
 8006c0a:	2308      	movs	r3, #8
 8006c0c:	76fb      	strb	r3, [r7, #27]
 8006c0e:	e02f      	b.n	8006c70 <UART_SetConfig+0x244>
 8006c10:	2310      	movs	r3, #16
 8006c12:	76fb      	strb	r3, [r7, #27]
 8006c14:	e02c      	b.n	8006c70 <UART_SetConfig+0x244>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a3f      	ldr	r2, [pc, #252]	; (8006d18 <UART_SetConfig+0x2ec>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d125      	bne.n	8006c6c <UART_SetConfig+0x240>
 8006c20:	4b3f      	ldr	r3, [pc, #252]	; (8006d20 <UART_SetConfig+0x2f4>)
 8006c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c26:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c2e:	d017      	beq.n	8006c60 <UART_SetConfig+0x234>
 8006c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c34:	d817      	bhi.n	8006c66 <UART_SetConfig+0x23a>
 8006c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c3a:	d00b      	beq.n	8006c54 <UART_SetConfig+0x228>
 8006c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c40:	d811      	bhi.n	8006c66 <UART_SetConfig+0x23a>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <UART_SetConfig+0x222>
 8006c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c4a:	d006      	beq.n	8006c5a <UART_SetConfig+0x22e>
 8006c4c:	e00b      	b.n	8006c66 <UART_SetConfig+0x23a>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	76fb      	strb	r3, [r7, #27]
 8006c52:	e00d      	b.n	8006c70 <UART_SetConfig+0x244>
 8006c54:	2302      	movs	r3, #2
 8006c56:	76fb      	strb	r3, [r7, #27]
 8006c58:	e00a      	b.n	8006c70 <UART_SetConfig+0x244>
 8006c5a:	2304      	movs	r3, #4
 8006c5c:	76fb      	strb	r3, [r7, #27]
 8006c5e:	e007      	b.n	8006c70 <UART_SetConfig+0x244>
 8006c60:	2308      	movs	r3, #8
 8006c62:	76fb      	strb	r3, [r7, #27]
 8006c64:	e004      	b.n	8006c70 <UART_SetConfig+0x244>
 8006c66:	2310      	movs	r3, #16
 8006c68:	76fb      	strb	r3, [r7, #27]
 8006c6a:	e001      	b.n	8006c70 <UART_SetConfig+0x244>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a28      	ldr	r2, [pc, #160]	; (8006d18 <UART_SetConfig+0x2ec>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	f040 809e 	bne.w	8006db8 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c7c:	7efb      	ldrb	r3, [r7, #27]
 8006c7e:	2b08      	cmp	r3, #8
 8006c80:	d823      	bhi.n	8006cca <UART_SetConfig+0x29e>
 8006c82:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <UART_SetConfig+0x25c>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006ccb 	.word	0x08006ccb
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006ccb 	.word	0x08006ccb
 8006c98:	08006cbb 	.word	0x08006cbb
 8006c9c:	08006ccb 	.word	0x08006ccb
 8006ca0:	08006ccb 	.word	0x08006ccb
 8006ca4:	08006ccb 	.word	0x08006ccb
 8006ca8:	08006cc3 	.word	0x08006cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cac:	f7fe fa38 	bl	8005120 <HAL_RCC_GetPCLK1Freq>
 8006cb0:	6178      	str	r0, [r7, #20]
        break;
 8006cb2:	e00f      	b.n	8006cd4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb4:	4b1e      	ldr	r3, [pc, #120]	; (8006d30 <UART_SetConfig+0x304>)
 8006cb6:	617b      	str	r3, [r7, #20]
        break;
 8006cb8:	e00c      	b.n	8006cd4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cba:	f7fe f9c3 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8006cbe:	6178      	str	r0, [r7, #20]
        break;
 8006cc0:	e008      	b.n	8006cd4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc6:	617b      	str	r3, [r7, #20]
        break;
 8006cc8:	e004      	b.n	8006cd4 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	76bb      	strb	r3, [r7, #26]
        break;
 8006cd2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 812e 	beq.w	8006f38 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	4a14      	ldr	r2, [pc, #80]	; (8006d34 <UART_SetConfig+0x308>)
 8006ce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cee:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	4413      	add	r3, r2
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d305      	bcc.n	8006d0c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d915      	bls.n	8006d38 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	76bb      	strb	r3, [r7, #26]
 8006d10:	e112      	b.n	8006f38 <UART_SetConfig+0x50c>
 8006d12:	bf00      	nop
 8006d14:	cfff69f3 	.word	0xcfff69f3
 8006d18:	40008000 	.word	0x40008000
 8006d1c:	40013800 	.word	0x40013800
 8006d20:	40021000 	.word	0x40021000
 8006d24:	40004400 	.word	0x40004400
 8006d28:	40004800 	.word	0x40004800
 8006d2c:	40004c00 	.word	0x40004c00
 8006d30:	00f42400 	.word	0x00f42400
 8006d34:	0800ff64 	.word	0x0800ff64
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f04f 0100 	mov.w	r1, #0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	4a86      	ldr	r2, [pc, #536]	; (8006f60 <UART_SetConfig+0x534>)
 8006d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	f7f9 ffc2 	bl	8000cd8 <__aeabi_uldivmod>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	f04f 0200 	mov.w	r2, #0
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	020b      	lsls	r3, r1, #8
 8006d66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d6a:	0202      	lsls	r2, r0, #8
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	6849      	ldr	r1, [r1, #4]
 8006d70:	0849      	lsrs	r1, r1, #1
 8006d72:	4608      	mov	r0, r1
 8006d74:	f04f 0100 	mov.w	r1, #0
 8006d78:	1814      	adds	r4, r2, r0
 8006d7a:	eb43 0501 	adc.w	r5, r3, r1
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	461a      	mov	r2, r3
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	4620      	mov	r0, r4
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	f7f9 ffa4 	bl	8000cd8 <__aeabi_uldivmod>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4613      	mov	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d9e:	d308      	bcc.n	8006db2 <UART_SetConfig+0x386>
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da6:	d204      	bcs.n	8006db2 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	60da      	str	r2, [r3, #12]
 8006db0:	e0c2      	b.n	8006f38 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	76bb      	strb	r3, [r7, #26]
 8006db6:	e0bf      	b.n	8006f38 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc0:	d165      	bne.n	8006e8e <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8006dc2:	7efb      	ldrb	r3, [r7, #27]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d828      	bhi.n	8006e1a <UART_SetConfig+0x3ee>
 8006dc8:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <UART_SetConfig+0x3a4>)
 8006dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dce:	bf00      	nop
 8006dd0:	08006df5 	.word	0x08006df5
 8006dd4:	08006dfd 	.word	0x08006dfd
 8006dd8:	08006e05 	.word	0x08006e05
 8006ddc:	08006e1b 	.word	0x08006e1b
 8006de0:	08006e0b 	.word	0x08006e0b
 8006de4:	08006e1b 	.word	0x08006e1b
 8006de8:	08006e1b 	.word	0x08006e1b
 8006dec:	08006e1b 	.word	0x08006e1b
 8006df0:	08006e13 	.word	0x08006e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006df4:	f7fe f994 	bl	8005120 <HAL_RCC_GetPCLK1Freq>
 8006df8:	6178      	str	r0, [r7, #20]
        break;
 8006dfa:	e013      	b.n	8006e24 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dfc:	f7fe f9a6 	bl	800514c <HAL_RCC_GetPCLK2Freq>
 8006e00:	6178      	str	r0, [r7, #20]
        break;
 8006e02:	e00f      	b.n	8006e24 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e04:	4b57      	ldr	r3, [pc, #348]	; (8006f64 <UART_SetConfig+0x538>)
 8006e06:	617b      	str	r3, [r7, #20]
        break;
 8006e08:	e00c      	b.n	8006e24 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e0a:	f7fe f91b 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8006e0e:	6178      	str	r0, [r7, #20]
        break;
 8006e10:	e008      	b.n	8006e24 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e16:	617b      	str	r3, [r7, #20]
        break;
 8006e18:	e004      	b.n	8006e24 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	76bb      	strb	r3, [r7, #26]
        break;
 8006e22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 8086 	beq.w	8006f38 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	4a4b      	ldr	r2, [pc, #300]	; (8006f60 <UART_SetConfig+0x534>)
 8006e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e36:	461a      	mov	r2, r3
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e3e:	005a      	lsls	r2, r3, #1
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	085b      	lsrs	r3, r3, #1
 8006e46:	441a      	add	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b0f      	cmp	r3, #15
 8006e58:	d916      	bls.n	8006e88 <UART_SetConfig+0x45c>
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e60:	d212      	bcs.n	8006e88 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f023 030f 	bic.w	r3, r3, #15
 8006e6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	085b      	lsrs	r3, r3, #1
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	89fb      	ldrh	r3, [r7, #14]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	89fa      	ldrh	r2, [r7, #14]
 8006e84:	60da      	str	r2, [r3, #12]
 8006e86:	e057      	b.n	8006f38 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	76bb      	strb	r3, [r7, #26]
 8006e8c:	e054      	b.n	8006f38 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e8e:	7efb      	ldrb	r3, [r7, #27]
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	d828      	bhi.n	8006ee6 <UART_SetConfig+0x4ba>
 8006e94:	a201      	add	r2, pc, #4	; (adr r2, 8006e9c <UART_SetConfig+0x470>)
 8006e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9a:	bf00      	nop
 8006e9c:	08006ec1 	.word	0x08006ec1
 8006ea0:	08006ec9 	.word	0x08006ec9
 8006ea4:	08006ed1 	.word	0x08006ed1
 8006ea8:	08006ee7 	.word	0x08006ee7
 8006eac:	08006ed7 	.word	0x08006ed7
 8006eb0:	08006ee7 	.word	0x08006ee7
 8006eb4:	08006ee7 	.word	0x08006ee7
 8006eb8:	08006ee7 	.word	0x08006ee7
 8006ebc:	08006edf 	.word	0x08006edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ec0:	f7fe f92e 	bl	8005120 <HAL_RCC_GetPCLK1Freq>
 8006ec4:	6178      	str	r0, [r7, #20]
        break;
 8006ec6:	e013      	b.n	8006ef0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ec8:	f7fe f940 	bl	800514c <HAL_RCC_GetPCLK2Freq>
 8006ecc:	6178      	str	r0, [r7, #20]
        break;
 8006ece:	e00f      	b.n	8006ef0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ed0:	4b24      	ldr	r3, [pc, #144]	; (8006f64 <UART_SetConfig+0x538>)
 8006ed2:	617b      	str	r3, [r7, #20]
        break;
 8006ed4:	e00c      	b.n	8006ef0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ed6:	f7fe f8b5 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8006eda:	6178      	str	r0, [r7, #20]
        break;
 8006edc:	e008      	b.n	8006ef0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ee2:	617b      	str	r3, [r7, #20]
        break;
 8006ee4:	e004      	b.n	8006ef0 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	76bb      	strb	r3, [r7, #26]
        break;
 8006eee:	bf00      	nop
    }

    if (pclk != 0U)
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d020      	beq.n	8006f38 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	4a19      	ldr	r2, [pc, #100]	; (8006f60 <UART_SetConfig+0x534>)
 8006efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f00:	461a      	mov	r2, r3
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	085b      	lsrs	r3, r3, #1
 8006f0e:	441a      	add	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	2b0f      	cmp	r3, #15
 8006f20:	d908      	bls.n	8006f34 <UART_SetConfig+0x508>
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f28:	d204      	bcs.n	8006f34 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	60da      	str	r2, [r3, #12]
 8006f32:	e001      	b.n	8006f38 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006f54:	7ebb      	ldrb	r3, [r7, #26]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3720      	adds	r7, #32
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	0800ff64 	.word	0x0800ff64
 8006f64:	00f42400 	.word	0x00f42400

08006f68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00a      	beq.n	8006f92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00a      	beq.n	8006fd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	f003 0310 	and.w	r3, r3, #16
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01a      	beq.n	800707e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007066:	d10a      	bne.n	800707e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	605a      	str	r2, [r3, #4]
  }
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070bc:	f7fa fd84 	bl	8001bc8 <HAL_GetTick>
 80070c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d10e      	bne.n	80070ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f82f 	bl	8007142 <UART_WaitOnFlagUntilTimeout>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e025      	b.n	800713a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d10e      	bne.n	800711a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f819 	bl	8007142 <UART_WaitOnFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e00f      	b.n	800713a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	603b      	str	r3, [r7, #0]
 800714e:	4613      	mov	r3, r2
 8007150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007152:	e062      	b.n	800721a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715a:	d05e      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800715c:	f7fa fd34 	bl	8001bc8 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	429a      	cmp	r2, r3
 800716a:	d302      	bcc.n	8007172 <UART_WaitOnFlagUntilTimeout+0x30>
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d11d      	bne.n	80071ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007180:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2220      	movs	r2, #32
 8007196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2220      	movs	r2, #32
 800719e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e045      	b.n	800723a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d02e      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ca:	d126      	bne.n	800721a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0201 	bic.w	r2, r2, #1
 80071f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e00f      	b.n	800723a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69da      	ldr	r2, [r3, #28]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4013      	ands	r3, r2
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	429a      	cmp	r2, r3
 8007228:	bf0c      	ite	eq
 800722a:	2301      	moveq	r3, #1
 800722c:	2300      	movne	r3, #0
 800722e:	b2db      	uxtb	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	429a      	cmp	r2, r3
 8007236:	d08d      	beq.n	8007154 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007258:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007268:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007294:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072a4:	f023 0301 	bic.w	r3, r3, #1
 80072a8:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d107      	bne.n	80072c2 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0210 	bic.w	r2, r2, #16
 80072c0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d114      	bne.n	8007328 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007314:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007324:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007326:	e002      	b.n	800732e <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff fb55 	bl	80069d8 <HAL_UART_TxCpltCallback>
}
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007342:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f7ff fb51 	bl	80069ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800734a:	bf00      	nop
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b086      	sub	sp, #24
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007366:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737a:	2b80      	cmp	r3, #128	; 0x80
 800737c:	d109      	bne.n	8007392 <UART_DMAError+0x40>
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b21      	cmp	r3, #33	; 0x21
 8007382:	d106      	bne.n	8007392 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2200      	movs	r2, #0
 8007388:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800738c:	6978      	ldr	r0, [r7, #20]
 800738e:	f7ff ff58 	bl	8007242 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d109      	bne.n	80073b4 <UART_DMAError+0x62>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b22      	cmp	r3, #34	; 0x22
 80073a4:	d106      	bne.n	80073b4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80073ae:	6978      	ldr	r0, [r7, #20]
 80073b0:	f7ff ff65 	bl	800727e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ba:	f043 0210 	orr.w	r2, r3, #16
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073c4:	6978      	ldr	r0, [r7, #20]
 80073c6:	f7ff fb1b 	bl	8006a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ca:	bf00      	nop
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f7ff fb05 	bl	8006a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007414:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fad7 	bl	80069d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_UARTEx_DisableFifoMode+0x16>
 8007480:	2302      	movs	r3, #2
 8007482:	e027      	b.n	80074d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2224      	movs	r2, #36	; 0x24
 8007490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0201 	bic.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e02d      	b.n	8007554 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2224      	movs	r2, #36	; 0x24
 8007504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0201 	bic.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f84f 	bl	80075d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007570:	2302      	movs	r3, #2
 8007572:	e02d      	b.n	80075d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2224      	movs	r2, #36	; 0x24
 8007580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0201 	bic.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f811 	bl	80075d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d108      	bne.n	80075fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075f8:	e031      	b.n	800765e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075fa:	2308      	movs	r3, #8
 80075fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075fe:	2308      	movs	r3, #8
 8007600:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	0e5b      	lsrs	r3, r3, #25
 800760a:	b2db      	uxtb	r3, r3
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	0f5b      	lsrs	r3, r3, #29
 800761a:	b2db      	uxtb	r3, r3
 800761c:	f003 0307 	and.w	r3, r3, #7
 8007620:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	7b3a      	ldrb	r2, [r7, #12]
 8007626:	4911      	ldr	r1, [pc, #68]	; (800766c <UARTEx_SetNbDataToProcess+0x94>)
 8007628:	5c8a      	ldrb	r2, [r1, r2]
 800762a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800762e:	7b3a      	ldrb	r2, [r7, #12]
 8007630:	490f      	ldr	r1, [pc, #60]	; (8007670 <UARTEx_SetNbDataToProcess+0x98>)
 8007632:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007634:	fb93 f3f2 	sdiv	r3, r3, r2
 8007638:	b29a      	uxth	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	7b7a      	ldrb	r2, [r7, #13]
 8007644:	4909      	ldr	r1, [pc, #36]	; (800766c <UARTEx_SetNbDataToProcess+0x94>)
 8007646:	5c8a      	ldrb	r2, [r1, r2]
 8007648:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800764c:	7b7a      	ldrb	r2, [r7, #13]
 800764e:	4908      	ldr	r1, [pc, #32]	; (8007670 <UARTEx_SetNbDataToProcess+0x98>)
 8007650:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007652:	fb93 f3f2 	sdiv	r3, r3, r2
 8007656:	b29a      	uxth	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800765e:	bf00      	nop
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	0800ff7c 	.word	0x0800ff7c
 8007670:	0800ff84 	.word	0x0800ff84

08007674 <__NVIC_SetPriority>:
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	6039      	str	r1, [r7, #0]
 800767e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007684:	2b00      	cmp	r3, #0
 8007686:	db0a      	blt.n	800769e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	b2da      	uxtb	r2, r3
 800768c:	490c      	ldr	r1, [pc, #48]	; (80076c0 <__NVIC_SetPriority+0x4c>)
 800768e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007692:	0112      	lsls	r2, r2, #4
 8007694:	b2d2      	uxtb	r2, r2
 8007696:	440b      	add	r3, r1
 8007698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800769c:	e00a      	b.n	80076b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	4908      	ldr	r1, [pc, #32]	; (80076c4 <__NVIC_SetPriority+0x50>)
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	f003 030f 	and.w	r3, r3, #15
 80076aa:	3b04      	subs	r3, #4
 80076ac:	0112      	lsls	r2, r2, #4
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	440b      	add	r3, r1
 80076b2:	761a      	strb	r2, [r3, #24]
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	e000e100 	.word	0xe000e100
 80076c4:	e000ed00 	.word	0xe000ed00

080076c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80076cc:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <SysTick_Handler+0x1c>)
 80076ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80076d0:	f002 fa9e 	bl	8009c10 <xTaskGetSchedulerState>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d001      	beq.n	80076de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80076da:	f003 f985 	bl	800a9e8 <xPortSysTickHandler>
  }
}
 80076de:	bf00      	nop
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	e000e010 	.word	0xe000e010

080076e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80076ec:	2100      	movs	r1, #0
 80076ee:	f06f 0004 	mvn.w	r0, #4
 80076f2:	f7ff ffbf 	bl	8007674 <__NVIC_SetPriority>
#endif
}
 80076f6:	bf00      	nop
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007702:	f3ef 8305 	mrs	r3, IPSR
 8007706:	603b      	str	r3, [r7, #0]
  return(result);
 8007708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800770e:	f06f 0305 	mvn.w	r3, #5
 8007712:	607b      	str	r3, [r7, #4]
 8007714:	e00c      	b.n	8007730 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007716:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <osKernelInitialize+0x44>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d105      	bne.n	800772a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800771e:	4b08      	ldr	r3, [pc, #32]	; (8007740 <osKernelInitialize+0x44>)
 8007720:	2201      	movs	r2, #1
 8007722:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007724:	2300      	movs	r3, #0
 8007726:	607b      	str	r3, [r7, #4]
 8007728:	e002      	b.n	8007730 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800772a:	f04f 33ff 	mov.w	r3, #4294967295
 800772e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007730:	687b      	ldr	r3, [r7, #4]
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	20000228 	.word	0x20000228

08007744 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800774a:	f3ef 8305 	mrs	r3, IPSR
 800774e:	603b      	str	r3, [r7, #0]
  return(result);
 8007750:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007756:	f06f 0305 	mvn.w	r3, #5
 800775a:	607b      	str	r3, [r7, #4]
 800775c:	e010      	b.n	8007780 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800775e:	4b0b      	ldr	r3, [pc, #44]	; (800778c <osKernelStart+0x48>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d109      	bne.n	800777a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007766:	f7ff ffbf 	bl	80076e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800776a:	4b08      	ldr	r3, [pc, #32]	; (800778c <osKernelStart+0x48>)
 800776c:	2202      	movs	r2, #2
 800776e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007770:	f001 fdac 	bl	80092cc <vTaskStartScheduler>
      stat = osOK;
 8007774:	2300      	movs	r3, #0
 8007776:	607b      	str	r3, [r7, #4]
 8007778:	e002      	b.n	8007780 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800777a:	f04f 33ff 	mov.w	r3, #4294967295
 800777e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007780:	687b      	ldr	r3, [r7, #4]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20000228 	.word	0x20000228

08007790 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007796:	f3ef 8305 	mrs	r3, IPSR
 800779a:	603b      	str	r3, [r7, #0]
  return(result);
 800779c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80077a2:	f001 feb5 	bl	8009510 <xTaskGetTickCountFromISR>
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	e002      	b.n	80077b0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80077aa:	f001 fea1 	bl	80094f0 <xTaskGetTickCount>
 80077ae:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80077b0:	687b      	ldr	r3, [r7, #4]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b08e      	sub	sp, #56	; 0x38
 80077be:	af04      	add	r7, sp, #16
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ca:	f3ef 8305 	mrs	r3, IPSR
 80077ce:	617b      	str	r3, [r7, #20]
  return(result);
 80077d0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d17e      	bne.n	80078d4 <osThreadNew+0x11a>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d07b      	beq.n	80078d4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80077dc:	2380      	movs	r3, #128	; 0x80
 80077de:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80077e0:	2318      	movs	r3, #24
 80077e2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80077e8:	f04f 33ff 	mov.w	r3, #4294967295
 80077ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d045      	beq.n	8007880 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <osThreadNew+0x48>
        name = attr->name;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d008      	beq.n	8007828 <osThreadNew+0x6e>
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2b38      	cmp	r3, #56	; 0x38
 800781a:	d805      	bhi.n	8007828 <osThreadNew+0x6e>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <osThreadNew+0x72>
        return (NULL);
 8007828:	2300      	movs	r3, #0
 800782a:	e054      	b.n	80078d6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	089b      	lsrs	r3, r3, #2
 800783a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00e      	beq.n	8007862 <osThreadNew+0xa8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b6f      	cmp	r3, #111	; 0x6f
 800784a:	d90a      	bls.n	8007862 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <osThreadNew+0xa8>
        mem = 1;
 800785c:	2301      	movs	r3, #1
 800785e:	61bb      	str	r3, [r7, #24]
 8007860:	e010      	b.n	8007884 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10c      	bne.n	8007884 <osThreadNew+0xca>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d108      	bne.n	8007884 <osThreadNew+0xca>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d104      	bne.n	8007884 <osThreadNew+0xca>
          mem = 0;
 800787a:	2300      	movs	r3, #0
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	e001      	b.n	8007884 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007880:	2300      	movs	r3, #0
 8007882:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d110      	bne.n	80078ac <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007892:	9202      	str	r2, [sp, #8]
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6a3a      	ldr	r2, [r7, #32]
 800789e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f001 f9a3 	bl	8008bec <xTaskCreateStatic>
 80078a6:	4603      	mov	r3, r0
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	e013      	b.n	80078d4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d110      	bne.n	80078d4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	f107 0310 	add.w	r3, r7, #16
 80078ba:	9301      	str	r3, [sp, #4]
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f001 f9ee 	bl	8008ca6 <xTaskCreate>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d001      	beq.n	80078d4 <osThreadNew+0x11a>
            hTask = NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80078d4:	693b      	ldr	r3, [r7, #16]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3728      	adds	r7, #40	; 0x28
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80078e4:	f002 f984 	bl	8009bf0 <xTaskGetCurrentTaskHandle>
 80078e8:	6078      	str	r0, [r7, #4]

  return (id);
 80078ea:	687b      	ldr	r3, [r7, #4]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007900:	f3ef 8305 	mrs	r3, IPSR
 8007904:	60fb      	str	r3, [r7, #12]
  return(result);
 8007906:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8007908:	2b00      	cmp	r3, #0
 800790a:	d102      	bne.n	8007912 <osThreadGetStackSpace+0x1e>
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <osThreadGetStackSpace+0x24>
    sz = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	617b      	str	r3, [r7, #20]
 8007916:	e005      	b.n	8007924 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 8007918:	6938      	ldr	r0, [r7, #16]
 800791a:	f002 f8fd 	bl	8009b18 <uxTaskGetStackHighWaterMark>
 800791e:	4603      	mov	r3, r0
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 8007924:	697b      	ldr	r3, [r7, #20]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800793a:	f3ef 8305 	mrs	r3, IPSR
 800793e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007940:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <osThreadSuspend+0x20>
    stat = osErrorISR;
 8007946:	f06f 0305 	mvn.w	r3, #5
 800794a:	617b      	str	r3, [r7, #20]
 800794c:	e00b      	b.n	8007966 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d103      	bne.n	800795c <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8007954:	f06f 0303 	mvn.w	r3, #3
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	e004      	b.n	8007966 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8007960:	6938      	ldr	r0, [r7, #16]
 8007962:	f001 fb99 	bl	8009098 <vTaskSuspend>
  }

  return (stat);
 8007966:	697b      	ldr	r3, [r7, #20]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007978:	f3ef 8305 	mrs	r3, IPSR
 800797c:	60bb      	str	r3, [r7, #8]
  return(result);
 800797e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <osDelay+0x1c>
    stat = osErrorISR;
 8007984:	f06f 0305 	mvn.w	r3, #5
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	e007      	b.n	800799c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 fb4a 	bl	8009030 <vTaskDelay>
    }
  }

  return (stat);
 800799c:	68fb      	ldr	r3, [r7, #12]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b086      	sub	sp, #24
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079ae:	f3ef 8305 	mrs	r3, IPSR
 80079b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80079b4:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80079ba:	f06f 0305 	mvn.w	r3, #5
 80079be:	617b      	str	r3, [r7, #20]
 80079c0:	e019      	b.n	80079f6 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80079c6:	f001 fd93 	bl	80094f0 <xTaskGetTickCount>
 80079ca:	4603      	mov	r3, r0
 80079cc:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <osDelayUntil+0x4a>
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	db06      	blt.n	80079f0 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80079e2:	f107 0308 	add.w	r3, r7, #8
 80079e6:	6939      	ldr	r1, [r7, #16]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 faa3 	bl	8008f34 <vTaskDelayUntil>
 80079ee:	e002      	b.n	80079f6 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80079f0:	f06f 0303 	mvn.w	r3, #3
 80079f4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80079f6:	697b      	ldr	r3, [r7, #20]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a0c:	f3ef 8305 	mrs	r3, IPSR
 8007a10:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a12:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d174      	bne.n	8007b02 <osMutexNew+0x102>
    if (attr != NULL) {
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	61bb      	str	r3, [r7, #24]
 8007a24:	e001      	b.n	8007a2a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <osMutexNew+0x3a>
      rmtx = 1U;
 8007a34:	2301      	movs	r3, #1
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	e001      	b.n	8007a3e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d15c      	bne.n	8007b02 <osMutexNew+0x102>
      mem = -1;
 8007a48:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d015      	beq.n	8007a80 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d006      	beq.n	8007a6a <osMutexNew+0x6a>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	2b4f      	cmp	r3, #79	; 0x4f
 8007a62:	d902      	bls.n	8007a6a <osMutexNew+0x6a>
          mem = 1;
 8007a64:	2301      	movs	r3, #1
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	e00c      	b.n	8007a84 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d108      	bne.n	8007a84 <osMutexNew+0x84>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d104      	bne.n	8007a84 <osMutexNew+0x84>
            mem = 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	e001      	b.n	8007a84 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007a80:	2300      	movs	r3, #0
 8007a82:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d112      	bne.n	8007ab0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	4619      	mov	r1, r3
 8007a96:	2004      	movs	r0, #4
 8007a98:	f000 fb17 	bl	80080ca <xQueueCreateMutexStatic>
 8007a9c:	61f8      	str	r0, [r7, #28]
 8007a9e:	e016      	b.n	8007ace <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	2001      	movs	r0, #1
 8007aa8:	f000 fb0f 	bl	80080ca <xQueueCreateMutexStatic>
 8007aac:	61f8      	str	r0, [r7, #28]
 8007aae:	e00e      	b.n	8007ace <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10b      	bne.n	8007ace <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007abc:	2004      	movs	r0, #4
 8007abe:	f000 faec 	bl	800809a <xQueueCreateMutex>
 8007ac2:	61f8      	str	r0, [r7, #28]
 8007ac4:	e003      	b.n	8007ace <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007ac6:	2001      	movs	r0, #1
 8007ac8:	f000 fae7 	bl	800809a <xQueueCreateMutex>
 8007acc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00c      	beq.n	8007aee <osMutexNew+0xee>
        if (attr != NULL) {
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <osMutexNew+0xe2>
          name = attr->name;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	e001      	b.n	8007ae6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007ae6:	68f9      	ldr	r1, [r7, #12]
 8007ae8:	69f8      	ldr	r0, [r7, #28]
 8007aea:	f001 f821 	bl	8008b30 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d006      	beq.n	8007b02 <osMutexNew+0x102>
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f043 0301 	orr.w	r3, r3, #1
 8007b00:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007b02:	69fb      	ldr	r3, [r7, #28]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3720      	adds	r7, #32
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f023 0301 	bic.w	r3, r3, #1
 8007b1c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b2a:	f3ef 8305 	mrs	r3, IPSR
 8007b2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b30:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007b36:	f06f 0305 	mvn.w	r3, #5
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	e02c      	b.n	8007b98 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d103      	bne.n	8007b4c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007b44:	f06f 0303 	mvn.w	r3, #3
 8007b48:	617b      	str	r3, [r7, #20]
 8007b4a:	e025      	b.n	8007b98 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d011      	beq.n	8007b76 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6938      	ldr	r0, [r7, #16]
 8007b56:	f000 fb07 	bl	8008168 <xQueueTakeMutexRecursive>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d01b      	beq.n	8007b98 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007b66:	f06f 0301 	mvn.w	r3, #1
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	e014      	b.n	8007b98 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007b6e:	f06f 0302 	mvn.w	r3, #2
 8007b72:	617b      	str	r3, [r7, #20]
 8007b74:	e010      	b.n	8007b98 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6938      	ldr	r0, [r7, #16]
 8007b7a:	f000 fda5 	bl	80086c8 <xQueueSemaphoreTake>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d009      	beq.n	8007b98 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007b8a:	f06f 0301 	mvn.w	r3, #1
 8007b8e:	617b      	str	r3, [r7, #20]
 8007b90:	e002      	b.n	8007b98 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007b92:	f06f 0302 	mvn.w	r3, #2
 8007b96:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007b98:	697b      	ldr	r3, [r7, #20]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b086      	sub	sp, #24
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f023 0301 	bic.w	r3, r3, #1
 8007bb0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bbe:	f3ef 8305 	mrs	r3, IPSR
 8007bc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bc4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007bca:	f06f 0305 	mvn.w	r3, #5
 8007bce:	617b      	str	r3, [r7, #20]
 8007bd0:	e01f      	b.n	8007c12 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d103      	bne.n	8007be0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007bd8:	f06f 0303 	mvn.w	r3, #3
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	e018      	b.n	8007c12 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d009      	beq.n	8007bfa <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007be6:	6938      	ldr	r0, [r7, #16]
 8007be8:	f000 fa8a 	bl	8008100 <xQueueGiveMutexRecursive>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d00f      	beq.n	8007c12 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007bf2:	f06f 0302 	mvn.w	r3, #2
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	e00b      	b.n	8007c12 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2100      	movs	r1, #0
 8007c00:	6938      	ldr	r0, [r7, #16]
 8007c02:	f000 fae7 	bl	80081d4 <xQueueGenericSend>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d002      	beq.n	8007c12 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007c0c:	f06f 0302 	mvn.w	r3, #2
 8007c10:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007c12:	697b      	ldr	r3, [r7, #20]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4a07      	ldr	r2, [pc, #28]	; (8007c48 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	4a06      	ldr	r2, [pc, #24]	; (8007c4c <vApplicationGetIdleTaskMemory+0x30>)
 8007c32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2280      	movs	r2, #128	; 0x80
 8007c38:	601a      	str	r2, [r3, #0]
}
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	2000022c 	.word	0x2000022c
 8007c4c:	2000029c 	.word	0x2000029c

08007c50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4a07      	ldr	r2, [pc, #28]	; (8007c7c <vApplicationGetTimerTaskMemory+0x2c>)
 8007c60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	4a06      	ldr	r2, [pc, #24]	; (8007c80 <vApplicationGetTimerTaskMemory+0x30>)
 8007c66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c6e:	601a      	str	r2, [r3, #0]
}
 8007c70:	bf00      	nop
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	2000049c 	.word	0x2000049c
 8007c80:	2000050c 	.word	0x2000050c

08007c84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f103 0208 	add.w	r2, r3, #8
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f103 0208 	add.w	r2, r3, #8
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f103 0208 	add.w	r2, r3, #8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	601a      	str	r2, [r3, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3c:	d103      	bne.n	8007d46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e00c      	b.n	8007d60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3308      	adds	r3, #8
 8007d4a:	60fb      	str	r3, [r7, #12]
 8007d4c:	e002      	b.n	8007d54 <vListInsert+0x2e>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d2f6      	bcs.n	8007d4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	601a      	str	r2, [r3, #0]
}
 8007d8c:	bf00      	nop
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6892      	ldr	r2, [r2, #8]
 8007dae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6852      	ldr	r2, [r2, #4]
 8007db8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d103      	bne.n	8007dcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	1e5a      	subs	r2, r3, #1
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e16:	f002 fd55 	bl	800a8c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e26:	fb01 f303 	mul.w	r3, r1, r3
 8007e2a:	441a      	add	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e46:	3b01      	subs	r3, #1
 8007e48:	68f9      	ldr	r1, [r7, #12]
 8007e4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e4c:	fb01 f303 	mul.w	r3, r1, r3
 8007e50:	441a      	add	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	22ff      	movs	r2, #255	; 0xff
 8007e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	22ff      	movs	r2, #255	; 0xff
 8007e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d114      	bne.n	8007e96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d01a      	beq.n	8007eaa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3310      	adds	r3, #16
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 fcc3 	bl	8009804 <xTaskRemoveFromEventList>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d012      	beq.n	8007eaa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e84:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <xQueueGenericReset+0xcc>)
 8007e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	e009      	b.n	8007eaa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3310      	adds	r3, #16
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7ff fef2 	bl	8007c84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	3324      	adds	r3, #36	; 0x24
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7ff feed 	bl	8007c84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007eaa:	f002 fd3b 	bl	800a924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007eae:	2301      	movs	r3, #1
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	e000ed04 	.word	0xe000ed04

08007ebc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08e      	sub	sp, #56	; 0x38
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007efe:	bf00      	nop
 8007f00:	e7fe      	b.n	8007f00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <xQueueGenericCreateStatic+0x52>
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <xQueueGenericCreateStatic+0x56>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e000      	b.n	8007f14 <xQueueGenericCreateStatic+0x58>
 8007f12:	2300      	movs	r3, #0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d10a      	bne.n	8007f2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	623b      	str	r3, [r7, #32]
}
 8007f2a:	bf00      	nop
 8007f2c:	e7fe      	b.n	8007f2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d102      	bne.n	8007f3a <xQueueGenericCreateStatic+0x7e>
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <xQueueGenericCreateStatic+0x82>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e000      	b.n	8007f40 <xQueueGenericCreateStatic+0x84>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	61fb      	str	r3, [r7, #28]
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f5a:	2350      	movs	r3, #80	; 0x50
 8007f5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2b50      	cmp	r3, #80	; 0x50
 8007f62:	d00a      	beq.n	8007f7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	61bb      	str	r3, [r7, #24]
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00d      	beq.n	8007fa2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	4613      	mov	r3, r2
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f83f 	bl	8008020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3730      	adds	r7, #48	; 0x30
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08a      	sub	sp, #40	; 0x28
 8007fb0:	af02      	add	r7, sp, #8
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10a      	bne.n	8007fd6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	613b      	str	r3, [r7, #16]
}
 8007fd2:	bf00      	nop
 8007fd4:	e7fe      	b.n	8007fd4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	fb02 f303 	mul.w	r3, r2, r3
 8007fde:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	3350      	adds	r3, #80	; 0x50
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f002 fd8f 	bl	800ab08 <pvPortMalloc>
 8007fea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d011      	beq.n	8008016 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	3350      	adds	r3, #80	; 0x50
 8007ffa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008004:	79fa      	ldrb	r2, [r7, #7]
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	4613      	mov	r3, r2
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 f805 	bl	8008020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008016:	69bb      	ldr	r3, [r7, #24]
	}
 8008018:	4618      	mov	r0, r3
 800801a:	3720      	adds	r7, #32
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d103      	bne.n	800803c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	e002      	b.n	8008042 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800804e:	2101      	movs	r1, #1
 8008050:	69b8      	ldr	r0, [r7, #24]
 8008052:	f7ff fecb 	bl	8007dec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	78fa      	ldrb	r2, [r7, #3]
 800805a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800805e:	bf00      	nop
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008066:	b580      	push	{r7, lr}
 8008068:	b082      	sub	sp, #8
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00e      	beq.n	8008092 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008086:	2300      	movs	r3, #0
 8008088:	2200      	movs	r2, #0
 800808a:	2100      	movs	r1, #0
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f8a1 	bl	80081d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800809a:	b580      	push	{r7, lr}
 800809c:	b086      	sub	sp, #24
 800809e:	af00      	add	r7, sp, #0
 80080a0:	4603      	mov	r3, r0
 80080a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80080a4:	2301      	movs	r3, #1
 80080a6:	617b      	str	r3, [r7, #20]
 80080a8:	2300      	movs	r3, #0
 80080aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80080ac:	79fb      	ldrb	r3, [r7, #7]
 80080ae:	461a      	mov	r2, r3
 80080b0:	6939      	ldr	r1, [r7, #16]
 80080b2:	6978      	ldr	r0, [r7, #20]
 80080b4:	f7ff ff7a 	bl	8007fac <xQueueGenericCreate>
 80080b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff ffd3 	bl	8008066 <prvInitialiseMutex>

		return xNewQueue;
 80080c0:	68fb      	ldr	r3, [r7, #12]
	}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b088      	sub	sp, #32
 80080ce:	af02      	add	r7, sp, #8
 80080d0:	4603      	mov	r3, r0
 80080d2:	6039      	str	r1, [r7, #0]
 80080d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80080d6:	2301      	movs	r3, #1
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	2300      	movs	r3, #0
 80080dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2200      	movs	r2, #0
 80080e6:	6939      	ldr	r1, [r7, #16]
 80080e8:	6978      	ldr	r0, [r7, #20]
 80080ea:	f7ff fee7 	bl	8007ebc <xQueueGenericCreateStatic>
 80080ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f7ff ffb8 	bl	8008066 <prvInitialiseMutex>

		return xNewQueue;
 80080f6:	68fb      	ldr	r3, [r7, #12]
	}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008100:	b590      	push	{r4, r7, lr}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	60fb      	str	r3, [r7, #12]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	689c      	ldr	r4, [r3, #8]
 800812c:	f001 fd60 	bl	8009bf0 <xTaskGetCurrentTaskHandle>
 8008130:	4603      	mov	r3, r0
 8008132:	429c      	cmp	r4, r3
 8008134:	d111      	bne.n	800815a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	1e5a      	subs	r2, r3, #1
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d105      	bne.n	8008154 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008148:	2300      	movs	r3, #0
 800814a:	2200      	movs	r2, #0
 800814c:	2100      	movs	r1, #0
 800814e:	6938      	ldr	r0, [r7, #16]
 8008150:	f000 f840 	bl	80081d4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008154:	2301      	movs	r3, #1
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e001      	b.n	800815e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800815e:	697b      	ldr	r3, [r7, #20]
	}
 8008160:	4618      	mov	r0, r3
 8008162:	371c      	adds	r7, #28
 8008164:	46bd      	mov	sp, r7
 8008166:	bd90      	pop	{r4, r7, pc}

08008168 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10a      	bne.n	8008192 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	60fb      	str	r3, [r7, #12]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	689c      	ldr	r4, [r3, #8]
 8008196:	f001 fd2b 	bl	8009bf0 <xTaskGetCurrentTaskHandle>
 800819a:	4603      	mov	r3, r0
 800819c:	429c      	cmp	r4, r3
 800819e:	d107      	bne.n	80081b0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80081aa:	2301      	movs	r3, #1
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	e00c      	b.n	80081ca <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6938      	ldr	r0, [r7, #16]
 80081b4:	f000 fa88 	bl	80086c8 <xQueueSemaphoreTake>
 80081b8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d004      	beq.n	80081ca <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80081ca:	697b      	ldr	r3, [r7, #20]
	}
 80081cc:	4618      	mov	r0, r3
 80081ce:	371c      	adds	r7, #28
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd90      	pop	{r4, r7, pc}

080081d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08e      	sub	sp, #56	; 0x38
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081e2:	2300      	movs	r3, #0
 80081e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <xQueueGenericSend+0x32>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d103      	bne.n	8008214 <xQueueGenericSend+0x40>
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <xQueueGenericSend+0x44>
 8008214:	2301      	movs	r3, #1
 8008216:	e000      	b.n	800821a <xQueueGenericSend+0x46>
 8008218:	2300      	movs	r3, #0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10a      	bne.n	8008234 <xQueueGenericSend+0x60>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008230:	bf00      	nop
 8008232:	e7fe      	b.n	8008232 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b02      	cmp	r3, #2
 8008238:	d103      	bne.n	8008242 <xQueueGenericSend+0x6e>
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823e:	2b01      	cmp	r3, #1
 8008240:	d101      	bne.n	8008246 <xQueueGenericSend+0x72>
 8008242:	2301      	movs	r3, #1
 8008244:	e000      	b.n	8008248 <xQueueGenericSend+0x74>
 8008246:	2300      	movs	r3, #0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <xQueueGenericSend+0x8e>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	623b      	str	r3, [r7, #32]
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008262:	f001 fcd5 	bl	8009c10 <xTaskGetSchedulerState>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d102      	bne.n	8008272 <xQueueGenericSend+0x9e>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <xQueueGenericSend+0xa2>
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <xQueueGenericSend+0xa4>
 8008276:	2300      	movs	r3, #0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <xQueueGenericSend+0xbe>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	61fb      	str	r3, [r7, #28]
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008292:	f002 fb17 	bl	800a8c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829e:	429a      	cmp	r2, r3
 80082a0:	d302      	bcc.n	80082a8 <xQueueGenericSend+0xd4>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	d129      	bne.n	80082fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	68b9      	ldr	r1, [r7, #8]
 80082ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ae:	f000 fb2f 	bl	8008910 <prvCopyDataToQueue>
 80082b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d010      	beq.n	80082de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	3324      	adds	r3, #36	; 0x24
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 fa9f 	bl	8009804 <xTaskRemoveFromEventList>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d013      	beq.n	80082f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082cc:	4b3f      	ldr	r3, [pc, #252]	; (80083cc <xQueueGenericSend+0x1f8>)
 80082ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	e00a      	b.n	80082f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d007      	beq.n	80082f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082e4:	4b39      	ldr	r3, [pc, #228]	; (80083cc <xQueueGenericSend+0x1f8>)
 80082e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082f4:	f002 fb16 	bl	800a924 <vPortExitCritical>
				return pdPASS;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e063      	b.n	80083c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008302:	f002 fb0f 	bl	800a924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008306:	2300      	movs	r3, #0
 8008308:	e05c      	b.n	80083c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800830a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830c:	2b00      	cmp	r3, #0
 800830e:	d106      	bne.n	800831e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008310:	f107 0314 	add.w	r3, r7, #20
 8008314:	4618      	mov	r0, r3
 8008316:	f001 fad9 	bl	80098cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800831a:	2301      	movs	r3, #1
 800831c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800831e:	f002 fb01 	bl	800a924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008322:	f001 f839 	bl	8009398 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008326:	f002 facd 	bl	800a8c4 <vPortEnterCritical>
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008330:	b25b      	sxtb	r3, r3
 8008332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008336:	d103      	bne.n	8008340 <xQueueGenericSend+0x16c>
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008346:	b25b      	sxtb	r3, r3
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d103      	bne.n	8008356 <xQueueGenericSend+0x182>
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008356:	f002 fae5 	bl	800a924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800835a:	1d3a      	adds	r2, r7, #4
 800835c:	f107 0314 	add.w	r3, r7, #20
 8008360:	4611      	mov	r1, r2
 8008362:	4618      	mov	r0, r3
 8008364:	f001 fac8 	bl	80098f8 <xTaskCheckForTimeOut>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d124      	bne.n	80083b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800836e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008370:	f000 fbc6 	bl	8008b00 <prvIsQueueFull>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d018      	beq.n	80083ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	3310      	adds	r3, #16
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	4611      	mov	r1, r2
 8008382:	4618      	mov	r0, r3
 8008384:	f001 f9ee 	bl	8009764 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800838a:	f000 fb51 	bl	8008a30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800838e:	f001 f811 	bl	80093b4 <xTaskResumeAll>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	f47f af7c 	bne.w	8008292 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800839a:	4b0c      	ldr	r3, [pc, #48]	; (80083cc <xQueueGenericSend+0x1f8>)
 800839c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a0:	601a      	str	r2, [r3, #0]
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	e772      	b.n	8008292 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ae:	f000 fb3f 	bl	8008a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083b2:	f000 ffff 	bl	80093b4 <xTaskResumeAll>
 80083b6:	e76c      	b.n	8008292 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ba:	f000 fb39 	bl	8008a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083be:	f000 fff9 	bl	80093b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3738      	adds	r7, #56	; 0x38
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	e000ed04 	.word	0xe000ed04

080083d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b090      	sub	sp, #64	; 0x40
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10a      	bne.n	80083fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083fa:	bf00      	nop
 80083fc:	e7fe      	b.n	80083fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d103      	bne.n	800840c <xQueueGenericSendFromISR+0x3c>
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <xQueueGenericSendFromISR+0x40>
 800840c:	2301      	movs	r3, #1
 800840e:	e000      	b.n	8008412 <xQueueGenericSendFromISR+0x42>
 8008410:	2300      	movs	r3, #0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10a      	bne.n	800842c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008428:	bf00      	nop
 800842a:	e7fe      	b.n	800842a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2b02      	cmp	r3, #2
 8008430:	d103      	bne.n	800843a <xQueueGenericSendFromISR+0x6a>
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <xQueueGenericSendFromISR+0x6e>
 800843a:	2301      	movs	r3, #1
 800843c:	e000      	b.n	8008440 <xQueueGenericSendFromISR+0x70>
 800843e:	2300      	movs	r3, #0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	623b      	str	r3, [r7, #32]
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800845a:	f002 fb15 	bl	800aa88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800845e:	f3ef 8211 	mrs	r2, BASEPRI
 8008462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	61fa      	str	r2, [r7, #28]
 8008474:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008476:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008478:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800847e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008482:	429a      	cmp	r2, r3
 8008484:	d302      	bcc.n	800848c <xQueueGenericSendFromISR+0xbc>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b02      	cmp	r3, #2
 800848a:	d12f      	bne.n	80084ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800848c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084a2:	f000 fa35 	bl	8008910 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ae:	d112      	bne.n	80084d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d016      	beq.n	80084e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	3324      	adds	r3, #36	; 0x24
 80084bc:	4618      	mov	r0, r3
 80084be:	f001 f9a1 	bl	8009804 <xTaskRemoveFromEventList>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00e      	beq.n	80084e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00b      	beq.n	80084e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	e007      	b.n	80084e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084da:	3301      	adds	r3, #1
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	b25a      	sxtb	r2, r3
 80084e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084e6:	2301      	movs	r3, #1
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80084ea:	e001      	b.n	80084f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3740      	adds	r7, #64	; 0x40
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
	...

08008508 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08c      	sub	sp, #48	; 0x30
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008514:	2300      	movs	r3, #0
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10a      	bne.n	8008538 <xQueueReceive+0x30>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	623b      	str	r3, [r7, #32]
}
 8008534:	bf00      	nop
 8008536:	e7fe      	b.n	8008536 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d103      	bne.n	8008546 <xQueueReceive+0x3e>
 800853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <xQueueReceive+0x42>
 8008546:	2301      	movs	r3, #1
 8008548:	e000      	b.n	800854c <xQueueReceive+0x44>
 800854a:	2300      	movs	r3, #0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <xQueueReceive+0x5e>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	61fb      	str	r3, [r7, #28]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008566:	f001 fb53 	bl	8009c10 <xTaskGetSchedulerState>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d102      	bne.n	8008576 <xQueueReceive+0x6e>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <xQueueReceive+0x72>
 8008576:	2301      	movs	r3, #1
 8008578:	e000      	b.n	800857c <xQueueReceive+0x74>
 800857a:	2300      	movs	r3, #0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10a      	bne.n	8008596 <xQueueReceive+0x8e>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	61bb      	str	r3, [r7, #24]
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008596:	f002 f995 	bl	800a8c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d01f      	beq.n	80085e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085a6:	68b9      	ldr	r1, [r7, #8]
 80085a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085aa:	f000 fa1b 	bl	80089e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	1e5a      	subs	r2, r3, #1
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00f      	beq.n	80085de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c0:	3310      	adds	r3, #16
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 f91e 	bl	8009804 <xTaskRemoveFromEventList>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d007      	beq.n	80085de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085ce:	4b3d      	ldr	r3, [pc, #244]	; (80086c4 <xQueueReceive+0x1bc>)
 80085d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085de:	f002 f9a1 	bl	800a924 <vPortExitCritical>
				return pdPASS;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e069      	b.n	80086ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d103      	bne.n	80085f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085ec:	f002 f99a 	bl	800a924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085f0:	2300      	movs	r3, #0
 80085f2:	e062      	b.n	80086ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d106      	bne.n	8008608 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085fa:	f107 0310 	add.w	r3, r7, #16
 80085fe:	4618      	mov	r0, r3
 8008600:	f001 f964 	bl	80098cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008604:	2301      	movs	r3, #1
 8008606:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008608:	f002 f98c 	bl	800a924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800860c:	f000 fec4 	bl	8009398 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008610:	f002 f958 	bl	800a8c4 <vPortEnterCritical>
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800861a:	b25b      	sxtb	r3, r3
 800861c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008620:	d103      	bne.n	800862a <xQueueReceive+0x122>
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008630:	b25b      	sxtb	r3, r3
 8008632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008636:	d103      	bne.n	8008640 <xQueueReceive+0x138>
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	2200      	movs	r2, #0
 800863c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008640:	f002 f970 	bl	800a924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008644:	1d3a      	adds	r2, r7, #4
 8008646:	f107 0310 	add.w	r3, r7, #16
 800864a:	4611      	mov	r1, r2
 800864c:	4618      	mov	r0, r3
 800864e:	f001 f953 	bl	80098f8 <xTaskCheckForTimeOut>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d123      	bne.n	80086a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800865a:	f000 fa3b 	bl	8008ad4 <prvIsQueueEmpty>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d017      	beq.n	8008694 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	3324      	adds	r3, #36	; 0x24
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	4611      	mov	r1, r2
 800866c:	4618      	mov	r0, r3
 800866e:	f001 f879 	bl	8009764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008674:	f000 f9dc 	bl	8008a30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008678:	f000 fe9c 	bl	80093b4 <xTaskResumeAll>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d189      	bne.n	8008596 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008682:	4b10      	ldr	r3, [pc, #64]	; (80086c4 <xQueueReceive+0x1bc>)
 8008684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	e780      	b.n	8008596 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008696:	f000 f9cb 	bl	8008a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800869a:	f000 fe8b 	bl	80093b4 <xTaskResumeAll>
 800869e:	e77a      	b.n	8008596 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a2:	f000 f9c5 	bl	8008a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086a6:	f000 fe85 	bl	80093b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086ac:	f000 fa12 	bl	8008ad4 <prvIsQueueEmpty>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f43f af6f 	beq.w	8008596 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3730      	adds	r7, #48	; 0x30
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	e000ed04 	.word	0xe000ed04

080086c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b08e      	sub	sp, #56	; 0x38
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80086d2:	2300      	movs	r3, #0
 80086d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80086da:	2300      	movs	r3, #0
 80086dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10a      	bne.n	80086fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	623b      	str	r3, [r7, #32]
}
 80086f6:	bf00      	nop
 80086f8:	e7fe      	b.n	80086f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80086fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00a      	beq.n	8008718 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	61fb      	str	r3, [r7, #28]
}
 8008714:	bf00      	nop
 8008716:	e7fe      	b.n	8008716 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008718:	f001 fa7a 	bl	8009c10 <xTaskGetSchedulerState>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d102      	bne.n	8008728 <xQueueSemaphoreTake+0x60>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <xQueueSemaphoreTake+0x64>
 8008728:	2301      	movs	r3, #1
 800872a:	e000      	b.n	800872e <xQueueSemaphoreTake+0x66>
 800872c:	2300      	movs	r3, #0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10a      	bne.n	8008748 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	61bb      	str	r3, [r7, #24]
}
 8008744:	bf00      	nop
 8008746:	e7fe      	b.n	8008746 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008748:	f002 f8bc 	bl	800a8c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008750:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	2b00      	cmp	r3, #0
 8008756:	d024      	beq.n	80087a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	1e5a      	subs	r2, r3, #1
 800875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d104      	bne.n	8008772 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008768:	f001 fbc8 	bl	8009efc <pvTaskIncrementMutexHeldCount>
 800876c:	4602      	mov	r2, r0
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00f      	beq.n	800879a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	3310      	adds	r3, #16
 800877e:	4618      	mov	r0, r3
 8008780:	f001 f840 	bl	8009804 <xTaskRemoveFromEventList>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d007      	beq.n	800879a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800878a:	4b54      	ldr	r3, [pc, #336]	; (80088dc <xQueueSemaphoreTake+0x214>)
 800878c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800879a:	f002 f8c3 	bl	800a924 <vPortExitCritical>
				return pdPASS;
 800879e:	2301      	movs	r3, #1
 80087a0:	e097      	b.n	80088d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d111      	bne.n	80087cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00a      	beq.n	80087c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	617b      	str	r3, [r7, #20]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80087c4:	f002 f8ae 	bl	800a924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087c8:	2300      	movs	r3, #0
 80087ca:	e082      	b.n	80088d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d106      	bne.n	80087e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087d2:	f107 030c 	add.w	r3, r7, #12
 80087d6:	4618      	mov	r0, r3
 80087d8:	f001 f878 	bl	80098cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087dc:	2301      	movs	r3, #1
 80087de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087e0:	f002 f8a0 	bl	800a924 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087e4:	f000 fdd8 	bl	8009398 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087e8:	f002 f86c 	bl	800a8c4 <vPortEnterCritical>
 80087ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087f2:	b25b      	sxtb	r3, r3
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d103      	bne.n	8008802 <xQueueSemaphoreTake+0x13a>
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008808:	b25b      	sxtb	r3, r3
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d103      	bne.n	8008818 <xQueueSemaphoreTake+0x150>
 8008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008818:	f002 f884 	bl	800a924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800881c:	463a      	mov	r2, r7
 800881e:	f107 030c 	add.w	r3, r7, #12
 8008822:	4611      	mov	r1, r2
 8008824:	4618      	mov	r0, r3
 8008826:	f001 f867 	bl	80098f8 <xTaskCheckForTimeOut>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d132      	bne.n	8008896 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008832:	f000 f94f 	bl	8008ad4 <prvIsQueueEmpty>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d026      	beq.n	800888a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d109      	bne.n	8008858 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008844:	f002 f83e 	bl	800a8c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	4618      	mov	r0, r3
 800884e:	f001 f9fd 	bl	8009c4c <xTaskPriorityInherit>
 8008852:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008854:	f002 f866 	bl	800a924 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	3324      	adds	r3, #36	; 0x24
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	4611      	mov	r1, r2
 8008860:	4618      	mov	r0, r3
 8008862:	f000 ff7f 	bl	8009764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008868:	f000 f8e2 	bl	8008a30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800886c:	f000 fda2 	bl	80093b4 <xTaskResumeAll>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	f47f af68 	bne.w	8008748 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008878:	4b18      	ldr	r3, [pc, #96]	; (80088dc <xQueueSemaphoreTake+0x214>)
 800887a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	e75e      	b.n	8008748 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800888a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800888c:	f000 f8d0 	bl	8008a30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008890:	f000 fd90 	bl	80093b4 <xTaskResumeAll>
 8008894:	e758      	b.n	8008748 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008898:	f000 f8ca 	bl	8008a30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800889c:	f000 fd8a 	bl	80093b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088a2:	f000 f917 	bl	8008ad4 <prvIsQueueEmpty>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f43f af4d 	beq.w	8008748 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00d      	beq.n	80088d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80088b4:	f002 f806 	bl	800a8c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80088b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088ba:	f000 f811 	bl	80088e0 <prvGetDisinheritPriorityAfterTimeout>
 80088be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80088c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088c6:	4618      	mov	r0, r3
 80088c8:	f001 fa96 	bl	8009df8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80088cc:	f002 f82a 	bl	800a924 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3738      	adds	r7, #56	; 0x38
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	e000ed04 	.word	0xe000ed04

080088e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d006      	beq.n	80088fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80088fa:	60fb      	str	r3, [r7, #12]
 80088fc:	e001      	b.n	8008902 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008902:	68fb      	ldr	r3, [r7, #12]
	}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800891c:	2300      	movs	r3, #0
 800891e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008924:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10d      	bne.n	800894a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d14d      	bne.n	80089d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	4618      	mov	r0, r3
 800893c:	f001 f9ee 	bl	8009d1c <xTaskPriorityDisinherit>
 8008940:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	609a      	str	r2, [r3, #8]
 8008948:	e043      	b.n	80089d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d119      	bne.n	8008984 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6858      	ldr	r0, [r3, #4]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	461a      	mov	r2, r3
 800895a:	68b9      	ldr	r1, [r7, #8]
 800895c:	f003 f9f4 	bl	800bd48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008968:	441a      	add	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	429a      	cmp	r2, r3
 8008978:	d32b      	bcc.n	80089d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	605a      	str	r2, [r3, #4]
 8008982:	e026      	b.n	80089d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	68d8      	ldr	r0, [r3, #12]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898c:	461a      	mov	r2, r3
 800898e:	68b9      	ldr	r1, [r7, #8]
 8008990:	f003 f9da 	bl	800bd48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899c:	425b      	negs	r3, r3
 800899e:	441a      	add	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	68da      	ldr	r2, [r3, #12]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d207      	bcs.n	80089c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	689a      	ldr	r2, [r3, #8]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b8:	425b      	negs	r3, r3
 80089ba:	441a      	add	r2, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d105      	bne.n	80089d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80089da:	697b      	ldr	r3, [r7, #20]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d018      	beq.n	8008a28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	441a      	add	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d303      	bcc.n	8008a18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68d9      	ldr	r1, [r3, #12]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	461a      	mov	r2, r3
 8008a22:	6838      	ldr	r0, [r7, #0]
 8008a24:	f003 f990 	bl	800bd48 <memcpy>
	}
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a38:	f001 ff44 	bl	800a8c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a44:	e011      	b.n	8008a6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d012      	beq.n	8008a74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3324      	adds	r3, #36	; 0x24
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fed6 	bl	8009804 <xTaskRemoveFromEventList>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a5e:	f000 ffad 	bl	80099bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	dce9      	bgt.n	8008a46 <prvUnlockQueue+0x16>
 8008a72:	e000      	b.n	8008a76 <prvUnlockQueue+0x46>
					break;
 8008a74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	22ff      	movs	r2, #255	; 0xff
 8008a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a7e:	f001 ff51 	bl	800a924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a82:	f001 ff1f 	bl	800a8c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a8e:	e011      	b.n	8008ab4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d012      	beq.n	8008abe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3310      	adds	r3, #16
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 feb1 	bl	8009804 <xTaskRemoveFromEventList>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008aa8:	f000 ff88 	bl	80099bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	dce9      	bgt.n	8008a90 <prvUnlockQueue+0x60>
 8008abc:	e000      	b.n	8008ac0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008abe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	22ff      	movs	r2, #255	; 0xff
 8008ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ac8:	f001 ff2c 	bl	800a924 <vPortExitCritical>
}
 8008acc:	bf00      	nop
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008adc:	f001 fef2 	bl	800a8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	e001      	b.n	8008af2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008af2:	f001 ff17 	bl	800a924 <vPortExitCritical>

	return xReturn;
 8008af6:	68fb      	ldr	r3, [r7, #12]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b08:	f001 fedc 	bl	800a8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d102      	bne.n	8008b1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	e001      	b.n	8008b22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b22:	f001 feff 	bl	800a924 <vPortExitCritical>

	return xReturn;
 8008b26:	68fb      	ldr	r3, [r7, #12]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	e014      	b.n	8008b6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b40:	4a0f      	ldr	r2, [pc, #60]	; (8008b80 <vQueueAddToRegistry+0x50>)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10b      	bne.n	8008b64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b4c:	490c      	ldr	r1, [pc, #48]	; (8008b80 <vQueueAddToRegistry+0x50>)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b56:	4a0a      	ldr	r2, [pc, #40]	; (8008b80 <vQueueAddToRegistry+0x50>)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	4413      	add	r3, r2
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b62:	e006      	b.n	8008b72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2b07      	cmp	r3, #7
 8008b6e:	d9e7      	bls.n	8008b40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b70:	bf00      	nop
 8008b72:	bf00      	nop
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	2000521c 	.word	0x2000521c

08008b84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b94:	f001 fe96 	bl	800a8c4 <vPortEnterCritical>
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b9e:	b25b      	sxtb	r3, r3
 8008ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba4:	d103      	bne.n	8008bae <vQueueWaitForMessageRestricted+0x2a>
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb4:	b25b      	sxtb	r3, r3
 8008bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bba:	d103      	bne.n	8008bc4 <vQueueWaitForMessageRestricted+0x40>
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bc4:	f001 feae 	bl	800a924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d106      	bne.n	8008bde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	3324      	adds	r3, #36	; 0x24
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	68b9      	ldr	r1, [r7, #8]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 fde7 	bl	80097ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bde:	6978      	ldr	r0, [r7, #20]
 8008be0:	f7ff ff26 	bl	8008a30 <prvUnlockQueue>
	}
 8008be4:	bf00      	nop
 8008be6:	3718      	adds	r7, #24
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08e      	sub	sp, #56	; 0x38
 8008bf0:	af04      	add	r7, sp, #16
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	623b      	str	r3, [r7, #32]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10a      	bne.n	8008c32 <xTaskCreateStatic+0x46>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	61fb      	str	r3, [r7, #28]
}
 8008c2e:	bf00      	nop
 8008c30:	e7fe      	b.n	8008c30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c32:	2370      	movs	r3, #112	; 0x70
 8008c34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b70      	cmp	r3, #112	; 0x70
 8008c3a:	d00a      	beq.n	8008c52 <xTaskCreateStatic+0x66>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	61bb      	str	r3, [r7, #24]
}
 8008c4e:	bf00      	nop
 8008c50:	e7fe      	b.n	8008c50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01e      	beq.n	8008c98 <xTaskCreateStatic+0xac>
 8008c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01b      	beq.n	8008c98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c72:	2300      	movs	r3, #0
 8008c74:	9303      	str	r3, [sp, #12]
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	9302      	str	r3, [sp, #8]
 8008c7a:	f107 0314 	add.w	r3, r7, #20
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	68b9      	ldr	r1, [r7, #8]
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 f850 	bl	8008d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c92:	f000 f8df 	bl	8008e54 <prvAddNewTaskToReadyList>
 8008c96:	e001      	b.n	8008c9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c9c:	697b      	ldr	r3, [r7, #20]
	}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3728      	adds	r7, #40	; 0x28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b08c      	sub	sp, #48	; 0x30
 8008caa:	af04      	add	r7, sp, #16
 8008cac:	60f8      	str	r0, [r7, #12]
 8008cae:	60b9      	str	r1, [r7, #8]
 8008cb0:	603b      	str	r3, [r7, #0]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cb6:	88fb      	ldrh	r3, [r7, #6]
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 ff24 	bl	800ab08 <pvPortMalloc>
 8008cc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00e      	beq.n	8008ce6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cc8:	2070      	movs	r0, #112	; 0x70
 8008cca:	f001 ff1d 	bl	800ab08 <pvPortMalloc>
 8008cce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	631a      	str	r2, [r3, #48]	; 0x30
 8008cdc:	e005      	b.n	8008cea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cde:	6978      	ldr	r0, [r7, #20]
 8008ce0:	f001 ffde 	bl	800aca0 <vPortFree>
 8008ce4:	e001      	b.n	8008cea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d017      	beq.n	8008d20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cf8:	88fa      	ldrh	r2, [r7, #6]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9303      	str	r3, [sp, #12]
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	9302      	str	r3, [sp, #8]
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 f80e 	bl	8008d30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d14:	69f8      	ldr	r0, [r7, #28]
 8008d16:	f000 f89d 	bl	8008e54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	61bb      	str	r3, [r7, #24]
 8008d1e:	e002      	b.n	8008d26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d20:	f04f 33ff 	mov.w	r3, #4294967295
 8008d24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d26:	69bb      	ldr	r3, [r7, #24]
	}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3720      	adds	r7, #32
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	461a      	mov	r2, r3
 8008d48:	21a5      	movs	r1, #165	; 0xa5
 8008d4a:	f003 f80b 	bl	800bd64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	f023 0307 	bic.w	r3, r3, #7
 8008d66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	617b      	str	r3, [r7, #20]
}
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01f      	beq.n	8008dd4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d94:	2300      	movs	r3, #0
 8008d96:	61fb      	str	r3, [r7, #28]
 8008d98:	e012      	b.n	8008dc0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	4413      	add	r3, r2
 8008da0:	7819      	ldrb	r1, [r3, #0]
 8008da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	4413      	add	r3, r2
 8008da8:	3334      	adds	r3, #52	; 0x34
 8008daa:	460a      	mov	r2, r1
 8008dac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	4413      	add	r3, r2
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d006      	beq.n	8008dc8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	61fb      	str	r3, [r7, #28]
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	2b1f      	cmp	r3, #31
 8008dc4:	d9e9      	bls.n	8008d9a <prvInitialiseNewTask+0x6a>
 8008dc6:	e000      	b.n	8008dca <prvInitialiseNewTask+0x9a>
			{
				break;
 8008dc8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008dd2:	e003      	b.n	8008ddc <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	2b37      	cmp	r3, #55	; 0x37
 8008de0:	d901      	bls.n	8008de6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008de2:	2337      	movs	r3, #55	; 0x37
 8008de4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008df0:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->uxMutexesHeld = 0;
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	2200      	movs	r2, #0
 8008df6:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fe ff61 	bl	8007cc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e04:	3318      	adds	r3, #24
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe ff5c 	bl	8007cc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e20:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	2200      	movs	r2, #0
 8008e26:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e30:	683a      	ldr	r2, [r7, #0]
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	69b8      	ldr	r0, [r7, #24]
 8008e36:	f001 fc17 	bl	800a668 <pxPortInitialiseStack>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e4c:	bf00      	nop
 8008e4e:	3720      	adds	r7, #32
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e5c:	f001 fd32 	bl	800a8c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e60:	4b2d      	ldr	r3, [pc, #180]	; (8008f18 <prvAddNewTaskToReadyList+0xc4>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3301      	adds	r3, #1
 8008e66:	4a2c      	ldr	r2, [pc, #176]	; (8008f18 <prvAddNewTaskToReadyList+0xc4>)
 8008e68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e6a:	4b2c      	ldr	r3, [pc, #176]	; (8008f1c <prvAddNewTaskToReadyList+0xc8>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d109      	bne.n	8008e86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e72:	4a2a      	ldr	r2, [pc, #168]	; (8008f1c <prvAddNewTaskToReadyList+0xc8>)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e78:	4b27      	ldr	r3, [pc, #156]	; (8008f18 <prvAddNewTaskToReadyList+0xc4>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d110      	bne.n	8008ea2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e80:	f000 fdc0 	bl	8009a04 <prvInitialiseTaskLists>
 8008e84:	e00d      	b.n	8008ea2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e86:	4b26      	ldr	r3, [pc, #152]	; (8008f20 <prvAddNewTaskToReadyList+0xcc>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d109      	bne.n	8008ea2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e8e:	4b23      	ldr	r3, [pc, #140]	; (8008f1c <prvAddNewTaskToReadyList+0xc8>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d802      	bhi.n	8008ea2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e9c:	4a1f      	ldr	r2, [pc, #124]	; (8008f1c <prvAddNewTaskToReadyList+0xc8>)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ea2:	4b20      	ldr	r3, [pc, #128]	; (8008f24 <prvAddNewTaskToReadyList+0xd0>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	4a1e      	ldr	r2, [pc, #120]	; (8008f24 <prvAddNewTaskToReadyList+0xd0>)
 8008eaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008eac:	4b1d      	ldr	r3, [pc, #116]	; (8008f24 <prvAddNewTaskToReadyList+0xd0>)
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	659a      	str	r2, [r3, #88]	; 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb8:	4b1b      	ldr	r3, [pc, #108]	; (8008f28 <prvAddNewTaskToReadyList+0xd4>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d903      	bls.n	8008ec8 <prvAddNewTaskToReadyList+0x74>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec4:	4a18      	ldr	r2, [pc, #96]	; (8008f28 <prvAddNewTaskToReadyList+0xd4>)
 8008ec6:	6013      	str	r3, [r2, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4a15      	ldr	r2, [pc, #84]	; (8008f2c <prvAddNewTaskToReadyList+0xd8>)
 8008ed6:	441a      	add	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3304      	adds	r3, #4
 8008edc:	4619      	mov	r1, r3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	f7fe fefd 	bl	8007cde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ee4:	f001 fd1e 	bl	800a924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ee8:	4b0d      	ldr	r3, [pc, #52]	; (8008f20 <prvAddNewTaskToReadyList+0xcc>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00e      	beq.n	8008f0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ef0:	4b0a      	ldr	r3, [pc, #40]	; (8008f1c <prvAddNewTaskToReadyList+0xc8>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d207      	bcs.n	8008f0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008efe:	4b0c      	ldr	r3, [pc, #48]	; (8008f30 <prvAddNewTaskToReadyList+0xdc>)
 8008f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f0e:	bf00      	nop
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20000de0 	.word	0x20000de0
 8008f1c:	2000090c 	.word	0x2000090c
 8008f20:	20000dec 	.word	0x20000dec
 8008f24:	20000dfc 	.word	0x20000dfc
 8008f28:	20000de8 	.word	0x20000de8
 8008f2c:	20000910 	.word	0x20000910
 8008f30:	e000ed04 	.word	0xe000ed04

08008f34 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08a      	sub	sp, #40	; 0x28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10a      	bne.n	8008f5e <vTaskDelayUntil+0x2a>
	__asm volatile
 8008f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	617b      	str	r3, [r7, #20]
}
 8008f5a:	bf00      	nop
 8008f5c:	e7fe      	b.n	8008f5c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10a      	bne.n	8008f7a <vTaskDelayUntil+0x46>
	__asm volatile
 8008f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	613b      	str	r3, [r7, #16]
}
 8008f76:	bf00      	nop
 8008f78:	e7fe      	b.n	8008f78 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008f7a:	4b2a      	ldr	r3, [pc, #168]	; (8009024 <vTaskDelayUntil+0xf0>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <vTaskDelayUntil+0x64>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	60fb      	str	r3, [r7, #12]
}
 8008f94:	bf00      	nop
 8008f96:	e7fe      	b.n	8008f96 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008f98:	f000 f9fe 	bl	8009398 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008f9c:	4b22      	ldr	r3, [pc, #136]	; (8009028 <vTaskDelayUntil+0xf4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	4413      	add	r3, r2
 8008faa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6a3a      	ldr	r2, [r7, #32]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d20b      	bcs.n	8008fce <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	69fa      	ldr	r2, [r7, #28]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d211      	bcs.n	8008fe4 <vTaskDelayUntil+0xb0>
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d90d      	bls.n	8008fe4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	627b      	str	r3, [r7, #36]	; 0x24
 8008fcc:	e00a      	b.n	8008fe4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	69fa      	ldr	r2, [r7, #28]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d303      	bcc.n	8008fe0 <vTaskDelayUntil+0xac>
 8008fd8:	69fa      	ldr	r2, [r7, #28]
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d901      	bls.n	8008fe4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	69fa      	ldr	r2, [r7, #28]
 8008fe8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d006      	beq.n	8008ffe <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008ff0:	69fa      	ldr	r2, [r7, #28]
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 ff93 	bl	8009f24 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008ffe:	f000 f9d9 	bl	80093b4 <xTaskResumeAll>
 8009002:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d107      	bne.n	800901a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800900a:	4b08      	ldr	r3, [pc, #32]	; (800902c <vTaskDelayUntil+0xf8>)
 800900c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800901a:	bf00      	nop
 800901c:	3728      	adds	r7, #40	; 0x28
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000e08 	.word	0x20000e08
 8009028:	20000de4 	.word	0x20000de4
 800902c:	e000ed04 	.word	0xe000ed04

08009030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009038:	2300      	movs	r3, #0
 800903a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d017      	beq.n	8009072 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009042:	4b13      	ldr	r3, [pc, #76]	; (8009090 <vTaskDelay+0x60>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <vTaskDelay+0x30>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	60bb      	str	r3, [r7, #8]
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009060:	f000 f99a 	bl	8009398 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009064:	2100      	movs	r1, #0
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 ff5c 	bl	8009f24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800906c:	f000 f9a2 	bl	80093b4 <xTaskResumeAll>
 8009070:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d107      	bne.n	8009088 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009078:	4b06      	ldr	r3, [pc, #24]	; (8009094 <vTaskDelay+0x64>)
 800907a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009088:	bf00      	nop
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	20000e08 	.word	0x20000e08
 8009094:	e000ed04 	.word	0xe000ed04

08009098 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80090a0:	f001 fc10 	bl	800a8c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d102      	bne.n	80090b0 <vTaskSuspend+0x18>
 80090aa:	4b30      	ldr	r3, [pc, #192]	; (800916c <vTaskSuspend+0xd4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	e000      	b.n	80090b2 <vTaskSuspend+0x1a>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	3304      	adds	r3, #4
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fe6d 	bl	8007d98 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d004      	beq.n	80090d0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3318      	adds	r3, #24
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe fe64 	bl	8007d98 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3304      	adds	r3, #4
 80090d4:	4619      	mov	r1, r3
 80090d6:	4826      	ldr	r0, [pc, #152]	; (8009170 <vTaskSuspend+0xd8>)
 80090d8:	f7fe fe01 	bl	8007cde <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d103      	bne.n	80090f0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80090f0:	f001 fc18 	bl	800a924 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80090f4:	4b1f      	ldr	r3, [pc, #124]	; (8009174 <vTaskSuspend+0xdc>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80090fc:	f001 fbe2 	bl	800a8c4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009100:	f000 fd56 	bl	8009bb0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009104:	f001 fc0e 	bl	800a924 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009108:	4b18      	ldr	r3, [pc, #96]	; (800916c <vTaskSuspend+0xd4>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	429a      	cmp	r2, r3
 8009110:	d127      	bne.n	8009162 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8009112:	4b18      	ldr	r3, [pc, #96]	; (8009174 <vTaskSuspend+0xdc>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d017      	beq.n	800914a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800911a:	4b17      	ldr	r3, [pc, #92]	; (8009178 <vTaskSuspend+0xe0>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00a      	beq.n	8009138 <vTaskSuspend+0xa0>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	60bb      	str	r3, [r7, #8]
}
 8009134:	bf00      	nop
 8009136:	e7fe      	b.n	8009136 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8009138:	4b10      	ldr	r3, [pc, #64]	; (800917c <vTaskSuspend+0xe4>)
 800913a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009148:	e00b      	b.n	8009162 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800914a:	4b09      	ldr	r3, [pc, #36]	; (8009170 <vTaskSuspend+0xd8>)
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <vTaskSuspend+0xe8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d103      	bne.n	800915e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8009156:	4b05      	ldr	r3, [pc, #20]	; (800916c <vTaskSuspend+0xd4>)
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
	}
 800915c:	e001      	b.n	8009162 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800915e:	f000 faa3 	bl	80096a8 <vTaskSwitchContext>
	}
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	2000090c 	.word	0x2000090c
 8009170:	20000dcc 	.word	0x20000dcc
 8009174:	20000dec 	.word	0x20000dec
 8009178:	20000e08 	.word	0x20000e08
 800917c:	e000ed04 	.word	0xe000ed04
 8009180:	20000de0 	.word	0x20000de0

08009184 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800918c:	2300      	movs	r3, #0
 800918e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10a      	bne.n	80091b0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	60fb      	str	r3, [r7, #12]
}
 80091ac:	bf00      	nop
 80091ae:	e7fe      	b.n	80091ae <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	4a0a      	ldr	r2, [pc, #40]	; (80091e0 <prvTaskIsTaskSuspended+0x5c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d10a      	bne.n	80091d0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091be:	4a09      	ldr	r2, [pc, #36]	; (80091e4 <prvTaskIsTaskSuspended+0x60>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d005      	beq.n	80091d0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80091cc:	2301      	movs	r3, #1
 80091ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091d0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80091d2:	4618      	mov	r0, r3
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	20000dcc 	.word	0x20000dcc
 80091e4:	20000da0 	.word	0x20000da0

080091e8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08a      	sub	sp, #40	; 0x28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80091f0:	2300      	movs	r3, #0
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10a      	bne.n	8009214 <xTaskResumeFromISR+0x2c>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	61bb      	str	r3, [r7, #24]
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009214:	f001 fc38 	bl	800aa88 <vPortValidateInterruptPriority>
	__asm volatile
 8009218:	f3ef 8211 	mrs	r2, BASEPRI
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	617a      	str	r2, [r7, #20]
 800922e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009230:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009232:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009234:	6a38      	ldr	r0, [r7, #32]
 8009236:	f7ff ffa5 	bl	8009184 <prvTaskIsTaskSuspended>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d030      	beq.n	80092a2 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009240:	4b1d      	ldr	r3, [pc, #116]	; (80092b8 <xTaskResumeFromISR+0xd0>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d126      	bne.n	8009296 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800924c:	4b1b      	ldr	r3, [pc, #108]	; (80092bc <xTaskResumeFromISR+0xd4>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009252:	429a      	cmp	r2, r3
 8009254:	d301      	bcc.n	800925a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8009256:	2301      	movs	r3, #1
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800925a:	6a3b      	ldr	r3, [r7, #32]
 800925c:	3304      	adds	r3, #4
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe fd9a 	bl	8007d98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009268:	4b15      	ldr	r3, [pc, #84]	; (80092c0 <xTaskResumeFromISR+0xd8>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d903      	bls.n	8009278 <xTaskResumeFromISR+0x90>
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	4a12      	ldr	r2, [pc, #72]	; (80092c0 <xTaskResumeFromISR+0xd8>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4a0f      	ldr	r2, [pc, #60]	; (80092c4 <xTaskResumeFromISR+0xdc>)
 8009286:	441a      	add	r2, r3
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7fe fd25 	bl	8007cde <vListInsertEnd>
 8009294:	e005      	b.n	80092a2 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	3318      	adds	r3, #24
 800929a:	4619      	mov	r1, r3
 800929c:	480a      	ldr	r0, [pc, #40]	; (80092c8 <xTaskResumeFromISR+0xe0>)
 800929e:	f7fe fd1e 	bl	8007cde <vListInsertEnd>
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f383 8811 	msr	BASEPRI, r3
}
 80092ac:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3728      	adds	r7, #40	; 0x28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	20000e08 	.word	0x20000e08
 80092bc:	2000090c 	.word	0x2000090c
 80092c0:	20000de8 	.word	0x20000de8
 80092c4:	20000910 	.word	0x20000910
 80092c8:	20000da0 	.word	0x20000da0

080092cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08a      	sub	sp, #40	; 0x28
 80092d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092da:	463a      	mov	r2, r7
 80092dc:	1d39      	adds	r1, r7, #4
 80092de:	f107 0308 	add.w	r3, r7, #8
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe fc9a 	bl	8007c1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	9202      	str	r2, [sp, #8]
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	2300      	movs	r3, #0
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	2300      	movs	r3, #0
 80092f8:	460a      	mov	r2, r1
 80092fa:	4921      	ldr	r1, [pc, #132]	; (8009380 <vTaskStartScheduler+0xb4>)
 80092fc:	4821      	ldr	r0, [pc, #132]	; (8009384 <vTaskStartScheduler+0xb8>)
 80092fe:	f7ff fc75 	bl	8008bec <xTaskCreateStatic>
 8009302:	4603      	mov	r3, r0
 8009304:	4a20      	ldr	r2, [pc, #128]	; (8009388 <vTaskStartScheduler+0xbc>)
 8009306:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009308:	4b1f      	ldr	r3, [pc, #124]	; (8009388 <vTaskStartScheduler+0xbc>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009310:	2301      	movs	r3, #1
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	e001      	b.n	800931a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009316:	2300      	movs	r3, #0
 8009318:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d102      	bne.n	8009326 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009320:	f000 fe54 	bl	8009fcc <xTimerCreateTimerTask>
 8009324:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d116      	bne.n	800935a <vTaskStartScheduler+0x8e>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	613b      	str	r3, [r7, #16]
}
 800933e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009340:	4b12      	ldr	r3, [pc, #72]	; (800938c <vTaskStartScheduler+0xc0>)
 8009342:	f04f 32ff 	mov.w	r2, #4294967295
 8009346:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009348:	4b11      	ldr	r3, [pc, #68]	; (8009390 <vTaskStartScheduler+0xc4>)
 800934a:	2201      	movs	r2, #1
 800934c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800934e:	4b11      	ldr	r3, [pc, #68]	; (8009394 <vTaskStartScheduler+0xc8>)
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009354:	f001 fa14 	bl	800a780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009358:	e00e      	b.n	8009378 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009360:	d10a      	bne.n	8009378 <vTaskStartScheduler+0xac>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	60fb      	str	r3, [r7, #12]
}
 8009374:	bf00      	nop
 8009376:	e7fe      	b.n	8009376 <vTaskStartScheduler+0xaa>
}
 8009378:	bf00      	nop
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	0800fe1c 	.word	0x0800fe1c
 8009384:	080099d5 	.word	0x080099d5
 8009388:	20000e04 	.word	0x20000e04
 800938c:	20000e00 	.word	0x20000e00
 8009390:	20000dec 	.word	0x20000dec
 8009394:	20000de4 	.word	0x20000de4

08009398 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009398:	b480      	push	{r7}
 800939a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800939c:	4b04      	ldr	r3, [pc, #16]	; (80093b0 <vTaskSuspendAll+0x18>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3301      	adds	r3, #1
 80093a2:	4a03      	ldr	r2, [pc, #12]	; (80093b0 <vTaskSuspendAll+0x18>)
 80093a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093a6:	bf00      	nop
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	20000e08 	.word	0x20000e08

080093b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093be:	2300      	movs	r3, #0
 80093c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093c2:	4b42      	ldr	r3, [pc, #264]	; (80094cc <xTaskResumeAll+0x118>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10a      	bne.n	80093e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	603b      	str	r3, [r7, #0]
}
 80093dc:	bf00      	nop
 80093de:	e7fe      	b.n	80093de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093e0:	f001 fa70 	bl	800a8c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093e4:	4b39      	ldr	r3, [pc, #228]	; (80094cc <xTaskResumeAll+0x118>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	4a38      	ldr	r2, [pc, #224]	; (80094cc <xTaskResumeAll+0x118>)
 80093ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ee:	4b37      	ldr	r3, [pc, #220]	; (80094cc <xTaskResumeAll+0x118>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d162      	bne.n	80094bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093f6:	4b36      	ldr	r3, [pc, #216]	; (80094d0 <xTaskResumeAll+0x11c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d05e      	beq.n	80094bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093fe:	e02f      	b.n	8009460 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009400:	4b34      	ldr	r3, [pc, #208]	; (80094d4 <xTaskResumeAll+0x120>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3318      	adds	r3, #24
 800940c:	4618      	mov	r0, r3
 800940e:	f7fe fcc3 	bl	8007d98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3304      	adds	r3, #4
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe fcbe 	bl	8007d98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009420:	4b2d      	ldr	r3, [pc, #180]	; (80094d8 <xTaskResumeAll+0x124>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	429a      	cmp	r2, r3
 8009426:	d903      	bls.n	8009430 <xTaskResumeAll+0x7c>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942c:	4a2a      	ldr	r2, [pc, #168]	; (80094d8 <xTaskResumeAll+0x124>)
 800942e:	6013      	str	r3, [r2, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009434:	4613      	mov	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4a27      	ldr	r2, [pc, #156]	; (80094dc <xTaskResumeAll+0x128>)
 800943e:	441a      	add	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3304      	adds	r3, #4
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	f7fe fc49 	bl	8007cde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009450:	4b23      	ldr	r3, [pc, #140]	; (80094e0 <xTaskResumeAll+0x12c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009456:	429a      	cmp	r2, r3
 8009458:	d302      	bcc.n	8009460 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800945a:	4b22      	ldr	r3, [pc, #136]	; (80094e4 <xTaskResumeAll+0x130>)
 800945c:	2201      	movs	r2, #1
 800945e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009460:	4b1c      	ldr	r3, [pc, #112]	; (80094d4 <xTaskResumeAll+0x120>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1cb      	bne.n	8009400 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800946e:	f000 fb9f 	bl	8009bb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009472:	4b1d      	ldr	r3, [pc, #116]	; (80094e8 <xTaskResumeAll+0x134>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d010      	beq.n	80094a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800947e:	f000 f859 	bl	8009534 <xTaskIncrementTick>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009488:	4b16      	ldr	r3, [pc, #88]	; (80094e4 <xTaskResumeAll+0x130>)
 800948a:	2201      	movs	r2, #1
 800948c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3b01      	subs	r3, #1
 8009492:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f1      	bne.n	800947e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800949a:	4b13      	ldr	r3, [pc, #76]	; (80094e8 <xTaskResumeAll+0x134>)
 800949c:	2200      	movs	r2, #0
 800949e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094a0:	4b10      	ldr	r3, [pc, #64]	; (80094e4 <xTaskResumeAll+0x130>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d009      	beq.n	80094bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094a8:	2301      	movs	r3, #1
 80094aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094ac:	4b0f      	ldr	r3, [pc, #60]	; (80094ec <xTaskResumeAll+0x138>)
 80094ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094bc:	f001 fa32 	bl	800a924 <vPortExitCritical>

	return xAlreadyYielded;
 80094c0:	68bb      	ldr	r3, [r7, #8]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20000e08 	.word	0x20000e08
 80094d0:	20000de0 	.word	0x20000de0
 80094d4:	20000da0 	.word	0x20000da0
 80094d8:	20000de8 	.word	0x20000de8
 80094dc:	20000910 	.word	0x20000910
 80094e0:	2000090c 	.word	0x2000090c
 80094e4:	20000df4 	.word	0x20000df4
 80094e8:	20000df0 	.word	0x20000df0
 80094ec:	e000ed04 	.word	0xe000ed04

080094f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80094f6:	4b05      	ldr	r3, [pc, #20]	; (800950c <xTaskGetTickCount+0x1c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80094fc:	687b      	ldr	r3, [r7, #4]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20000de4 	.word	0x20000de4

08009510 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009516:	f001 fab7 	bl	800aa88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800951a:	2300      	movs	r3, #0
 800951c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800951e:	4b04      	ldr	r3, [pc, #16]	; (8009530 <xTaskGetTickCountFromISR+0x20>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009524:	683b      	ldr	r3, [r7, #0]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20000de4 	.word	0x20000de4

08009534 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800953a:	2300      	movs	r3, #0
 800953c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800953e:	4b4f      	ldr	r3, [pc, #316]	; (800967c <xTaskIncrementTick+0x148>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	f040 808f 	bne.w	8009666 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009548:	4b4d      	ldr	r3, [pc, #308]	; (8009680 <xTaskIncrementTick+0x14c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009550:	4a4b      	ldr	r2, [pc, #300]	; (8009680 <xTaskIncrementTick+0x14c>)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d120      	bne.n	800959e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800955c:	4b49      	ldr	r3, [pc, #292]	; (8009684 <xTaskIncrementTick+0x150>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00a      	beq.n	800957c <xTaskIncrementTick+0x48>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	603b      	str	r3, [r7, #0]
}
 8009578:	bf00      	nop
 800957a:	e7fe      	b.n	800957a <xTaskIncrementTick+0x46>
 800957c:	4b41      	ldr	r3, [pc, #260]	; (8009684 <xTaskIncrementTick+0x150>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	60fb      	str	r3, [r7, #12]
 8009582:	4b41      	ldr	r3, [pc, #260]	; (8009688 <xTaskIncrementTick+0x154>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a3f      	ldr	r2, [pc, #252]	; (8009684 <xTaskIncrementTick+0x150>)
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	4a3f      	ldr	r2, [pc, #252]	; (8009688 <xTaskIncrementTick+0x154>)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6013      	str	r3, [r2, #0]
 8009590:	4b3e      	ldr	r3, [pc, #248]	; (800968c <xTaskIncrementTick+0x158>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3301      	adds	r3, #1
 8009596:	4a3d      	ldr	r2, [pc, #244]	; (800968c <xTaskIncrementTick+0x158>)
 8009598:	6013      	str	r3, [r2, #0]
 800959a:	f000 fb09 	bl	8009bb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800959e:	4b3c      	ldr	r3, [pc, #240]	; (8009690 <xTaskIncrementTick+0x15c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d349      	bcc.n	800963c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095a8:	4b36      	ldr	r3, [pc, #216]	; (8009684 <xTaskIncrementTick+0x150>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d104      	bne.n	80095bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095b2:	4b37      	ldr	r3, [pc, #220]	; (8009690 <xTaskIncrementTick+0x15c>)
 80095b4:	f04f 32ff 	mov.w	r2, #4294967295
 80095b8:	601a      	str	r2, [r3, #0]
					break;
 80095ba:	e03f      	b.n	800963c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095bc:	4b31      	ldr	r3, [pc, #196]	; (8009684 <xTaskIncrementTick+0x150>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d203      	bcs.n	80095dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095d4:	4a2e      	ldr	r2, [pc, #184]	; (8009690 <xTaskIncrementTick+0x15c>)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095da:	e02f      	b.n	800963c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	3304      	adds	r3, #4
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fbd9 	bl	8007d98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	3318      	adds	r3, #24
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fe fbd0 	bl	8007d98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fc:	4b25      	ldr	r3, [pc, #148]	; (8009694 <xTaskIncrementTick+0x160>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	429a      	cmp	r2, r3
 8009602:	d903      	bls.n	800960c <xTaskIncrementTick+0xd8>
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009608:	4a22      	ldr	r2, [pc, #136]	; (8009694 <xTaskIncrementTick+0x160>)
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4a1f      	ldr	r2, [pc, #124]	; (8009698 <xTaskIncrementTick+0x164>)
 800961a:	441a      	add	r2, r3
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f7fe fb5b 	bl	8007cde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962c:	4b1b      	ldr	r3, [pc, #108]	; (800969c <xTaskIncrementTick+0x168>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009632:	429a      	cmp	r2, r3
 8009634:	d3b8      	bcc.n	80095a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009636:	2301      	movs	r3, #1
 8009638:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800963a:	e7b5      	b.n	80095a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800963c:	4b17      	ldr	r3, [pc, #92]	; (800969c <xTaskIncrementTick+0x168>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009642:	4915      	ldr	r1, [pc, #84]	; (8009698 <xTaskIncrementTick+0x164>)
 8009644:	4613      	mov	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	440b      	add	r3, r1
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d901      	bls.n	8009658 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009654:	2301      	movs	r3, #1
 8009656:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009658:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <xTaskIncrementTick+0x16c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d007      	beq.n	8009670 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009660:	2301      	movs	r3, #1
 8009662:	617b      	str	r3, [r7, #20]
 8009664:	e004      	b.n	8009670 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009666:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <xTaskIncrementTick+0x170>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3301      	adds	r3, #1
 800966c:	4a0d      	ldr	r2, [pc, #52]	; (80096a4 <xTaskIncrementTick+0x170>)
 800966e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009670:	697b      	ldr	r3, [r7, #20]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20000e08 	.word	0x20000e08
 8009680:	20000de4 	.word	0x20000de4
 8009684:	20000d98 	.word	0x20000d98
 8009688:	20000d9c 	.word	0x20000d9c
 800968c:	20000df8 	.word	0x20000df8
 8009690:	20000e00 	.word	0x20000e00
 8009694:	20000de8 	.word	0x20000de8
 8009698:	20000910 	.word	0x20000910
 800969c:	2000090c 	.word	0x2000090c
 80096a0:	20000df4 	.word	0x20000df4
 80096a4:	20000df0 	.word	0x20000df0

080096a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096ae:	4b28      	ldr	r3, [pc, #160]	; (8009750 <vTaskSwitchContext+0xa8>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096b6:	4b27      	ldr	r3, [pc, #156]	; (8009754 <vTaskSwitchContext+0xac>)
 80096b8:	2201      	movs	r2, #1
 80096ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096bc:	e041      	b.n	8009742 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80096be:	4b25      	ldr	r3, [pc, #148]	; (8009754 <vTaskSwitchContext+0xac>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096c4:	4b24      	ldr	r3, [pc, #144]	; (8009758 <vTaskSwitchContext+0xb0>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	60fb      	str	r3, [r7, #12]
 80096ca:	e010      	b.n	80096ee <vTaskSwitchContext+0x46>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d10a      	bne.n	80096e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	607b      	str	r3, [r7, #4]
}
 80096e4:	bf00      	nop
 80096e6:	e7fe      	b.n	80096e6 <vTaskSwitchContext+0x3e>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	491b      	ldr	r1, [pc, #108]	; (800975c <vTaskSwitchContext+0xb4>)
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	440b      	add	r3, r1
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0e4      	beq.n	80096cc <vTaskSwitchContext+0x24>
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	4613      	mov	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4a13      	ldr	r2, [pc, #76]	; (800975c <vTaskSwitchContext+0xb4>)
 800970e:	4413      	add	r3, r2
 8009710:	60bb      	str	r3, [r7, #8]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	605a      	str	r2, [r3, #4]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	3308      	adds	r3, #8
 8009724:	429a      	cmp	r2, r3
 8009726:	d104      	bne.n	8009732 <vTaskSwitchContext+0x8a>
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	605a      	str	r2, [r3, #4]
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	4a09      	ldr	r2, [pc, #36]	; (8009760 <vTaskSwitchContext+0xb8>)
 800973a:	6013      	str	r3, [r2, #0]
 800973c:	4a06      	ldr	r2, [pc, #24]	; (8009758 <vTaskSwitchContext+0xb0>)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6013      	str	r3, [r2, #0]
}
 8009742:	bf00      	nop
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20000e08 	.word	0x20000e08
 8009754:	20000df4 	.word	0x20000df4
 8009758:	20000de8 	.word	0x20000de8
 800975c:	20000910 	.word	0x20000910
 8009760:	2000090c 	.word	0x2000090c

08009764 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10a      	bne.n	800978a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	60fb      	str	r3, [r7, #12]
}
 8009786:	bf00      	nop
 8009788:	e7fe      	b.n	8009788 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800978a:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <vTaskPlaceOnEventList+0x44>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3318      	adds	r3, #24
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7fe fac7 	bl	8007d26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009798:	2101      	movs	r1, #1
 800979a:	6838      	ldr	r0, [r7, #0]
 800979c:	f000 fbc2 	bl	8009f24 <prvAddCurrentTaskToDelayedList>
}
 80097a0:	bf00      	nop
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	2000090c 	.word	0x2000090c

080097ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10a      	bne.n	80097d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	617b      	str	r3, [r7, #20]
}
 80097d0:	bf00      	nop
 80097d2:	e7fe      	b.n	80097d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097d4:	4b0a      	ldr	r3, [pc, #40]	; (8009800 <vTaskPlaceOnEventListRestricted+0x54>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	3318      	adds	r3, #24
 80097da:	4619      	mov	r1, r3
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f7fe fa7e 	bl	8007cde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80097e8:	f04f 33ff 	mov.w	r3, #4294967295
 80097ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	68b8      	ldr	r0, [r7, #8]
 80097f2:	f000 fb97 	bl	8009f24 <prvAddCurrentTaskToDelayedList>
	}
 80097f6:	bf00      	nop
 80097f8:	3718      	adds	r7, #24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	2000090c 	.word	0x2000090c

08009804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10a      	bne.n	8009830 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	60fb      	str	r3, [r7, #12]
}
 800982c:	bf00      	nop
 800982e:	e7fe      	b.n	800982e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	3318      	adds	r3, #24
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe faaf 	bl	8007d98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800983a:	4b1e      	ldr	r3, [pc, #120]	; (80098b4 <xTaskRemoveFromEventList+0xb0>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d11d      	bne.n	800987e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	3304      	adds	r3, #4
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe faa6 	bl	8007d98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009850:	4b19      	ldr	r3, [pc, #100]	; (80098b8 <xTaskRemoveFromEventList+0xb4>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	429a      	cmp	r2, r3
 8009856:	d903      	bls.n	8009860 <xTaskRemoveFromEventList+0x5c>
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	4a16      	ldr	r2, [pc, #88]	; (80098b8 <xTaskRemoveFromEventList+0xb4>)
 800985e:	6013      	str	r3, [r2, #0]
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009864:	4613      	mov	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4a13      	ldr	r2, [pc, #76]	; (80098bc <xTaskRemoveFromEventList+0xb8>)
 800986e:	441a      	add	r2, r3
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	3304      	adds	r3, #4
 8009874:	4619      	mov	r1, r3
 8009876:	4610      	mov	r0, r2
 8009878:	f7fe fa31 	bl	8007cde <vListInsertEnd>
 800987c:	e005      	b.n	800988a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	3318      	adds	r3, #24
 8009882:	4619      	mov	r1, r3
 8009884:	480e      	ldr	r0, [pc, #56]	; (80098c0 <xTaskRemoveFromEventList+0xbc>)
 8009886:	f7fe fa2a 	bl	8007cde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988e:	4b0d      	ldr	r3, [pc, #52]	; (80098c4 <xTaskRemoveFromEventList+0xc0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	429a      	cmp	r2, r3
 8009896:	d905      	bls.n	80098a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009898:	2301      	movs	r3, #1
 800989a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800989c:	4b0a      	ldr	r3, [pc, #40]	; (80098c8 <xTaskRemoveFromEventList+0xc4>)
 800989e:	2201      	movs	r2, #1
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	e001      	b.n	80098a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80098a4:	2300      	movs	r3, #0
 80098a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80098a8:	697b      	ldr	r3, [r7, #20]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	20000e08 	.word	0x20000e08
 80098b8:	20000de8 	.word	0x20000de8
 80098bc:	20000910 	.word	0x20000910
 80098c0:	20000da0 	.word	0x20000da0
 80098c4:	2000090c 	.word	0x2000090c
 80098c8:	20000df4 	.word	0x20000df4

080098cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098d4:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <vTaskInternalSetTimeOutState+0x24>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098dc:	4b05      	ldr	r3, [pc, #20]	; (80098f4 <vTaskInternalSetTimeOutState+0x28>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	605a      	str	r2, [r3, #4]
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	20000df8 	.word	0x20000df8
 80098f4:	20000de4 	.word	0x20000de4

080098f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10a      	bne.n	800991e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	613b      	str	r3, [r7, #16]
}
 800991a:	bf00      	nop
 800991c:	e7fe      	b.n	800991c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10a      	bne.n	800993a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	60fb      	str	r3, [r7, #12]
}
 8009936:	bf00      	nop
 8009938:	e7fe      	b.n	8009938 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800993a:	f000 ffc3 	bl	800a8c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800993e:	4b1d      	ldr	r3, [pc, #116]	; (80099b4 <xTaskCheckForTimeOut+0xbc>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	69ba      	ldr	r2, [r7, #24]
 800994a:	1ad3      	subs	r3, r2, r3
 800994c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009956:	d102      	bne.n	800995e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009958:	2300      	movs	r3, #0
 800995a:	61fb      	str	r3, [r7, #28]
 800995c:	e023      	b.n	80099a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	4b15      	ldr	r3, [pc, #84]	; (80099b8 <xTaskCheckForTimeOut+0xc0>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	429a      	cmp	r2, r3
 8009968:	d007      	beq.n	800997a <xTaskCheckForTimeOut+0x82>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	429a      	cmp	r2, r3
 8009972:	d302      	bcc.n	800997a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009974:	2301      	movs	r3, #1
 8009976:	61fb      	str	r3, [r7, #28]
 8009978:	e015      	b.n	80099a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	429a      	cmp	r2, r3
 8009982:	d20b      	bcs.n	800999c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	1ad2      	subs	r2, r2, r3
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7ff ff9b 	bl	80098cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009996:	2300      	movs	r3, #0
 8009998:	61fb      	str	r3, [r7, #28]
 800999a:	e004      	b.n	80099a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	2200      	movs	r2, #0
 80099a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80099a2:	2301      	movs	r3, #1
 80099a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80099a6:	f000 ffbd 	bl	800a924 <vPortExitCritical>

	return xReturn;
 80099aa:	69fb      	ldr	r3, [r7, #28]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3720      	adds	r7, #32
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	20000de4 	.word	0x20000de4
 80099b8:	20000df8 	.word	0x20000df8

080099bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099c0:	4b03      	ldr	r3, [pc, #12]	; (80099d0 <vTaskMissedYield+0x14>)
 80099c2:	2201      	movs	r2, #1
 80099c4:	601a      	str	r2, [r3, #0]
}
 80099c6:	bf00      	nop
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	20000df4 	.word	0x20000df4

080099d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099dc:	f000 f852 	bl	8009a84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099e0:	4b06      	ldr	r3, [pc, #24]	; (80099fc <prvIdleTask+0x28>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d9f9      	bls.n	80099dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80099e8:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <prvIdleTask+0x2c>)
 80099ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099f8:	e7f0      	b.n	80099dc <prvIdleTask+0x8>
 80099fa:	bf00      	nop
 80099fc:	20000910 	.word	0x20000910
 8009a00:	e000ed04 	.word	0xe000ed04

08009a04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	607b      	str	r3, [r7, #4]
 8009a0e:	e00c      	b.n	8009a2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4a12      	ldr	r2, [pc, #72]	; (8009a64 <prvInitialiseTaskLists+0x60>)
 8009a1c:	4413      	add	r3, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fe f930 	bl	8007c84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3301      	adds	r3, #1
 8009a28:	607b      	str	r3, [r7, #4]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b37      	cmp	r3, #55	; 0x37
 8009a2e:	d9ef      	bls.n	8009a10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a30:	480d      	ldr	r0, [pc, #52]	; (8009a68 <prvInitialiseTaskLists+0x64>)
 8009a32:	f7fe f927 	bl	8007c84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a36:	480d      	ldr	r0, [pc, #52]	; (8009a6c <prvInitialiseTaskLists+0x68>)
 8009a38:	f7fe f924 	bl	8007c84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a3c:	480c      	ldr	r0, [pc, #48]	; (8009a70 <prvInitialiseTaskLists+0x6c>)
 8009a3e:	f7fe f921 	bl	8007c84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a42:	480c      	ldr	r0, [pc, #48]	; (8009a74 <prvInitialiseTaskLists+0x70>)
 8009a44:	f7fe f91e 	bl	8007c84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a48:	480b      	ldr	r0, [pc, #44]	; (8009a78 <prvInitialiseTaskLists+0x74>)
 8009a4a:	f7fe f91b 	bl	8007c84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a4e:	4b0b      	ldr	r3, [pc, #44]	; (8009a7c <prvInitialiseTaskLists+0x78>)
 8009a50:	4a05      	ldr	r2, [pc, #20]	; (8009a68 <prvInitialiseTaskLists+0x64>)
 8009a52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a54:	4b0a      	ldr	r3, [pc, #40]	; (8009a80 <prvInitialiseTaskLists+0x7c>)
 8009a56:	4a05      	ldr	r2, [pc, #20]	; (8009a6c <prvInitialiseTaskLists+0x68>)
 8009a58:	601a      	str	r2, [r3, #0]
}
 8009a5a:	bf00      	nop
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20000910 	.word	0x20000910
 8009a68:	20000d70 	.word	0x20000d70
 8009a6c:	20000d84 	.word	0x20000d84
 8009a70:	20000da0 	.word	0x20000da0
 8009a74:	20000db4 	.word	0x20000db4
 8009a78:	20000dcc 	.word	0x20000dcc
 8009a7c:	20000d98 	.word	0x20000d98
 8009a80:	20000d9c 	.word	0x20000d9c

08009a84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a8a:	e019      	b.n	8009ac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a8c:	f000 ff1a 	bl	800a8c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a90:	4b10      	ldr	r3, [pc, #64]	; (8009ad4 <prvCheckTasksWaitingTermination+0x50>)
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fe f97b 	bl	8007d98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009aa2:	4b0d      	ldr	r3, [pc, #52]	; (8009ad8 <prvCheckTasksWaitingTermination+0x54>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	4a0b      	ldr	r2, [pc, #44]	; (8009ad8 <prvCheckTasksWaitingTermination+0x54>)
 8009aaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009aac:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <prvCheckTasksWaitingTermination+0x58>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	4a0a      	ldr	r2, [pc, #40]	; (8009adc <prvCheckTasksWaitingTermination+0x58>)
 8009ab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ab6:	f000 ff35 	bl	800a924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f848 	bl	8009b50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ac0:	4b06      	ldr	r3, [pc, #24]	; (8009adc <prvCheckTasksWaitingTermination+0x58>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e1      	bne.n	8009a8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	20000db4 	.word	0x20000db4
 8009ad8:	20000de0 	.word	0x20000de0
 8009adc:	20000dc8 	.word	0x20000dc8

08009ae0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009aec:	e005      	b.n	8009afa <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	3301      	adds	r3, #1
 8009af2:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	3301      	adds	r3, #1
 8009af8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	2ba5      	cmp	r3, #165	; 0xa5
 8009b00:	d0f5      	beq.n	8009aee <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	089b      	lsrs	r3, r3, #2
 8009b06:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	b29b      	uxth	r3, r3
	}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d102      	bne.n	8009b2c <uxTaskGetStackHighWaterMark+0x14>
 8009b26:	4b09      	ldr	r3, [pc, #36]	; (8009b4c <uxTaskGetStackHighWaterMark+0x34>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	e000      	b.n	8009b2e <uxTaskGetStackHighWaterMark+0x16>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b34:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8009b36:	6938      	ldr	r0, [r7, #16]
 8009b38:	f7ff ffd2 	bl	8009ae0 <prvTaskCheckFreeStackSpace>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8009b40:	68fb      	ldr	r3, [r7, #12]
	}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	2000090c 	.word	0x2000090c

08009b50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d108      	bne.n	8009b74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b66:	4618      	mov	r0, r3
 8009b68:	f001 f89a 	bl	800aca0 <vPortFree>
				vPortFree( pxTCB );
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f001 f897 	bl	800aca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b72:	e018      	b.n	8009ba6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d103      	bne.n	8009b86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f001 f88e 	bl	800aca0 <vPortFree>
	}
 8009b84:	e00f      	b.n	8009ba6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d00a      	beq.n	8009ba6 <prvDeleteTCB+0x56>
	__asm volatile
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	60fb      	str	r3, [r7, #12]
}
 8009ba2:	bf00      	nop
 8009ba4:	e7fe      	b.n	8009ba4 <prvDeleteTCB+0x54>
	}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
	...

08009bb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bb6:	4b0c      	ldr	r3, [pc, #48]	; (8009be8 <prvResetNextTaskUnblockTime+0x38>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d104      	bne.n	8009bca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009bc0:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <prvResetNextTaskUnblockTime+0x3c>)
 8009bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009bc8:	e008      	b.n	8009bdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bca:	4b07      	ldr	r3, [pc, #28]	; (8009be8 <prvResetNextTaskUnblockTime+0x38>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	4a04      	ldr	r2, [pc, #16]	; (8009bec <prvResetNextTaskUnblockTime+0x3c>)
 8009bda:	6013      	str	r3, [r2, #0]
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	20000d98 	.word	0x20000d98
 8009bec:	20000e00 	.word	0x20000e00

08009bf0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009bf6:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <xTaskGetCurrentTaskHandle+0x1c>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009bfc:	687b      	ldr	r3, [r7, #4]
	}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	2000090c 	.word	0x2000090c

08009c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c16:	4b0b      	ldr	r3, [pc, #44]	; (8009c44 <xTaskGetSchedulerState+0x34>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d102      	bne.n	8009c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	607b      	str	r3, [r7, #4]
 8009c22:	e008      	b.n	8009c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c24:	4b08      	ldr	r3, [pc, #32]	; (8009c48 <xTaskGetSchedulerState+0x38>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	607b      	str	r3, [r7, #4]
 8009c30:	e001      	b.n	8009c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c32:	2300      	movs	r3, #0
 8009c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c36:	687b      	ldr	r3, [r7, #4]
	}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	20000dec 	.word	0x20000dec
 8009c48:	20000e08 	.word	0x20000e08

08009c4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d051      	beq.n	8009d06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c66:	4b2a      	ldr	r3, [pc, #168]	; (8009d10 <xTaskPriorityInherit+0xc4>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d241      	bcs.n	8009cf4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	db06      	blt.n	8009c86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c78:	4b25      	ldr	r3, [pc, #148]	; (8009d10 <xTaskPriorityInherit+0xc4>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	6959      	ldr	r1, [r3, #20]
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4a1f      	ldr	r2, [pc, #124]	; (8009d14 <xTaskPriorityInherit+0xc8>)
 8009c98:	4413      	add	r3, r2
 8009c9a:	4299      	cmp	r1, r3
 8009c9c:	d122      	bne.n	8009ce4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe f878 	bl	8007d98 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ca8:	4b19      	ldr	r3, [pc, #100]	; (8009d10 <xTaskPriorityInherit+0xc4>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb6:	4b18      	ldr	r3, [pc, #96]	; (8009d18 <xTaskPriorityInherit+0xcc>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d903      	bls.n	8009cc6 <xTaskPriorityInherit+0x7a>
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc2:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <xTaskPriorityInherit+0xcc>)
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4a10      	ldr	r2, [pc, #64]	; (8009d14 <xTaskPriorityInherit+0xc8>)
 8009cd4:	441a      	add	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4610      	mov	r0, r2
 8009cde:	f7fd fffe 	bl	8007cde <vListInsertEnd>
 8009ce2:	e004      	b.n	8009cee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ce4:	4b0a      	ldr	r3, [pc, #40]	; (8009d10 <xTaskPriorityInherit+0xc4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	e008      	b.n	8009d06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009cf8:	4b05      	ldr	r3, [pc, #20]	; (8009d10 <xTaskPriorityInherit+0xc4>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d201      	bcs.n	8009d06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009d02:	2301      	movs	r3, #1
 8009d04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d06:	68fb      	ldr	r3, [r7, #12]
	}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	2000090c 	.word	0x2000090c
 8009d14:	20000910 	.word	0x20000910
 8009d18:	20000de8 	.word	0x20000de8

08009d1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d056      	beq.n	8009de0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d32:	4b2e      	ldr	r3, [pc, #184]	; (8009dec <xTaskPriorityDisinherit+0xd0>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d00a      	beq.n	8009d52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	60fb      	str	r3, [r7, #12]
}
 8009d4e:	bf00      	nop
 8009d50:	e7fe      	b.n	8009d50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10a      	bne.n	8009d70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	60bb      	str	r3, [r7, #8]
}
 8009d6c:	bf00      	nop
 8009d6e:	e7fe      	b.n	8009d6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d74:	1e5a      	subs	r2, r3, #1
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	665a      	str	r2, [r3, #100]	; 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d02c      	beq.n	8009de0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d128      	bne.n	8009de0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	3304      	adds	r3, #4
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fe f800 	bl	8007d98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db0:	4b0f      	ldr	r3, [pc, #60]	; (8009df0 <xTaskPriorityDisinherit+0xd4>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d903      	bls.n	8009dc0 <xTaskPriorityDisinherit+0xa4>
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	4a0c      	ldr	r2, [pc, #48]	; (8009df0 <xTaskPriorityDisinherit+0xd4>)
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4a09      	ldr	r2, [pc, #36]	; (8009df4 <xTaskPriorityDisinherit+0xd8>)
 8009dce:	441a      	add	r2, r3
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	f7fd ff81 	bl	8007cde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009de0:	697b      	ldr	r3, [r7, #20]
	}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	2000090c 	.word	0x2000090c
 8009df0:	20000de8 	.word	0x20000de8
 8009df4:	20000910 	.word	0x20000910

08009df8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b088      	sub	sp, #32
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009e06:	2301      	movs	r3, #1
 8009e08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d06a      	beq.n	8009ee6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10a      	bne.n	8009e2e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	60fb      	str	r3, [r7, #12]
}
 8009e2a:	bf00      	nop
 8009e2c:	e7fe      	b.n	8009e2c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d902      	bls.n	8009e3e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	61fb      	str	r3, [r7, #28]
 8009e3c:	e002      	b.n	8009e44 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e42:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e48:	69fa      	ldr	r2, [r7, #28]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d04b      	beq.n	8009ee6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d146      	bne.n	8009ee6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009e58:	4b25      	ldr	r3, [pc, #148]	; (8009ef0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d10a      	bne.n	8009e78 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	60bb      	str	r3, [r7, #8]
}
 8009e74:	bf00      	nop
 8009e76:	e7fe      	b.n	8009e76 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	69fa      	ldr	r2, [r7, #28]
 8009e82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	db04      	blt.n	8009e96 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	6959      	ldr	r1, [r3, #20]
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4a13      	ldr	r2, [pc, #76]	; (8009ef4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009ea6:	4413      	add	r3, r2
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	d11c      	bne.n	8009ee6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	3304      	adds	r3, #4
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fd ff71 	bl	8007d98 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eba:	4b0f      	ldr	r3, [pc, #60]	; (8009ef8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d903      	bls.n	8009eca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec6:	4a0c      	ldr	r2, [pc, #48]	; (8009ef8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009ec8:	6013      	str	r3, [r2, #0]
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ece:	4613      	mov	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4a07      	ldr	r2, [pc, #28]	; (8009ef4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009ed8:	441a      	add	r2, r3
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	3304      	adds	r3, #4
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	f7fd fefc 	bl	8007cde <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ee6:	bf00      	nop
 8009ee8:	3720      	adds	r7, #32
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	2000090c 	.word	0x2000090c
 8009ef4:	20000910 	.word	0x20000910
 8009ef8:	20000de8 	.word	0x20000de8

08009efc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009efc:	b480      	push	{r7}
 8009efe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009f00:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d004      	beq.n	8009f12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009f08:	4b05      	ldr	r3, [pc, #20]	; (8009f20 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009f0e:	3201      	adds	r2, #1
 8009f10:	665a      	str	r2, [r3, #100]	; 0x64
		}

		return pxCurrentTCB;
 8009f12:	4b03      	ldr	r3, [pc, #12]	; (8009f20 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f14:	681b      	ldr	r3, [r3, #0]
	}
 8009f16:	4618      	mov	r0, r3
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	2000090c 	.word	0x2000090c

08009f24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f2e:	4b21      	ldr	r3, [pc, #132]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f34:	4b20      	ldr	r3, [pc, #128]	; (8009fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3304      	adds	r3, #4
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fd ff2c 	bl	8007d98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f46:	d10a      	bne.n	8009f5e <prvAddCurrentTaskToDelayedList+0x3a>
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d007      	beq.n	8009f5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f4e:	4b1a      	ldr	r3, [pc, #104]	; (8009fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	3304      	adds	r3, #4
 8009f54:	4619      	mov	r1, r3
 8009f56:	4819      	ldr	r0, [pc, #100]	; (8009fbc <prvAddCurrentTaskToDelayedList+0x98>)
 8009f58:	f7fd fec1 	bl	8007cde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f5c:	e026      	b.n	8009fac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4413      	add	r3, r2
 8009f64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f66:	4b14      	ldr	r3, [pc, #80]	; (8009fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d209      	bcs.n	8009f8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f76:	4b12      	ldr	r3, [pc, #72]	; (8009fc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	4b0f      	ldr	r3, [pc, #60]	; (8009fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3304      	adds	r3, #4
 8009f80:	4619      	mov	r1, r3
 8009f82:	4610      	mov	r0, r2
 8009f84:	f7fd fecf 	bl	8007d26 <vListInsert>
}
 8009f88:	e010      	b.n	8009fac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f8a:	4b0e      	ldr	r3, [pc, #56]	; (8009fc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3304      	adds	r3, #4
 8009f94:	4619      	mov	r1, r3
 8009f96:	4610      	mov	r0, r2
 8009f98:	f7fd fec5 	bl	8007d26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f9c:	4b0a      	ldr	r3, [pc, #40]	; (8009fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d202      	bcs.n	8009fac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009fa6:	4a08      	ldr	r2, [pc, #32]	; (8009fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	6013      	str	r3, [r2, #0]
}
 8009fac:	bf00      	nop
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	20000de4 	.word	0x20000de4
 8009fb8:	2000090c 	.word	0x2000090c
 8009fbc:	20000dcc 	.word	0x20000dcc
 8009fc0:	20000d9c 	.word	0x20000d9c
 8009fc4:	20000d98 	.word	0x20000d98
 8009fc8:	20000e00 	.word	0x20000e00

08009fcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08a      	sub	sp, #40	; 0x28
 8009fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fd6:	f000 fb07 	bl	800a5e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009fda:	4b1c      	ldr	r3, [pc, #112]	; (800a04c <xTimerCreateTimerTask+0x80>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d021      	beq.n	800a026 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009fea:	1d3a      	adds	r2, r7, #4
 8009fec:	f107 0108 	add.w	r1, r7, #8
 8009ff0:	f107 030c 	add.w	r3, r7, #12
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fd fe2b 	bl	8007c50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	9202      	str	r2, [sp, #8]
 800a002:	9301      	str	r3, [sp, #4]
 800a004:	2302      	movs	r3, #2
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	2300      	movs	r3, #0
 800a00a:	460a      	mov	r2, r1
 800a00c:	4910      	ldr	r1, [pc, #64]	; (800a050 <xTimerCreateTimerTask+0x84>)
 800a00e:	4811      	ldr	r0, [pc, #68]	; (800a054 <xTimerCreateTimerTask+0x88>)
 800a010:	f7fe fdec 	bl	8008bec <xTaskCreateStatic>
 800a014:	4603      	mov	r3, r0
 800a016:	4a10      	ldr	r2, [pc, #64]	; (800a058 <xTimerCreateTimerTask+0x8c>)
 800a018:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a01a:	4b0f      	ldr	r3, [pc, #60]	; (800a058 <xTimerCreateTimerTask+0x8c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a022:	2301      	movs	r3, #1
 800a024:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10a      	bne.n	800a042 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	613b      	str	r3, [r7, #16]
}
 800a03e:	bf00      	nop
 800a040:	e7fe      	b.n	800a040 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a042:	697b      	ldr	r3, [r7, #20]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3718      	adds	r7, #24
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	20000e3c 	.word	0x20000e3c
 800a050:	0800fe24 	.word	0x0800fe24
 800a054:	0800a191 	.word	0x0800a191
 800a058:	20000e40 	.word	0x20000e40

0800a05c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08a      	sub	sp, #40	; 0x28
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	623b      	str	r3, [r7, #32]
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a08a:	4b1a      	ldr	r3, [pc, #104]	; (800a0f4 <xTimerGenericCommand+0x98>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d02a      	beq.n	800a0e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2b05      	cmp	r3, #5
 800a0a2:	dc18      	bgt.n	800a0d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a0a4:	f7ff fdb4 	bl	8009c10 <xTaskGetSchedulerState>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d109      	bne.n	800a0c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0ae:	4b11      	ldr	r3, [pc, #68]	; (800a0f4 <xTimerGenericCommand+0x98>)
 800a0b0:	6818      	ldr	r0, [r3, #0]
 800a0b2:	f107 0110 	add.w	r1, r7, #16
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ba:	f7fe f88b 	bl	80081d4 <xQueueGenericSend>
 800a0be:	6278      	str	r0, [r7, #36]	; 0x24
 800a0c0:	e012      	b.n	800a0e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0c2:	4b0c      	ldr	r3, [pc, #48]	; (800a0f4 <xTimerGenericCommand+0x98>)
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	f107 0110 	add.w	r1, r7, #16
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f7fe f881 	bl	80081d4 <xQueueGenericSend>
 800a0d2:	6278      	str	r0, [r7, #36]	; 0x24
 800a0d4:	e008      	b.n	800a0e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0d6:	4b07      	ldr	r3, [pc, #28]	; (800a0f4 <xTimerGenericCommand+0x98>)
 800a0d8:	6818      	ldr	r0, [r3, #0]
 800a0da:	f107 0110 	add.w	r1, r7, #16
 800a0de:	2300      	movs	r3, #0
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	f7fe f975 	bl	80083d0 <xQueueGenericSendFromISR>
 800a0e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3728      	adds	r7, #40	; 0x28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20000e3c 	.word	0x20000e3c

0800a0f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b088      	sub	sp, #32
 800a0fc:	af02      	add	r7, sp, #8
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a102:	4b22      	ldr	r3, [pc, #136]	; (800a18c <prvProcessExpiredTimer+0x94>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	3304      	adds	r3, #4
 800a110:	4618      	mov	r0, r3
 800a112:	f7fd fe41 	bl	8007d98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a11c:	f003 0304 	and.w	r3, r3, #4
 800a120:	2b00      	cmp	r3, #0
 800a122:	d022      	beq.n	800a16a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	699a      	ldr	r2, [r3, #24]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	18d1      	adds	r1, r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	6978      	ldr	r0, [r7, #20]
 800a132:	f000 f8d1 	bl	800a2d8 <prvInsertTimerInActiveList>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d01f      	beq.n	800a17c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a13c:	2300      	movs	r3, #0
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	2300      	movs	r3, #0
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	2100      	movs	r1, #0
 800a146:	6978      	ldr	r0, [r7, #20]
 800a148:	f7ff ff88 	bl	800a05c <xTimerGenericCommand>
 800a14c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d113      	bne.n	800a17c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a158:	f383 8811 	msr	BASEPRI, r3
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f3bf 8f4f 	dsb	sy
 800a164:	60fb      	str	r3, [r7, #12]
}
 800a166:	bf00      	nop
 800a168:	e7fe      	b.n	800a168 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a170:	f023 0301 	bic.w	r3, r3, #1
 800a174:	b2da      	uxtb	r2, r3
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	6a1b      	ldr	r3, [r3, #32]
 800a180:	6978      	ldr	r0, [r7, #20]
 800a182:	4798      	blx	r3
}
 800a184:	bf00      	nop
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	20000e34 	.word	0x20000e34

0800a190 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a198:	f107 0308 	add.w	r3, r7, #8
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 f857 	bl	800a250 <prvGetNextExpireTime>
 800a1a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 f803 	bl	800a1b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1ae:	f000 f8d5 	bl	800a35c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1b2:	e7f1      	b.n	800a198 <prvTimerTask+0x8>

0800a1b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1be:	f7ff f8eb 	bl	8009398 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1c2:	f107 0308 	add.w	r3, r7, #8
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 f866 	bl	800a298 <prvSampleTimeNow>
 800a1cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d130      	bne.n	800a236 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10a      	bne.n	800a1f0 <prvProcessTimerOrBlockTask+0x3c>
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d806      	bhi.n	800a1f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1e2:	f7ff f8e7 	bl	80093b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1e6:	68f9      	ldr	r1, [r7, #12]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff ff85 	bl	800a0f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1ee:	e024      	b.n	800a23a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d008      	beq.n	800a208 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1f6:	4b13      	ldr	r3, [pc, #76]	; (800a244 <prvProcessTimerOrBlockTask+0x90>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <prvProcessTimerOrBlockTask+0x50>
 800a200:	2301      	movs	r3, #1
 800a202:	e000      	b.n	800a206 <prvProcessTimerOrBlockTask+0x52>
 800a204:	2300      	movs	r3, #0
 800a206:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a208:	4b0f      	ldr	r3, [pc, #60]	; (800a248 <prvProcessTimerOrBlockTask+0x94>)
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	4619      	mov	r1, r3
 800a216:	f7fe fcb5 	bl	8008b84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a21a:	f7ff f8cb 	bl	80093b4 <xTaskResumeAll>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a224:	4b09      	ldr	r3, [pc, #36]	; (800a24c <prvProcessTimerOrBlockTask+0x98>)
 800a226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	f3bf 8f6f 	isb	sy
}
 800a234:	e001      	b.n	800a23a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a236:	f7ff f8bd 	bl	80093b4 <xTaskResumeAll>
}
 800a23a:	bf00      	nop
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20000e38 	.word	0x20000e38
 800a248:	20000e3c 	.word	0x20000e3c
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a258:	4b0e      	ldr	r3, [pc, #56]	; (800a294 <prvGetNextExpireTime+0x44>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d101      	bne.n	800a266 <prvGetNextExpireTime+0x16>
 800a262:	2201      	movs	r2, #1
 800a264:	e000      	b.n	800a268 <prvGetNextExpireTime+0x18>
 800a266:	2200      	movs	r2, #0
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d105      	bne.n	800a280 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a274:	4b07      	ldr	r3, [pc, #28]	; (800a294 <prvGetNextExpireTime+0x44>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	60fb      	str	r3, [r7, #12]
 800a27e:	e001      	b.n	800a284 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a284:	68fb      	ldr	r3, [r7, #12]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	20000e34 	.word	0x20000e34

0800a298 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a2a0:	f7ff f926 	bl	80094f0 <xTaskGetTickCount>
 800a2a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a2a6:	4b0b      	ldr	r3, [pc, #44]	; (800a2d4 <prvSampleTimeNow+0x3c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d205      	bcs.n	800a2bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2b0:	f000 f936 	bl	800a520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	e002      	b.n	800a2c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2c2:	4a04      	ldr	r2, [pc, #16]	; (800a2d4 <prvSampleTimeNow+0x3c>)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20000e44 	.word	0x20000e44

0800a2d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d812      	bhi.n	800a324 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	1ad2      	subs	r2, r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d302      	bcc.n	800a312 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a30c:	2301      	movs	r3, #1
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	e01b      	b.n	800a34a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a312:	4b10      	ldr	r3, [pc, #64]	; (800a354 <prvInsertTimerInActiveList+0x7c>)
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3304      	adds	r3, #4
 800a31a:	4619      	mov	r1, r3
 800a31c:	4610      	mov	r0, r2
 800a31e:	f7fd fd02 	bl	8007d26 <vListInsert>
 800a322:	e012      	b.n	800a34a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d206      	bcs.n	800a33a <prvInsertTimerInActiveList+0x62>
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	429a      	cmp	r2, r3
 800a332:	d302      	bcc.n	800a33a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a334:	2301      	movs	r3, #1
 800a336:	617b      	str	r3, [r7, #20]
 800a338:	e007      	b.n	800a34a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a33a:	4b07      	ldr	r3, [pc, #28]	; (800a358 <prvInsertTimerInActiveList+0x80>)
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3304      	adds	r3, #4
 800a342:	4619      	mov	r1, r3
 800a344:	4610      	mov	r0, r2
 800a346:	f7fd fcee 	bl	8007d26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a34a:	697b      	ldr	r3, [r7, #20]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3718      	adds	r7, #24
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20000e38 	.word	0x20000e38
 800a358:	20000e34 	.word	0x20000e34

0800a35c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08e      	sub	sp, #56	; 0x38
 800a360:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a362:	e0ca      	b.n	800a4fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	da18      	bge.n	800a39c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a36a:	1d3b      	adds	r3, r7, #4
 800a36c:	3304      	adds	r3, #4
 800a36e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10a      	bne.n	800a38c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	61fb      	str	r3, [r7, #28]
}
 800a388:	bf00      	nop
 800a38a:	e7fe      	b.n	800a38a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a392:	6850      	ldr	r0, [r2, #4]
 800a394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a396:	6892      	ldr	r2, [r2, #8]
 800a398:	4611      	mov	r1, r2
 800a39a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f2c0 80aa 	blt.w	800a4f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3aa:	695b      	ldr	r3, [r3, #20]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d004      	beq.n	800a3ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fd fcef 	bl	8007d98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3ba:	463b      	mov	r3, r7
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7ff ff6b 	bl	800a298 <prvSampleTimeNow>
 800a3c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b09      	cmp	r3, #9
 800a3c8:	f200 8097 	bhi.w	800a4fa <prvProcessReceivedCommands+0x19e>
 800a3cc:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <prvProcessReceivedCommands+0x78>)
 800a3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d2:	bf00      	nop
 800a3d4:	0800a3fd 	.word	0x0800a3fd
 800a3d8:	0800a3fd 	.word	0x0800a3fd
 800a3dc:	0800a3fd 	.word	0x0800a3fd
 800a3e0:	0800a471 	.word	0x0800a471
 800a3e4:	0800a485 	.word	0x0800a485
 800a3e8:	0800a4cf 	.word	0x0800a4cf
 800a3ec:	0800a3fd 	.word	0x0800a3fd
 800a3f0:	0800a3fd 	.word	0x0800a3fd
 800a3f4:	0800a471 	.word	0x0800a471
 800a3f8:	0800a485 	.word	0x0800a485
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a402:	f043 0301 	orr.w	r3, r3, #1
 800a406:	b2da      	uxtb	r2, r3
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	18d1      	adds	r1, r2, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a41a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a41c:	f7ff ff5c 	bl	800a2d8 <prvInsertTimerInActiveList>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d069      	beq.n	800a4fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a42c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a434:	f003 0304 	and.w	r3, r3, #4
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d05e      	beq.n	800a4fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	441a      	add	r2, r3
 800a444:	2300      	movs	r3, #0
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	2300      	movs	r3, #0
 800a44a:	2100      	movs	r1, #0
 800a44c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a44e:	f7ff fe05 	bl	800a05c <xTimerGenericCommand>
 800a452:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d14f      	bne.n	800a4fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	61bb      	str	r3, [r7, #24]
}
 800a46c:	bf00      	nop
 800a46e:	e7fe      	b.n	800a46e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a476:	f023 0301 	bic.w	r3, r3, #1
 800a47a:	b2da      	uxtb	r2, r3
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a482:	e03a      	b.n	800a4fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a48a:	f043 0301 	orr.w	r3, r3, #1
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10a      	bne.n	800a4ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	617b      	str	r3, [r7, #20]
}
 800a4b6:	bf00      	nop
 800a4b8:	e7fe      	b.n	800a4b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4bc:	699a      	ldr	r2, [r3, #24]
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	18d1      	adds	r1, r2, r3
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c8:	f7ff ff06 	bl	800a2d8 <prvInsertTimerInActiveList>
					break;
 800a4cc:	e015      	b.n	800a4fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d103      	bne.n	800a4e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a4dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4de:	f000 fbdf 	bl	800aca0 <vPortFree>
 800a4e2:	e00a      	b.n	800a4fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ea:	f023 0301 	bic.w	r3, r3, #1
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4f6:	e000      	b.n	800a4fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a4f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4fa:	4b08      	ldr	r3, [pc, #32]	; (800a51c <prvProcessReceivedCommands+0x1c0>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	1d39      	adds	r1, r7, #4
 800a500:	2200      	movs	r2, #0
 800a502:	4618      	mov	r0, r3
 800a504:	f7fe f800 	bl	8008508 <xQueueReceive>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f47f af2a 	bne.w	800a364 <prvProcessReceivedCommands+0x8>
	}
}
 800a510:	bf00      	nop
 800a512:	bf00      	nop
 800a514:	3730      	adds	r7, #48	; 0x30
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20000e3c 	.word	0x20000e3c

0800a520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a526:	e048      	b.n	800a5ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a528:	4b2d      	ldr	r3, [pc, #180]	; (800a5e0 <prvSwitchTimerLists+0xc0>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a532:	4b2b      	ldr	r3, [pc, #172]	; (800a5e0 <prvSwitchTimerLists+0xc0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3304      	adds	r3, #4
 800a540:	4618      	mov	r0, r3
 800a542:	f7fd fc29 	bl	8007d98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a554:	f003 0304 	and.w	r3, r3, #4
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d02e      	beq.n	800a5ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	4413      	add	r3, r2
 800a564:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d90e      	bls.n	800a58c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a57a:	4b19      	ldr	r3, [pc, #100]	; (800a5e0 <prvSwitchTimerLists+0xc0>)
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3304      	adds	r3, #4
 800a582:	4619      	mov	r1, r3
 800a584:	4610      	mov	r0, r2
 800a586:	f7fd fbce 	bl	8007d26 <vListInsert>
 800a58a:	e016      	b.n	800a5ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a58c:	2300      	movs	r3, #0
 800a58e:	9300      	str	r3, [sp, #0]
 800a590:	2300      	movs	r3, #0
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	2100      	movs	r1, #0
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7ff fd60 	bl	800a05c <xTimerGenericCommand>
 800a59c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10a      	bne.n	800a5ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	603b      	str	r3, [r7, #0]
}
 800a5b6:	bf00      	nop
 800a5b8:	e7fe      	b.n	800a5b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5ba:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <prvSwitchTimerLists+0xc0>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d1b1      	bne.n	800a528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5c4:	4b06      	ldr	r3, [pc, #24]	; (800a5e0 <prvSwitchTimerLists+0xc0>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5ca:	4b06      	ldr	r3, [pc, #24]	; (800a5e4 <prvSwitchTimerLists+0xc4>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a04      	ldr	r2, [pc, #16]	; (800a5e0 <prvSwitchTimerLists+0xc0>)
 800a5d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5d2:	4a04      	ldr	r2, [pc, #16]	; (800a5e4 <prvSwitchTimerLists+0xc4>)
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	6013      	str	r3, [r2, #0]
}
 800a5d8:	bf00      	nop
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	20000e34 	.word	0x20000e34
 800a5e4:	20000e38 	.word	0x20000e38

0800a5e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5ee:	f000 f969 	bl	800a8c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5f2:	4b15      	ldr	r3, [pc, #84]	; (800a648 <prvCheckForValidListAndQueue+0x60>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d120      	bne.n	800a63c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5fa:	4814      	ldr	r0, [pc, #80]	; (800a64c <prvCheckForValidListAndQueue+0x64>)
 800a5fc:	f7fd fb42 	bl	8007c84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a600:	4813      	ldr	r0, [pc, #76]	; (800a650 <prvCheckForValidListAndQueue+0x68>)
 800a602:	f7fd fb3f 	bl	8007c84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a606:	4b13      	ldr	r3, [pc, #76]	; (800a654 <prvCheckForValidListAndQueue+0x6c>)
 800a608:	4a10      	ldr	r2, [pc, #64]	; (800a64c <prvCheckForValidListAndQueue+0x64>)
 800a60a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a60c:	4b12      	ldr	r3, [pc, #72]	; (800a658 <prvCheckForValidListAndQueue+0x70>)
 800a60e:	4a10      	ldr	r2, [pc, #64]	; (800a650 <prvCheckForValidListAndQueue+0x68>)
 800a610:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a612:	2300      	movs	r3, #0
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	4b11      	ldr	r3, [pc, #68]	; (800a65c <prvCheckForValidListAndQueue+0x74>)
 800a618:	4a11      	ldr	r2, [pc, #68]	; (800a660 <prvCheckForValidListAndQueue+0x78>)
 800a61a:	2110      	movs	r1, #16
 800a61c:	200a      	movs	r0, #10
 800a61e:	f7fd fc4d 	bl	8007ebc <xQueueGenericCreateStatic>
 800a622:	4603      	mov	r3, r0
 800a624:	4a08      	ldr	r2, [pc, #32]	; (800a648 <prvCheckForValidListAndQueue+0x60>)
 800a626:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a628:	4b07      	ldr	r3, [pc, #28]	; (800a648 <prvCheckForValidListAndQueue+0x60>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a630:	4b05      	ldr	r3, [pc, #20]	; (800a648 <prvCheckForValidListAndQueue+0x60>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	490b      	ldr	r1, [pc, #44]	; (800a664 <prvCheckForValidListAndQueue+0x7c>)
 800a636:	4618      	mov	r0, r3
 800a638:	f7fe fa7a 	bl	8008b30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a63c:	f000 f972 	bl	800a924 <vPortExitCritical>
}
 800a640:	bf00      	nop
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20000e3c 	.word	0x20000e3c
 800a64c:	20000e0c 	.word	0x20000e0c
 800a650:	20000e20 	.word	0x20000e20
 800a654:	20000e34 	.word	0x20000e34
 800a658:	20000e38 	.word	0x20000e38
 800a65c:	20000ee8 	.word	0x20000ee8
 800a660:	20000e48 	.word	0x20000e48
 800a664:	0800fe2c 	.word	0x0800fe2c

0800a668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	3b04      	subs	r3, #4
 800a678:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3b04      	subs	r3, #4
 800a686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	f023 0201 	bic.w	r2, r3, #1
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3b04      	subs	r3, #4
 800a696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a698:	4a0c      	ldr	r2, [pc, #48]	; (800a6cc <pxPortInitialiseStack+0x64>)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	3b14      	subs	r3, #20
 800a6a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	3b04      	subs	r3, #4
 800a6ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f06f 0202 	mvn.w	r2, #2
 800a6b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	3b20      	subs	r3, #32
 800a6bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6be:	68fb      	ldr	r3, [r7, #12]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	0800a6d1 	.word	0x0800a6d1

0800a6d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6da:	4b12      	ldr	r3, [pc, #72]	; (800a724 <prvTaskExitError+0x54>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e2:	d00a      	beq.n	800a6fa <prvTaskExitError+0x2a>
	__asm volatile
 800a6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	60fb      	str	r3, [r7, #12]
}
 800a6f6:	bf00      	nop
 800a6f8:	e7fe      	b.n	800a6f8 <prvTaskExitError+0x28>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	60bb      	str	r3, [r7, #8]
}
 800a70c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a70e:	bf00      	nop
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0fc      	beq.n	800a710 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a716:	bf00      	nop
 800a718:	bf00      	nop
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr
 800a724:	2000000c 	.word	0x2000000c
	...

0800a730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a730:	4b07      	ldr	r3, [pc, #28]	; (800a750 <pxCurrentTCBConst2>)
 800a732:	6819      	ldr	r1, [r3, #0]
 800a734:	6808      	ldr	r0, [r1, #0]
 800a736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73a:	f380 8809 	msr	PSP, r0
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f04f 0000 	mov.w	r0, #0
 800a746:	f380 8811 	msr	BASEPRI, r0
 800a74a:	4770      	bx	lr
 800a74c:	f3af 8000 	nop.w

0800a750 <pxCurrentTCBConst2>:
 800a750:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop

0800a758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a758:	4808      	ldr	r0, [pc, #32]	; (800a77c <prvPortStartFirstTask+0x24>)
 800a75a:	6800      	ldr	r0, [r0, #0]
 800a75c:	6800      	ldr	r0, [r0, #0]
 800a75e:	f380 8808 	msr	MSP, r0
 800a762:	f04f 0000 	mov.w	r0, #0
 800a766:	f380 8814 	msr	CONTROL, r0
 800a76a:	b662      	cpsie	i
 800a76c:	b661      	cpsie	f
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	df00      	svc	0
 800a778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a77a:	bf00      	nop
 800a77c:	e000ed08 	.word	0xe000ed08

0800a780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a786:	4b46      	ldr	r3, [pc, #280]	; (800a8a0 <xPortStartScheduler+0x120>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a46      	ldr	r2, [pc, #280]	; (800a8a4 <xPortStartScheduler+0x124>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d10a      	bne.n	800a7a6 <xPortStartScheduler+0x26>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	613b      	str	r3, [r7, #16]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7a6:	4b3e      	ldr	r3, [pc, #248]	; (800a8a0 <xPortStartScheduler+0x120>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a3f      	ldr	r2, [pc, #252]	; (800a8a8 <xPortStartScheduler+0x128>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d10a      	bne.n	800a7c6 <xPortStartScheduler+0x46>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	60fb      	str	r3, [r7, #12]
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7c6:	4b39      	ldr	r3, [pc, #228]	; (800a8ac <xPortStartScheduler+0x12c>)
 800a7c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	22ff      	movs	r2, #255	; 0xff
 800a7d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	4b31      	ldr	r3, [pc, #196]	; (800a8b0 <xPortStartScheduler+0x130>)
 800a7ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7ee:	4b31      	ldr	r3, [pc, #196]	; (800a8b4 <xPortStartScheduler+0x134>)
 800a7f0:	2207      	movs	r2, #7
 800a7f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7f4:	e009      	b.n	800a80a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a7f6:	4b2f      	ldr	r3, [pc, #188]	; (800a8b4 <xPortStartScheduler+0x134>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	4a2d      	ldr	r2, [pc, #180]	; (800a8b4 <xPortStartScheduler+0x134>)
 800a7fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a800:	78fb      	ldrb	r3, [r7, #3]
 800a802:	b2db      	uxtb	r3, r3
 800a804:	005b      	lsls	r3, r3, #1
 800a806:	b2db      	uxtb	r3, r3
 800a808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a80a:	78fb      	ldrb	r3, [r7, #3]
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a812:	2b80      	cmp	r3, #128	; 0x80
 800a814:	d0ef      	beq.n	800a7f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a816:	4b27      	ldr	r3, [pc, #156]	; (800a8b4 <xPortStartScheduler+0x134>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f1c3 0307 	rsb	r3, r3, #7
 800a81e:	2b04      	cmp	r3, #4
 800a820:	d00a      	beq.n	800a838 <xPortStartScheduler+0xb8>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	60bb      	str	r3, [r7, #8]
}
 800a834:	bf00      	nop
 800a836:	e7fe      	b.n	800a836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a838:	4b1e      	ldr	r3, [pc, #120]	; (800a8b4 <xPortStartScheduler+0x134>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	021b      	lsls	r3, r3, #8
 800a83e:	4a1d      	ldr	r2, [pc, #116]	; (800a8b4 <xPortStartScheduler+0x134>)
 800a840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a842:	4b1c      	ldr	r3, [pc, #112]	; (800a8b4 <xPortStartScheduler+0x134>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a84a:	4a1a      	ldr	r2, [pc, #104]	; (800a8b4 <xPortStartScheduler+0x134>)
 800a84c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	b2da      	uxtb	r2, r3
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a856:	4b18      	ldr	r3, [pc, #96]	; (800a8b8 <xPortStartScheduler+0x138>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a17      	ldr	r2, [pc, #92]	; (800a8b8 <xPortStartScheduler+0x138>)
 800a85c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a862:	4b15      	ldr	r3, [pc, #84]	; (800a8b8 <xPortStartScheduler+0x138>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a14      	ldr	r2, [pc, #80]	; (800a8b8 <xPortStartScheduler+0x138>)
 800a868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a86c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a86e:	f000 f8dd 	bl	800aa2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a872:	4b12      	ldr	r3, [pc, #72]	; (800a8bc <xPortStartScheduler+0x13c>)
 800a874:	2200      	movs	r2, #0
 800a876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a878:	f000 f8fc 	bl	800aa74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a87c:	4b10      	ldr	r3, [pc, #64]	; (800a8c0 <xPortStartScheduler+0x140>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a0f      	ldr	r2, [pc, #60]	; (800a8c0 <xPortStartScheduler+0x140>)
 800a882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a888:	f7ff ff66 	bl	800a758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a88c:	f7fe ff0c 	bl	80096a8 <vTaskSwitchContext>
	prvTaskExitError();
 800a890:	f7ff ff1e 	bl	800a6d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3718      	adds	r7, #24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	e000ed00 	.word	0xe000ed00
 800a8a4:	410fc271 	.word	0x410fc271
 800a8a8:	410fc270 	.word	0x410fc270
 800a8ac:	e000e400 	.word	0xe000e400
 800a8b0:	20000f38 	.word	0x20000f38
 800a8b4:	20000f3c 	.word	0x20000f3c
 800a8b8:	e000ed20 	.word	0xe000ed20
 800a8bc:	2000000c 	.word	0x2000000c
 800a8c0:	e000ef34 	.word	0xe000ef34

0800a8c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
	__asm volatile
 800a8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	607b      	str	r3, [r7, #4]
}
 800a8dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8de:	4b0f      	ldr	r3, [pc, #60]	; (800a91c <vPortEnterCritical+0x58>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	4a0d      	ldr	r2, [pc, #52]	; (800a91c <vPortEnterCritical+0x58>)
 800a8e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8e8:	4b0c      	ldr	r3, [pc, #48]	; (800a91c <vPortEnterCritical+0x58>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d10f      	bne.n	800a910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a8f0:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <vPortEnterCritical+0x5c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00a      	beq.n	800a910 <vPortEnterCritical+0x4c>
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	603b      	str	r3, [r7, #0]
}
 800a90c:	bf00      	nop
 800a90e:	e7fe      	b.n	800a90e <vPortEnterCritical+0x4a>
	}
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	2000000c 	.word	0x2000000c
 800a920:	e000ed04 	.word	0xe000ed04

0800a924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a92a:	4b12      	ldr	r3, [pc, #72]	; (800a974 <vPortExitCritical+0x50>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10a      	bne.n	800a948 <vPortExitCritical+0x24>
	__asm volatile
 800a932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	607b      	str	r3, [r7, #4]
}
 800a944:	bf00      	nop
 800a946:	e7fe      	b.n	800a946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a948:	4b0a      	ldr	r3, [pc, #40]	; (800a974 <vPortExitCritical+0x50>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3b01      	subs	r3, #1
 800a94e:	4a09      	ldr	r2, [pc, #36]	; (800a974 <vPortExitCritical+0x50>)
 800a950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a952:	4b08      	ldr	r3, [pc, #32]	; (800a974 <vPortExitCritical+0x50>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d105      	bne.n	800a966 <vPortExitCritical+0x42>
 800a95a:	2300      	movs	r3, #0
 800a95c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	f383 8811 	msr	BASEPRI, r3
}
 800a964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a966:	bf00      	nop
 800a968:	370c      	adds	r7, #12
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	2000000c 	.word	0x2000000c
	...

0800a980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a980:	f3ef 8009 	mrs	r0, PSP
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	4b15      	ldr	r3, [pc, #84]	; (800a9e0 <pxCurrentTCBConst>)
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	f01e 0f10 	tst.w	lr, #16
 800a990:	bf08      	it	eq
 800a992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99a:	6010      	str	r0, [r2, #0]
 800a99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9a4:	f380 8811 	msr	BASEPRI, r0
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f7fe fe7a 	bl	80096a8 <vTaskSwitchContext>
 800a9b4:	f04f 0000 	mov.w	r0, #0
 800a9b8:	f380 8811 	msr	BASEPRI, r0
 800a9bc:	bc09      	pop	{r0, r3}
 800a9be:	6819      	ldr	r1, [r3, #0]
 800a9c0:	6808      	ldr	r0, [r1, #0]
 800a9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c6:	f01e 0f10 	tst.w	lr, #16
 800a9ca:	bf08      	it	eq
 800a9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9d0:	f380 8809 	msr	PSP, r0
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	f3af 8000 	nop.w

0800a9e0 <pxCurrentTCBConst>:
 800a9e0:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9e4:	bf00      	nop
 800a9e6:	bf00      	nop

0800a9e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	607b      	str	r3, [r7, #4]
}
 800aa00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa02:	f7fe fd97 	bl	8009534 <xTaskIncrementTick>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d003      	beq.n	800aa14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa0c:	4b06      	ldr	r3, [pc, #24]	; (800aa28 <xPortSysTickHandler+0x40>)
 800aa0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	2300      	movs	r3, #0
 800aa16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	f383 8811 	msr	BASEPRI, r3
}
 800aa1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa20:	bf00      	nop
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	e000ed04 	.word	0xe000ed04

0800aa2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa30:	4b0b      	ldr	r3, [pc, #44]	; (800aa60 <vPortSetupTimerInterrupt+0x34>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa36:	4b0b      	ldr	r3, [pc, #44]	; (800aa64 <vPortSetupTimerInterrupt+0x38>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa3c:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <vPortSetupTimerInterrupt+0x3c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a0a      	ldr	r2, [pc, #40]	; (800aa6c <vPortSetupTimerInterrupt+0x40>)
 800aa42:	fba2 2303 	umull	r2, r3, r2, r3
 800aa46:	099b      	lsrs	r3, r3, #6
 800aa48:	4a09      	ldr	r2, [pc, #36]	; (800aa70 <vPortSetupTimerInterrupt+0x44>)
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa4e:	4b04      	ldr	r3, [pc, #16]	; (800aa60 <vPortSetupTimerInterrupt+0x34>)
 800aa50:	2207      	movs	r2, #7
 800aa52:	601a      	str	r2, [r3, #0]
}
 800aa54:	bf00      	nop
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	e000e010 	.word	0xe000e010
 800aa64:	e000e018 	.word	0xe000e018
 800aa68:	20000000 	.word	0x20000000
 800aa6c:	10624dd3 	.word	0x10624dd3
 800aa70:	e000e014 	.word	0xe000e014

0800aa74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa84 <vPortEnableVFP+0x10>
 800aa78:	6801      	ldr	r1, [r0, #0]
 800aa7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa7e:	6001      	str	r1, [r0, #0]
 800aa80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa82:	bf00      	nop
 800aa84:	e000ed88 	.word	0xe000ed88

0800aa88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa8e:	f3ef 8305 	mrs	r3, IPSR
 800aa92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b0f      	cmp	r3, #15
 800aa98:	d914      	bls.n	800aac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa9a:	4a17      	ldr	r2, [pc, #92]	; (800aaf8 <vPortValidateInterruptPriority+0x70>)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aaa4:	4b15      	ldr	r3, [pc, #84]	; (800aafc <vPortValidateInterruptPriority+0x74>)
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	7afa      	ldrb	r2, [r7, #11]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d20a      	bcs.n	800aac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	607b      	str	r3, [r7, #4]
}
 800aac0:	bf00      	nop
 800aac2:	e7fe      	b.n	800aac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aac4:	4b0e      	ldr	r3, [pc, #56]	; (800ab00 <vPortValidateInterruptPriority+0x78>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aacc:	4b0d      	ldr	r3, [pc, #52]	; (800ab04 <vPortValidateInterruptPriority+0x7c>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d90a      	bls.n	800aaea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	603b      	str	r3, [r7, #0]
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <vPortValidateInterruptPriority+0x60>
	}
 800aaea:	bf00      	nop
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	e000e3f0 	.word	0xe000e3f0
 800aafc:	20000f38 	.word	0x20000f38
 800ab00:	e000ed0c 	.word	0xe000ed0c
 800ab04:	20000f3c 	.word	0x20000f3c

0800ab08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08a      	sub	sp, #40	; 0x28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab10:	2300      	movs	r3, #0
 800ab12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab14:	f7fe fc40 	bl	8009398 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab18:	4b5b      	ldr	r3, [pc, #364]	; (800ac88 <pvPortMalloc+0x180>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d101      	bne.n	800ab24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab20:	f000 f920 	bl	800ad64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab24:	4b59      	ldr	r3, [pc, #356]	; (800ac8c <pvPortMalloc+0x184>)
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f040 8093 	bne.w	800ac58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d01d      	beq.n	800ab74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ab38:	2208      	movs	r2, #8
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f003 0307 	and.w	r3, r3, #7
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d014      	beq.n	800ab74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f023 0307 	bic.w	r3, r3, #7
 800ab50:	3308      	adds	r3, #8
 800ab52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00a      	beq.n	800ab74 <pvPortMalloc+0x6c>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	617b      	str	r3, [r7, #20]
}
 800ab70:	bf00      	nop
 800ab72:	e7fe      	b.n	800ab72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d06e      	beq.n	800ac58 <pvPortMalloc+0x150>
 800ab7a:	4b45      	ldr	r3, [pc, #276]	; (800ac90 <pvPortMalloc+0x188>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d869      	bhi.n	800ac58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab84:	4b43      	ldr	r3, [pc, #268]	; (800ac94 <pvPortMalloc+0x18c>)
 800ab86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab88:	4b42      	ldr	r3, [pc, #264]	; (800ac94 <pvPortMalloc+0x18c>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab8e:	e004      	b.n	800ab9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d903      	bls.n	800abac <pvPortMalloc+0xa4>
 800aba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1f1      	bne.n	800ab90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abac:	4b36      	ldr	r3, [pc, #216]	; (800ac88 <pvPortMalloc+0x180>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d050      	beq.n	800ac58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2208      	movs	r2, #8
 800abbc:	4413      	add	r3, r2
 800abbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	1ad2      	subs	r2, r2, r3
 800abd0:	2308      	movs	r3, #8
 800abd2:	005b      	lsls	r3, r3, #1
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d91f      	bls.n	800ac18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4413      	add	r3, r2
 800abde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	f003 0307 	and.w	r3, r3, #7
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00a      	beq.n	800ac00 <pvPortMalloc+0xf8>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	613b      	str	r3, [r7, #16]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	685a      	ldr	r2, [r3, #4]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	1ad2      	subs	r2, r2, r3
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac12:	69b8      	ldr	r0, [r7, #24]
 800ac14:	f000 f908 	bl	800ae28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac18:	4b1d      	ldr	r3, [pc, #116]	; (800ac90 <pvPortMalloc+0x188>)
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	4a1b      	ldr	r2, [pc, #108]	; (800ac90 <pvPortMalloc+0x188>)
 800ac24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac26:	4b1a      	ldr	r3, [pc, #104]	; (800ac90 <pvPortMalloc+0x188>)
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	4b1b      	ldr	r3, [pc, #108]	; (800ac98 <pvPortMalloc+0x190>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d203      	bcs.n	800ac3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac32:	4b17      	ldr	r3, [pc, #92]	; (800ac90 <pvPortMalloc+0x188>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a18      	ldr	r2, [pc, #96]	; (800ac98 <pvPortMalloc+0x190>)
 800ac38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	685a      	ldr	r2, [r3, #4]
 800ac3e:	4b13      	ldr	r3, [pc, #76]	; (800ac8c <pvPortMalloc+0x184>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	431a      	orrs	r2, r3
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac4e:	4b13      	ldr	r3, [pc, #76]	; (800ac9c <pvPortMalloc+0x194>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	3301      	adds	r3, #1
 800ac54:	4a11      	ldr	r2, [pc, #68]	; (800ac9c <pvPortMalloc+0x194>)
 800ac56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac58:	f7fe fbac 	bl	80093b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	f003 0307 	and.w	r3, r3, #7
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00a      	beq.n	800ac7c <pvPortMalloc+0x174>
	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	60fb      	str	r3, [r7, #12]
}
 800ac78:	bf00      	nop
 800ac7a:	e7fe      	b.n	800ac7a <pvPortMalloc+0x172>
	return pvReturn;
 800ac7c:	69fb      	ldr	r3, [r7, #28]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3728      	adds	r7, #40	; 0x28
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20004f48 	.word	0x20004f48
 800ac8c:	20004f5c 	.word	0x20004f5c
 800ac90:	20004f4c 	.word	0x20004f4c
 800ac94:	20004f40 	.word	0x20004f40
 800ac98:	20004f50 	.word	0x20004f50
 800ac9c:	20004f54 	.word	0x20004f54

0800aca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d04d      	beq.n	800ad4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acb2:	2308      	movs	r3, #8
 800acb4:	425b      	negs	r3, r3
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	4413      	add	r3, r2
 800acba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	4b24      	ldr	r3, [pc, #144]	; (800ad58 <vPortFree+0xb8>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4013      	ands	r3, r2
 800acca:	2b00      	cmp	r3, #0
 800accc:	d10a      	bne.n	800ace4 <vPortFree+0x44>
	__asm volatile
 800acce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	60fb      	str	r3, [r7, #12]
}
 800ace0:	bf00      	nop
 800ace2:	e7fe      	b.n	800ace2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00a      	beq.n	800ad02 <vPortFree+0x62>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	60bb      	str	r3, [r7, #8]
}
 800acfe:	bf00      	nop
 800ad00:	e7fe      	b.n	800ad00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	685a      	ldr	r2, [r3, #4]
 800ad06:	4b14      	ldr	r3, [pc, #80]	; (800ad58 <vPortFree+0xb8>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d01e      	beq.n	800ad4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d11a      	bne.n	800ad4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	4b0e      	ldr	r3, [pc, #56]	; (800ad58 <vPortFree+0xb8>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	43db      	mvns	r3, r3
 800ad22:	401a      	ands	r2, r3
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad28:	f7fe fb36 	bl	8009398 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	4b0a      	ldr	r3, [pc, #40]	; (800ad5c <vPortFree+0xbc>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4413      	add	r3, r2
 800ad36:	4a09      	ldr	r2, [pc, #36]	; (800ad5c <vPortFree+0xbc>)
 800ad38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad3a:	6938      	ldr	r0, [r7, #16]
 800ad3c:	f000 f874 	bl	800ae28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad40:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <vPortFree+0xc0>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3301      	adds	r3, #1
 800ad46:	4a06      	ldr	r2, [pc, #24]	; (800ad60 <vPortFree+0xc0>)
 800ad48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad4a:	f7fe fb33 	bl	80093b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad4e:	bf00      	nop
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20004f5c 	.word	0x20004f5c
 800ad5c:	20004f4c 	.word	0x20004f4c
 800ad60:	20004f58 	.word	0x20004f58

0800ad64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad70:	4b27      	ldr	r3, [pc, #156]	; (800ae10 <prvHeapInit+0xac>)
 800ad72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	f003 0307 	and.w	r3, r3, #7
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00c      	beq.n	800ad98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	3307      	adds	r3, #7
 800ad82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f023 0307 	bic.w	r3, r3, #7
 800ad8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	4a1f      	ldr	r2, [pc, #124]	; (800ae10 <prvHeapInit+0xac>)
 800ad94:	4413      	add	r3, r2
 800ad96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad9c:	4a1d      	ldr	r2, [pc, #116]	; (800ae14 <prvHeapInit+0xb0>)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ada2:	4b1c      	ldr	r3, [pc, #112]	; (800ae14 <prvHeapInit+0xb0>)
 800ada4:	2200      	movs	r2, #0
 800ada6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	4413      	add	r3, r2
 800adae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800adb0:	2208      	movs	r2, #8
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	1a9b      	subs	r3, r3, r2
 800adb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f023 0307 	bic.w	r3, r3, #7
 800adbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	4a15      	ldr	r2, [pc, #84]	; (800ae18 <prvHeapInit+0xb4>)
 800adc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800adc6:	4b14      	ldr	r3, [pc, #80]	; (800ae18 <prvHeapInit+0xb4>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2200      	movs	r2, #0
 800adcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adce:	4b12      	ldr	r3, [pc, #72]	; (800ae18 <prvHeapInit+0xb4>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2200      	movs	r2, #0
 800add4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	1ad2      	subs	r2, r2, r3
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ade4:	4b0c      	ldr	r3, [pc, #48]	; (800ae18 <prvHeapInit+0xb4>)
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	4a0a      	ldr	r2, [pc, #40]	; (800ae1c <prvHeapInit+0xb8>)
 800adf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	4a09      	ldr	r2, [pc, #36]	; (800ae20 <prvHeapInit+0xbc>)
 800adfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800adfc:	4b09      	ldr	r3, [pc, #36]	; (800ae24 <prvHeapInit+0xc0>)
 800adfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae02:	601a      	str	r2, [r3, #0]
}
 800ae04:	bf00      	nop
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	20000f40 	.word	0x20000f40
 800ae14:	20004f40 	.word	0x20004f40
 800ae18:	20004f48 	.word	0x20004f48
 800ae1c:	20004f50 	.word	0x20004f50
 800ae20:	20004f4c 	.word	0x20004f4c
 800ae24:	20004f5c 	.word	0x20004f5c

0800ae28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae30:	4b28      	ldr	r3, [pc, #160]	; (800aed4 <prvInsertBlockIntoFreeList+0xac>)
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	e002      	b.n	800ae3c <prvInsertBlockIntoFreeList+0x14>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	60fb      	str	r3, [r7, #12]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d8f7      	bhi.n	800ae36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	4413      	add	r3, r2
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d108      	bne.n	800ae6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	441a      	add	r2, r3
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	441a      	add	r2, r3
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d118      	bne.n	800aeb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	4b15      	ldr	r3, [pc, #84]	; (800aed8 <prvInsertBlockIntoFreeList+0xb0>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d00d      	beq.n	800aea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685a      	ldr	r2, [r3, #4]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	441a      	add	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	e008      	b.n	800aeb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aea6:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <prvInsertBlockIntoFreeList+0xb0>)
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	e003      	b.n	800aeb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d002      	beq.n	800aec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aec6:	bf00      	nop
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	20004f40 	.word	0x20004f40
 800aed8:	20004f48 	.word	0x20004f48

0800aedc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800aee4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800aee8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d013      	beq.n	800af1c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800aef4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800aef8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800aefc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00b      	beq.n	800af1c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800af04:	e000      	b.n	800af08 <ITM_SendChar+0x2c>
    {
      __NOP();
 800af06:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800af08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d0f9      	beq.n	800af06 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800af12:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	b2d2      	uxtb	r2, r2
 800af1a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800af1c:	687b      	ldr	r3, [r7, #4]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
	...

0800af2c <mutex_creation>:
void Debug_Task(void *argument);
const osThreadAttr_t debug_task_attr = { .name = "Debug Task", .priority =
		(osPriority_t) osPriorityLow, .stack_size = 300 * 4 };

/* These functions run before osKernelStart */
void mutex_creation() {
 800af2c:	b580      	push	{r7, lr}
 800af2e:	af00      	add	r7, sp, #0
	mutex_device_status_handle = osMutexNew(&mutex_device_status_attr);
 800af30:	4803      	ldr	r0, [pc, #12]	; (800af40 <mutex_creation+0x14>)
 800af32:	f7fc fd65 	bl	8007a00 <osMutexNew>
 800af36:	4603      	mov	r3, r0
 800af38:	4a02      	ldr	r2, [pc, #8]	; (800af44 <mutex_creation+0x18>)
 800af3a:	6013      	str	r3, [r2, #0]
}
 800af3c:	bf00      	nop
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	0800ff8c 	.word	0x0800ff8c
 800af44:	2000528c 	.word	0x2000528c

0800af48 <task_creation>:
void task_creation() {
 800af48:	b580      	push	{r7, lr}
 800af4a:	af00      	add	r7, sp, #0
	temperature_task_handle = osThreadNew(Temperature_Task, NULL,
 800af4c:	4a18      	ldr	r2, [pc, #96]	; (800afb0 <task_creation+0x68>)
 800af4e:	2100      	movs	r1, #0
 800af50:	4818      	ldr	r0, [pc, #96]	; (800afb4 <task_creation+0x6c>)
 800af52:	f7fc fc32 	bl	80077ba <osThreadNew>
 800af56:	4603      	mov	r3, r0
 800af58:	4a17      	ldr	r2, [pc, #92]	; (800afb8 <task_creation+0x70>)
 800af5a:	6013      	str	r3, [r2, #0]
			&temperature_task_attr);
	led_task_handle = osThreadNew(LED_Task, NULL, &led_task_attr);
 800af5c:	4a17      	ldr	r2, [pc, #92]	; (800afbc <task_creation+0x74>)
 800af5e:	2100      	movs	r1, #0
 800af60:	4817      	ldr	r0, [pc, #92]	; (800afc0 <task_creation+0x78>)
 800af62:	f7fc fc2a 	bl	80077ba <osThreadNew>
 800af66:	4603      	mov	r3, r0
 800af68:	4a16      	ldr	r2, [pc, #88]	; (800afc4 <task_creation+0x7c>)
 800af6a:	6013      	str	r3, [r2, #0]
	push_buttom_task_handle = osThreadNew(Push_Button_Task, NULL,
 800af6c:	4a16      	ldr	r2, [pc, #88]	; (800afc8 <task_creation+0x80>)
 800af6e:	2100      	movs	r1, #0
 800af70:	4816      	ldr	r0, [pc, #88]	; (800afcc <task_creation+0x84>)
 800af72:	f7fc fc22 	bl	80077ba <osThreadNew>
 800af76:	4603      	mov	r3, r0
 800af78:	4a15      	ldr	r2, [pc, #84]	; (800afd0 <task_creation+0x88>)
 800af7a:	6013      	str	r3, [r2, #0]
			&pb_task_attr);
	current_regulation_task_handle = osThreadNew(Current_Regulation_Task, NULL,
 800af7c:	4a15      	ldr	r2, [pc, #84]	; (800afd4 <task_creation+0x8c>)
 800af7e:	2100      	movs	r1, #0
 800af80:	4815      	ldr	r0, [pc, #84]	; (800afd8 <task_creation+0x90>)
 800af82:	f7fc fc1a 	bl	80077ba <osThreadNew>
 800af86:	4603      	mov	r3, r0
 800af88:	4a14      	ldr	r2, [pc, #80]	; (800afdc <task_creation+0x94>)
 800af8a:	6013      	str	r3, [r2, #0]
			&current_reg_task_attr);
	data_strem_task_handle = osThreadNew(Data_Stream_Task, NULL,
 800af8c:	4a14      	ldr	r2, [pc, #80]	; (800afe0 <task_creation+0x98>)
 800af8e:	2100      	movs	r1, #0
 800af90:	4814      	ldr	r0, [pc, #80]	; (800afe4 <task_creation+0x9c>)
 800af92:	f7fc fc12 	bl	80077ba <osThreadNew>
 800af96:	4603      	mov	r3, r0
 800af98:	4a13      	ldr	r2, [pc, #76]	; (800afe8 <task_creation+0xa0>)
 800af9a:	6013      	str	r3, [r2, #0]
			&data_stream_task_attr);
	debug_task_handle = osThreadNew(Debug_Task, NULL, &debug_task_attr);
 800af9c:	4a13      	ldr	r2, [pc, #76]	; (800afec <task_creation+0xa4>)
 800af9e:	2100      	movs	r1, #0
 800afa0:	4813      	ldr	r0, [pc, #76]	; (800aff0 <task_creation+0xa8>)
 800afa2:	f7fc fc0a 	bl	80077ba <osThreadNew>
 800afa6:	4603      	mov	r3, r0
 800afa8:	4a12      	ldr	r2, [pc, #72]	; (800aff4 <task_creation+0xac>)
 800afaa:	6013      	str	r3, [r2, #0]
}
 800afac:	bf00      	nop
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	0800ff9c 	.word	0x0800ff9c
 800afb4:	0800aff9 	.word	0x0800aff9
 800afb8:	2000525c 	.word	0x2000525c
 800afbc:	0800ffc0 	.word	0x0800ffc0
 800afc0:	0800b0b5 	.word	0x0800b0b5
 800afc4:	2000526c 	.word	0x2000526c
 800afc8:	0800ffe4 	.word	0x0800ffe4
 800afcc:	0800b10d 	.word	0x0800b10d
 800afd0:	20005264 	.word	0x20005264
 800afd4:	08010008 	.word	0x08010008
 800afd8:	0800b199 	.word	0x0800b199
 800afdc:	20005270 	.word	0x20005270
 800afe0:	0801002c 	.word	0x0801002c
 800afe4:	0800b3c9 	.word	0x0800b3c9
 800afe8:	20005260 	.word	0x20005260
 800afec:	08010050 	.word	0x08010050
 800aff0:	0800b4dd 	.word	0x0800b4dd
 800aff4:	20005268 	.word	0x20005268

0800aff8 <Temperature_Task>:
/*
 * The main function of Temperature_Task is to get the temperature reading
 * from the NTC thermistor and issue an over temperature warning if the
 * temperature is over MAX_TEMP_HYSTERESIS_H.
 */
void Temperature_Task(void *argument) {
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
	float temperature = 0;
 800b000:	f04f 0300 	mov.w	r3, #0
 800b004:	617b      	str	r3, [r7, #20]
	const float MAX_TEMP_HYSTERESIS_H = 75;
 800b006:	4b26      	ldr	r3, [pc, #152]	; (800b0a0 <Temperature_Task+0xa8>)
 800b008:	613b      	str	r3, [r7, #16]
	const float MAX_TEMP_HYSTERESIS_L = 60;
 800b00a:	4b26      	ldr	r3, [pc, #152]	; (800b0a4 <Temperature_Task+0xac>)
 800b00c:	60fb      	str	r3, [r7, #12]
	while (TRUE) {
		temperature = get_temperature();
 800b00e:	f000 faef 	bl	800b5f0 <get_temperature>
 800b012:	ed87 0a05 	vstr	s0, [r7, #20]
		device.temperature = temperature;
 800b016:	4a24      	ldr	r2, [pc, #144]	; (800b0a8 <Temperature_Task+0xb0>)
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	6013      	str	r3, [r2, #0]
		// TODO: What if measurement isn't correct, like ADC fail, sensor broken, etc.
		if (isnan(temperature) || temperature < -50 || temperature > 150) {
 800b01c:	ed97 7a05 	vldr	s14, [r7, #20]
 800b020:	edd7 7a05 	vldr	s15, [r7, #20]
 800b024:	eeb4 7a67 	vcmp.f32	s14, s15
 800b028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02c:	d611      	bvs.n	800b052 <Temperature_Task+0x5a>
 800b02e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b032:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800b0ac <Temperature_Task+0xb4>
 800b036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b03e:	d408      	bmi.n	800b052 <Temperature_Task+0x5a>
 800b040:	edd7 7a05 	vldr	s15, [r7, #20]
 800b044:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800b0b0 <Temperature_Task+0xb8>
 800b048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b050:	dd02      	ble.n	800b058 <Temperature_Task+0x60>
			device.error = 1;
 800b052:	4b15      	ldr	r3, [pc, #84]	; (800b0a8 <Temperature_Task+0xb0>)
 800b054:	2201      	movs	r2, #1
 800b056:	755a      	strb	r2, [r3, #21]
		}

		// Over temperature protection
		if (device.temperature > MAX_TEMP_HYSTERESIS_H) {
 800b058:	4b13      	ldr	r3, [pc, #76]	; (800b0a8 <Temperature_Task+0xb0>)
 800b05a:	edd3 7a00 	vldr	s15, [r3]
 800b05e:	ed97 7a04 	vldr	s14, [r7, #16]
 800b062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06a:	d502      	bpl.n	800b072 <Temperature_Task+0x7a>
			device.error_overtemp = 1;
 800b06c:	4b0e      	ldr	r3, [pc, #56]	; (800b0a8 <Temperature_Task+0xb0>)
 800b06e:	2201      	movs	r2, #1
 800b070:	759a      	strb	r2, [r3, #22]
		}
		if (device.error_overtemp
 800b072:	4b0d      	ldr	r3, [pc, #52]	; (800b0a8 <Temperature_Task+0xb0>)
 800b074:	7d9b      	ldrb	r3, [r3, #22]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00c      	beq.n	800b094 <Temperature_Task+0x9c>
				&& device.temperature < MAX_TEMP_HYSTERESIS_L) {
 800b07a:	4b0b      	ldr	r3, [pc, #44]	; (800b0a8 <Temperature_Task+0xb0>)
 800b07c:	edd3 7a00 	vldr	s15, [r3]
 800b080:	ed97 7a03 	vldr	s14, [r7, #12]
 800b084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b08c:	dd02      	ble.n	800b094 <Temperature_Task+0x9c>
			device.error_overtemp = 0;
 800b08e:	4b06      	ldr	r3, [pc, #24]	; (800b0a8 <Temperature_Task+0xb0>)
 800b090:	2200      	movs	r2, #0
 800b092:	759a      	strb	r2, [r3, #22]
		}

		osDelay(1000);
 800b094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b098:	f7fc fc6a 	bl	8007970 <osDelay>
		temperature = get_temperature();
 800b09c:	e7b7      	b.n	800b00e <Temperature_Task+0x16>
 800b09e:	bf00      	nop
 800b0a0:	42960000 	.word	0x42960000
 800b0a4:	42700000 	.word	0x42700000
 800b0a8:	20005274 	.word	0x20005274
 800b0ac:	c2480000 	.word	0xc2480000
 800b0b0:	43160000 	.word	0x43160000

0800b0b4 <LED_Task>:
	}
}

void LED_Task(void *argument) {
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
	while (TRUE) {
		if (device.error_overtemp || device.error) {
 800b0bc:	4b12      	ldr	r3, [pc, #72]	; (800b108 <LED_Task+0x54>)
 800b0be:	7d9b      	ldrb	r3, [r3, #22]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d103      	bne.n	800b0cc <LED_Task+0x18>
 800b0c4:	4b10      	ldr	r3, [pc, #64]	; (800b108 <LED_Task+0x54>)
 800b0c6:	7d5b      	ldrb	r3, [r3, #21]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00a      	beq.n	800b0e2 <LED_Task+0x2e>
			led_all_on();
 800b0cc:	f000 fce0 	bl	800ba90 <led_all_on>
			osDelay(250);
 800b0d0:	20fa      	movs	r0, #250	; 0xfa
 800b0d2:	f7fc fc4d 	bl	8007970 <osDelay>
			led_all_off();
 800b0d6:	f000 fd03 	bl	800bae0 <led_all_off>
			osDelay(250);
 800b0da:	20fa      	movs	r0, #250	; 0xfa
 800b0dc:	f7fc fc48 	bl	8007970 <osDelay>
 800b0e0:	e010      	b.n	800b104 <LED_Task+0x50>
		} else {
			if (device.device_start)
 800b0e2:	4b09      	ldr	r3, [pc, #36]	; (800b108 <LED_Task+0x54>)
 800b0e4:	7d1b      	ldrb	r3, [r3, #20]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d002      	beq.n	800b0f0 <LED_Task+0x3c>
				led_run_on();
 800b0ea:	f000 fd35 	bl	800bb58 <led_run_on>
 800b0ee:	e001      	b.n	800b0f4 <LED_Task+0x40>
			else
				led_run_off();
 800b0f0:	f000 fd3e 	bl	800bb70 <led_run_off>

			led_current_indication(device.tcurrent_index);
 800b0f4:	4b04      	ldr	r3, [pc, #16]	; (800b108 <LED_Task+0x54>)
 800b0f6:	7b1b      	ldrb	r3, [r3, #12]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 fd45 	bl	800bb88 <led_current_indication>

			osDelay(50);
 800b0fe:	2032      	movs	r0, #50	; 0x32
 800b100:	f7fc fc36 	bl	8007970 <osDelay>
		if (device.error_overtemp || device.error) {
 800b104:	e7da      	b.n	800b0bc <LED_Task+0x8>
 800b106:	bf00      	nop
 800b108:	20005274 	.word	0x20005274

0800b10c <Push_Button_Task>:
}

/*
 *
 */
void Push_Button_Task(void *argument) {
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
	while (TRUE) {

		// Wait for button ISR to unblock it
		osThreadSuspend(osThreadGetId());
 800b114:	f7fc fbe3 	bl	80078de <osThreadGetId>
 800b118:	4603      	mov	r3, r0
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fc fc07 	bl	800792e <osThreadSuspend>

		if (pb_a_pressed) {
 800b120:	4b19      	ldr	r3, [pc, #100]	; (800b188 <Push_Button_Task+0x7c>)
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d007      	beq.n	800b138 <Push_Button_Task+0x2c>
			pb_a_pressed = 0;
 800b128:	4b17      	ldr	r3, [pc, #92]	; (800b188 <Push_Button_Task+0x7c>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	701a      	strb	r2, [r3, #0]
			device.current_updated = 1;
 800b12e:	4b17      	ldr	r3, [pc, #92]	; (800b18c <Push_Button_Task+0x80>)
 800b130:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b134:	611a      	str	r2, [r3, #16]
 800b136:	e7ed      	b.n	800b114 <Push_Button_Task+0x8>
		} else if (pb_inc_pressed) {
 800b138:	4b15      	ldr	r3, [pc, #84]	; (800b190 <Push_Button_Task+0x84>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d011      	beq.n	800b164 <Push_Button_Task+0x58>
			pb_inc_pressed = 0;
 800b140:	4b13      	ldr	r3, [pc, #76]	; (800b190 <Push_Button_Task+0x84>)
 800b142:	2200      	movs	r2, #0
 800b144:	701a      	strb	r2, [r3, #0]
			if (device.tcurrent_index < 8)
 800b146:	4b11      	ldr	r3, [pc, #68]	; (800b18c <Push_Button_Task+0x80>)
 800b148:	7b1b      	ldrb	r3, [r3, #12]
 800b14a:	2b07      	cmp	r3, #7
 800b14c:	d806      	bhi.n	800b15c <Push_Button_Task+0x50>
				device.tcurrent_index++;
 800b14e:	4b0f      	ldr	r3, [pc, #60]	; (800b18c <Push_Button_Task+0x80>)
 800b150:	7b1b      	ldrb	r3, [r3, #12]
 800b152:	3301      	adds	r3, #1
 800b154:	b2da      	uxtb	r2, r3
 800b156:	4b0d      	ldr	r3, [pc, #52]	; (800b18c <Push_Button_Task+0x80>)
 800b158:	731a      	strb	r2, [r3, #12]
 800b15a:	e7db      	b.n	800b114 <Push_Button_Task+0x8>
			else
				device.tcurrent_index = 0;
 800b15c:	4b0b      	ldr	r3, [pc, #44]	; (800b18c <Push_Button_Task+0x80>)
 800b15e:	2200      	movs	r2, #0
 800b160:	731a      	strb	r2, [r3, #12]
 800b162:	e7d7      	b.n	800b114 <Push_Button_Task+0x8>
		} else if (pb_dec_pressed) {
 800b164:	4b0b      	ldr	r3, [pc, #44]	; (800b194 <Push_Button_Task+0x88>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d0d3      	beq.n	800b114 <Push_Button_Task+0x8>
			pb_dec_pressed = 0;
 800b16c:	4b09      	ldr	r3, [pc, #36]	; (800b194 <Push_Button_Task+0x88>)
 800b16e:	2200      	movs	r2, #0
 800b170:	701a      	strb	r2, [r3, #0]
			if (device.tcurrent_index > 0)
 800b172:	4b06      	ldr	r3, [pc, #24]	; (800b18c <Push_Button_Task+0x80>)
 800b174:	7b1b      	ldrb	r3, [r3, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0cc      	beq.n	800b114 <Push_Button_Task+0x8>
				device.tcurrent_index--;
 800b17a:	4b04      	ldr	r3, [pc, #16]	; (800b18c <Push_Button_Task+0x80>)
 800b17c:	7b1b      	ldrb	r3, [r3, #12]
 800b17e:	3b01      	subs	r3, #1
 800b180:	b2da      	uxtb	r2, r3
 800b182:	4b02      	ldr	r3, [pc, #8]	; (800b18c <Push_Button_Task+0x80>)
 800b184:	731a      	strb	r2, [r3, #12]
		osThreadSuspend(osThreadGetId());
 800b186:	e7c5      	b.n	800b114 <Push_Button_Task+0x8>
 800b188:	20004f60 	.word	0x20004f60
 800b18c:	20005274 	.word	0x20005274
 800b190:	20004f61 	.word	0x20004f61
 800b194:	20004f62 	.word	0x20004f62

0800b198 <Current_Regulation_Task>:
		}
	}
}

void Current_Regulation_Task(void *argument) {
 800b198:	b5b0      	push	{r4, r5, r7, lr}
 800b19a:	b08a      	sub	sp, #40	; 0x28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]

	float target_current = 0;
 800b1a0:	f04f 0300 	mov.w	r3, #0
 800b1a4:	627b      	str	r3, [r7, #36]	; 0x24
	float measured_voltage = 0;
 800b1a6:	f04f 0300 	mov.w	r3, #0
 800b1aa:	61fb      	str	r3, [r7, #28]
	float measured_current = 0;
 800b1ac:	f04f 0300 	mov.w	r3, #0
 800b1b0:	61bb      	str	r3, [r7, #24]
	float err = 0;
 800b1b2:	f04f 0300 	mov.w	r3, #0
 800b1b6:	617b      	str	r3, [r7, #20]
	float errI = 0;
 800b1b8:	f04f 0300 	mov.w	r3, #0
 800b1bc:	623b      	str	r3, [r7, #32]
	float errP = 0;
 800b1be:	f04f 0300 	mov.w	r3, #0
 800b1c2:	613b      	str	r3, [r7, #16]

	// Make sure the output is turned off when first start.
	set_dac_voltage(-1);
 800b1c4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800b1c8:	f000 fae2 	bl	800b790 <set_dac_voltage>

	while (TRUE) {

		uint32_t entry_tick = osKernelGetTickCount();
 800b1cc:	f7fc fae0 	bl	8007790 <osKernelGetTickCount>
 800b1d0:	60f8      	str	r0, [r7, #12]
		led_pc_on();
 800b1d2:	f000 fcad 	bl	800bb30 <led_pc_on>

		// Take measurements
		measured_voltage = get_voltage();
 800b1d6:	f000 fba3 	bl	800b920 <get_voltage>
 800b1da:	ed87 0a07 	vstr	s0, [r7, #28]
		measured_current = get_current();
 800b1de:	f000 fbfb 	bl	800b9d8 <get_current>
 800b1e2:	ed87 0a06 	vstr	s0, [r7, #24]
		device.voltage_measured = measured_voltage;
 800b1e6:	4a76      	ldr	r2, [pc, #472]	; (800b3c0 <Current_Regulation_Task+0x228>)
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	6053      	str	r3, [r2, #4]
		device.current_measured = measured_current;
 800b1ec:	4a74      	ldr	r2, [pc, #464]	; (800b3c0 <Current_Regulation_Task+0x228>)
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	6093      	str	r3, [r2, #8]

		// Turn the DAC off if there is an error.
		if (device.error || device.error_overtemp) {
 800b1f2:	4b73      	ldr	r3, [pc, #460]	; (800b3c0 <Current_Regulation_Task+0x228>)
 800b1f4:	7d5b      	ldrb	r3, [r3, #21]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d103      	bne.n	800b202 <Current_Regulation_Task+0x6a>
 800b1fa:	4b71      	ldr	r3, [pc, #452]	; (800b3c0 <Current_Regulation_Task+0x228>)
 800b1fc:	7d9b      	ldrb	r3, [r3, #22]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d004      	beq.n	800b20c <Current_Regulation_Task+0x74>
			set_dac_voltage(-1);
 800b202:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800b206:	f000 fac3 	bl	800b790 <set_dac_voltage>
 800b20a:	e0c4      	b.n	800b396 <Current_Regulation_Task+0x1fe>
		}
		// If no error, go ahead to set the current
		else {

			if (device.current_updated) {
 800b20c:	4b6c      	ldr	r3, [pc, #432]	; (800b3c0 <Current_Regulation_Task+0x228>)
 800b20e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b212:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b21a:	d02a      	beq.n	800b272 <Current_Regulation_Task+0xda>
				device.current_updated = 0;
 800b21c:	4b68      	ldr	r3, [pc, #416]	; (800b3c0 <Current_Regulation_Task+0x228>)
 800b21e:	f04f 0200 	mov.w	r2, #0
 800b222:	611a      	str	r2, [r3, #16]
				if (target_current == current_list[device.tcurrent_index]) {
 800b224:	4b66      	ldr	r3, [pc, #408]	; (800b3c0 <Current_Regulation_Task+0x228>)
 800b226:	7b1b      	ldrb	r3, [r3, #12]
 800b228:	4a66      	ldr	r2, [pc, #408]	; (800b3c4 <Current_Regulation_Task+0x22c>)
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	edd3 7a00 	vldr	s15, [r3]
 800b232:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b236:	eeb4 7a67 	vcmp.f32	s14, s15
 800b23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23e:	d106      	bne.n	800b24e <Current_Regulation_Task+0xb6>
					target_current = 0;
 800b240:	f04f 0300 	mov.w	r3, #0
 800b244:	627b      	str	r3, [r7, #36]	; 0x24
					device.device_start = 0;
 800b246:	4b5e      	ldr	r3, [pc, #376]	; (800b3c0 <Current_Regulation_Task+0x228>)
 800b248:	2200      	movs	r2, #0
 800b24a:	751a      	strb	r2, [r3, #20]
 800b24c:	e009      	b.n	800b262 <Current_Regulation_Task+0xca>
				} else {
					target_current = current_list[device.tcurrent_index];
 800b24e:	4b5c      	ldr	r3, [pc, #368]	; (800b3c0 <Current_Regulation_Task+0x228>)
 800b250:	7b1b      	ldrb	r3, [r3, #12]
 800b252:	4a5c      	ldr	r2, [pc, #368]	; (800b3c4 <Current_Regulation_Task+0x22c>)
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	4413      	add	r3, r2
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	627b      	str	r3, [r7, #36]	; 0x24
					device.device_start = 1;
 800b25c:	4b58      	ldr	r3, [pc, #352]	; (800b3c0 <Current_Regulation_Task+0x228>)
 800b25e:	2201      	movs	r2, #1
 800b260:	751a      	strb	r2, [r3, #20]
				}
				errI = 0;
 800b262:	f04f 0300 	mov.w	r3, #0
 800b266:	623b      	str	r3, [r7, #32]
				set_dac_voltage(target_current);
 800b268:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800b26c:	f000 fa90 	bl	800b790 <set_dac_voltage>
 800b270:	e091      	b.n	800b396 <Current_Regulation_Task+0x1fe>
			} else {

				err = target_current - measured_current;
 800b272:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b276:	edd7 7a06 	vldr	s15, [r7, #24]
 800b27a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b27e:	edc7 7a05 	vstr	s15, [r7, #20]
				errP = err * 0.2;
 800b282:	6978      	ldr	r0, [r7, #20]
 800b284:	f7f5 f988 	bl	8000598 <__aeabi_f2d>
 800b288:	a347      	add	r3, pc, #284	; (adr r3, 800b3a8 <Current_Regulation_Task+0x210>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f5 f9db 	bl	8000648 <__aeabi_dmul>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	4610      	mov	r0, r2
 800b298:	4619      	mov	r1, r3
 800b29a:	f7f5 fccd 	bl	8000c38 <__aeabi_d2f>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	613b      	str	r3, [r7, #16]
				errI += err * 0.15;
 800b2a2:	6a38      	ldr	r0, [r7, #32]
 800b2a4:	f7f5 f978 	bl	8000598 <__aeabi_f2d>
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	460d      	mov	r5, r1
 800b2ac:	6978      	ldr	r0, [r7, #20]
 800b2ae:	f7f5 f973 	bl	8000598 <__aeabi_f2d>
 800b2b2:	a33f      	add	r3, pc, #252	; (adr r3, 800b3b0 <Current_Regulation_Task+0x218>)
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	f7f5 f9c6 	bl	8000648 <__aeabi_dmul>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	f7f5 f80a 	bl	80002dc <__adddf3>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	f7f5 fcb2 	bl	8000c38 <__aeabi_d2f>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	623b      	str	r3, [r7, #32]
				if (errI > target_current * 0.15) {
 800b2d8:	6a38      	ldr	r0, [r7, #32]
 800b2da:	f7f5 f95d 	bl	8000598 <__aeabi_f2d>
 800b2de:	4604      	mov	r4, r0
 800b2e0:	460d      	mov	r5, r1
 800b2e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2e4:	f7f5 f958 	bl	8000598 <__aeabi_f2d>
 800b2e8:	a331      	add	r3, pc, #196	; (adr r3, 800b3b0 <Current_Regulation_Task+0x218>)
 800b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ee:	f7f5 f9ab 	bl	8000648 <__aeabi_dmul>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	f7f5 fc35 	bl	8000b68 <__aeabi_dcmpgt>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d010      	beq.n	800b326 <Current_Regulation_Task+0x18e>
					errI = target_current * 0.15;
 800b304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b306:	f7f5 f947 	bl	8000598 <__aeabi_f2d>
 800b30a:	a329      	add	r3, pc, #164	; (adr r3, 800b3b0 <Current_Regulation_Task+0x218>)
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	f7f5 f99a 	bl	8000648 <__aeabi_dmul>
 800b314:	4602      	mov	r2, r0
 800b316:	460b      	mov	r3, r1
 800b318:	4610      	mov	r0, r2
 800b31a:	4619      	mov	r1, r3
 800b31c:	f7f5 fc8c 	bl	8000c38 <__aeabi_d2f>
 800b320:	4603      	mov	r3, r0
 800b322:	623b      	str	r3, [r7, #32]
 800b324:	e025      	b.n	800b372 <Current_Regulation_Task+0x1da>
				} else if (errI < target_current * -0.15) {
 800b326:	6a38      	ldr	r0, [r7, #32]
 800b328:	f7f5 f936 	bl	8000598 <__aeabi_f2d>
 800b32c:	4604      	mov	r4, r0
 800b32e:	460d      	mov	r5, r1
 800b330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b332:	f7f5 f931 	bl	8000598 <__aeabi_f2d>
 800b336:	a320      	add	r3, pc, #128	; (adr r3, 800b3b8 <Current_Regulation_Task+0x220>)
 800b338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33c:	f7f5 f984 	bl	8000648 <__aeabi_dmul>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	4620      	mov	r0, r4
 800b346:	4629      	mov	r1, r5
 800b348:	f7f5 fbf0 	bl	8000b2c <__aeabi_dcmplt>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00f      	beq.n	800b372 <Current_Regulation_Task+0x1da>
					errI = target_current * -0.15;
 800b352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b354:	f7f5 f920 	bl	8000598 <__aeabi_f2d>
 800b358:	a317      	add	r3, pc, #92	; (adr r3, 800b3b8 <Current_Regulation_Task+0x220>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f7f5 f973 	bl	8000648 <__aeabi_dmul>
 800b362:	4602      	mov	r2, r0
 800b364:	460b      	mov	r3, r1
 800b366:	4610      	mov	r0, r2
 800b368:	4619      	mov	r1, r3
 800b36a:	f7f5 fc65 	bl	8000c38 <__aeabi_d2f>
 800b36e:	4603      	mov	r3, r0
 800b370:	623b      	str	r3, [r7, #32]
				}
				err = errP + errI;
 800b372:	ed97 7a04 	vldr	s14, [r7, #16]
 800b376:	edd7 7a08 	vldr	s15, [r7, #32]
 800b37a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b37e:	edc7 7a05 	vstr	s15, [r7, #20]
				set_dac_voltage(target_current + err);
 800b382:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b386:	edd7 7a05 	vldr	s15, [r7, #20]
 800b38a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b38e:	eeb0 0a67 	vmov.f32	s0, s15
 800b392:	f000 f9fd 	bl	800b790 <set_dac_voltage>

			}

		}

		led_pc_off();
 800b396:	f000 fbd5 	bl	800bb44 <led_pc_off>
		osDelayUntil(entry_tick + 200);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	33c8      	adds	r3, #200	; 0xc8
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fc fb01 	bl	80079a6 <osDelayUntil>
	while (TRUE) {
 800b3a4:	e712      	b.n	800b1cc <Current_Regulation_Task+0x34>
 800b3a6:	bf00      	nop
 800b3a8:	9999999a 	.word	0x9999999a
 800b3ac:	3fc99999 	.word	0x3fc99999
 800b3b0:	33333333 	.word	0x33333333
 800b3b4:	3fc33333 	.word	0x3fc33333
 800b3b8:	33333333 	.word	0x33333333
 800b3bc:	bfc33333 	.word	0xbfc33333
 800b3c0:	20005274 	.word	0x20005274
 800b3c4:	20000010 	.word	0x20000010

0800b3c8 <Data_Stream_Task>:
	}
}

void Data_Stream_Task(void *argument) {
 800b3c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b3cc:	b08e      	sub	sp, #56	; 0x38
 800b3ce:	af04      	add	r7, sp, #16
 800b3d0:	6078      	str	r0, [r7, #4]
	struct Device d;
	static char txbuffer[80];
	uint32_t txbuffer_size = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	627b      	str	r3, [r7, #36]	; 0x24
	// Opening message
	txbuffer_size = sprintf(txbuffer,
 800b3d6:	4927      	ldr	r1, [pc, #156]	; (800b474 <Data_Stream_Task+0xac>)
 800b3d8:	4827      	ldr	r0, [pc, #156]	; (800b478 <Data_Stream_Task+0xb0>)
 800b3da:	f001 f935 	bl	800c648 <siprintf>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	627b      	str	r3, [r7, #36]	; 0x24
			"Time (s), Voltage (V), Load Current (I), Temperature (degC)\n");
	uart_transmit_dma((uint8_t*) txbuffer, txbuffer_size);
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4823      	ldr	r0, [pc, #140]	; (800b478 <Data_Stream_Task+0xb0>)
 800b3ea:	f000 f8e3 	bl	800b5b4 <uart_transmit_dma>
	osDelay(5);
 800b3ee:	2005      	movs	r0, #5
 800b3f0:	f7fc fabe 	bl	8007970 <osDelay>
	while (TRUE) {
		osMutexAcquire(mutex_device_status_handle, osWaitForever);
 800b3f4:	4b21      	ldr	r3, [pc, #132]	; (800b47c <Data_Stream_Task+0xb4>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f04f 31ff 	mov.w	r1, #4294967295
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fc fb85 	bl	8007b0c <osMutexAcquire>
		d = device;
 800b402:	4b1f      	ldr	r3, [pc, #124]	; (800b480 <Data_Stream_Task+0xb8>)
 800b404:	f107 040c 	add.w	r4, r7, #12
 800b408:	461d      	mov	r5, r3
 800b40a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b40c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b40e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b412:	e884 0003 	stmia.w	r4, {r0, r1}
		osMutexRelease(mutex_device_status_handle);
 800b416:	4b19      	ldr	r3, [pc, #100]	; (800b47c <Data_Stream_Task+0xb4>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fc fbc1 	bl	8007ba2 <osMutexRelease>

		txbuffer_size = sprintf(txbuffer, "%0.3f, %0.3f, %0.1f\n",
				d.voltage_measured, d.current_measured, d.temperature);
 800b420:	693b      	ldr	r3, [r7, #16]
		txbuffer_size = sprintf(txbuffer, "%0.3f, %0.3f, %0.1f\n",
 800b422:	4618      	mov	r0, r3
 800b424:	f7f5 f8b8 	bl	8000598 <__aeabi_f2d>
 800b428:	4680      	mov	r8, r0
 800b42a:	4689      	mov	r9, r1
				d.voltage_measured, d.current_measured, d.temperature);
 800b42c:	697b      	ldr	r3, [r7, #20]
		txbuffer_size = sprintf(txbuffer, "%0.3f, %0.3f, %0.1f\n",
 800b42e:	4618      	mov	r0, r3
 800b430:	f7f5 f8b2 	bl	8000598 <__aeabi_f2d>
 800b434:	4604      	mov	r4, r0
 800b436:	460d      	mov	r5, r1
				d.voltage_measured, d.current_measured, d.temperature);
 800b438:	68fb      	ldr	r3, [r7, #12]
		txbuffer_size = sprintf(txbuffer, "%0.3f, %0.3f, %0.1f\n",
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7f5 f8ac 	bl	8000598 <__aeabi_f2d>
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b448:	e9cd 4500 	strd	r4, r5, [sp]
 800b44c:	4642      	mov	r2, r8
 800b44e:	464b      	mov	r3, r9
 800b450:	490c      	ldr	r1, [pc, #48]	; (800b484 <Data_Stream_Task+0xbc>)
 800b452:	4809      	ldr	r0, [pc, #36]	; (800b478 <Data_Stream_Task+0xb0>)
 800b454:	f001 f8f8 	bl	800c648 <siprintf>
 800b458:	4603      	mov	r3, r0
 800b45a:	627b      	str	r3, [r7, #36]	; 0x24
		uart_transmit_dma((uint8_t*) txbuffer, txbuffer_size);
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	b29b      	uxth	r3, r3
 800b460:	4619      	mov	r1, r3
 800b462:	4805      	ldr	r0, [pc, #20]	; (800b478 <Data_Stream_Task+0xb0>)
 800b464:	f000 f8a6 	bl	800b5b4 <uart_transmit_dma>

		osDelay(1000);
 800b468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b46c:	f7fc fa80 	bl	8007970 <osDelay>
		osMutexAcquire(mutex_device_status_handle, osWaitForever);
 800b470:	e7c0      	b.n	800b3f4 <Data_Stream_Task+0x2c>
 800b472:	bf00      	nop
 800b474:	0800feb4 	.word	0x0800feb4
 800b478:	20004f64 	.word	0x20004f64
 800b47c:	2000528c 	.word	0x2000528c
 800b480:	20005274 	.word	0x20005274
 800b484:	0800fef4 	.word	0x0800fef4

0800b488 <debug_message>:

	}
}

/* This section is for Debug Task and its helper functions */
static void debug_message(const char *tname, uint32_t watermark) {
 800b488:	b580      	push	{r7, lr}
 800b48a:	b098      	sub	sp, #96	; 0x60
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
	char txbuffer[80];
	uint32_t txbuffer_size = 0;
 800b492:	2300      	movs	r3, #0
 800b494:	65bb      	str	r3, [r7, #88]	; 0x58
	txbuffer_size = sprintf(txbuffer, "%s stack remains %u bytes\n", tname,
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	f107 0008 	add.w	r0, r7, #8
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	490e      	ldr	r1, [pc, #56]	; (800b4d8 <debug_message+0x50>)
 800b4a0:	f001 f8d2 	bl	800c648 <siprintf>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	65bb      	str	r3, [r7, #88]	; 0x58
			(int) watermark);
	for (int i = 0; i < txbuffer_size; i++) {
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4ac:	e00a      	b.n	800b4c4 <debug_message+0x3c>
		ITM_SendChar((uint8_t) txbuffer[i]);
 800b4ae:	f107 0208 	add.w	r2, r7, #8
 800b4b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4b4:	4413      	add	r3, r2
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff fd0f 	bl	800aedc <ITM_SendChar>
	for (int i = 0; i < txbuffer_size; i++) {
 800b4be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d8f0      	bhi.n	800b4ae <debug_message+0x26>
	}
}
 800b4cc:	bf00      	nop
 800b4ce:	bf00      	nop
 800b4d0:	3760      	adds	r7, #96	; 0x60
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	0800ff0c 	.word	0x0800ff0c

0800b4dc <Debug_Task>:

void Debug_Task(void *argument) {
 800b4dc:	b590      	push	{r4, r7, lr}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	while (TRUE) {
		uint32_t entry_tick = osKernelGetTickCount();
 800b4e4:	f7fc f954 	bl	8007790 <osKernelGetTickCount>
 800b4e8:	60f8      	str	r0, [r7, #12]

		debug_message(debug_task_attr.name,
 800b4ea:	4c26      	ldr	r4, [pc, #152]	; (800b584 <Debug_Task+0xa8>)
 800b4ec:	4b26      	ldr	r3, [pc, #152]	; (800b588 <Debug_Task+0xac>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7fc f9ff 	bl	80078f4 <osThreadGetStackSpace>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f7ff ffc4 	bl	800b488 <debug_message>
				osThreadGetStackSpace(debug_task_handle));
		debug_message(temperature_task_attr.name,
 800b500:	4c22      	ldr	r4, [pc, #136]	; (800b58c <Debug_Task+0xb0>)
 800b502:	4b23      	ldr	r3, [pc, #140]	; (800b590 <Debug_Task+0xb4>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4618      	mov	r0, r3
 800b508:	f7fc f9f4 	bl	80078f4 <osThreadGetStackSpace>
 800b50c:	4603      	mov	r3, r0
 800b50e:	4619      	mov	r1, r3
 800b510:	4620      	mov	r0, r4
 800b512:	f7ff ffb9 	bl	800b488 <debug_message>
				osThreadGetStackSpace(temperature_task_handle));
		debug_message(led_task_attr.name,
 800b516:	4c1f      	ldr	r4, [pc, #124]	; (800b594 <Debug_Task+0xb8>)
 800b518:	4b1f      	ldr	r3, [pc, #124]	; (800b598 <Debug_Task+0xbc>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fc f9e9 	bl	80078f4 <osThreadGetStackSpace>
 800b522:	4603      	mov	r3, r0
 800b524:	4619      	mov	r1, r3
 800b526:	4620      	mov	r0, r4
 800b528:	f7ff ffae 	bl	800b488 <debug_message>
				osThreadGetStackSpace(led_task_handle));
		debug_message(pb_task_attr.name,
 800b52c:	4c1b      	ldr	r4, [pc, #108]	; (800b59c <Debug_Task+0xc0>)
 800b52e:	4b1c      	ldr	r3, [pc, #112]	; (800b5a0 <Debug_Task+0xc4>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4618      	mov	r0, r3
 800b534:	f7fc f9de 	bl	80078f4 <osThreadGetStackSpace>
 800b538:	4603      	mov	r3, r0
 800b53a:	4619      	mov	r1, r3
 800b53c:	4620      	mov	r0, r4
 800b53e:	f7ff ffa3 	bl	800b488 <debug_message>
				osThreadGetStackSpace(push_buttom_task_handle));
		debug_message(data_stream_task_attr.name,
 800b542:	4c18      	ldr	r4, [pc, #96]	; (800b5a4 <Debug_Task+0xc8>)
 800b544:	4b18      	ldr	r3, [pc, #96]	; (800b5a8 <Debug_Task+0xcc>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4618      	mov	r0, r3
 800b54a:	f7fc f9d3 	bl	80078f4 <osThreadGetStackSpace>
 800b54e:	4603      	mov	r3, r0
 800b550:	4619      	mov	r1, r3
 800b552:	4620      	mov	r0, r4
 800b554:	f7ff ff98 	bl	800b488 <debug_message>
				osThreadGetStackSpace(data_strem_task_handle));
		debug_message(current_reg_task_attr.name,
 800b558:	4c14      	ldr	r4, [pc, #80]	; (800b5ac <Debug_Task+0xd0>)
 800b55a:	4b15      	ldr	r3, [pc, #84]	; (800b5b0 <Debug_Task+0xd4>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fc f9c8 	bl	80078f4 <osThreadGetStackSpace>
 800b564:	4603      	mov	r3, r0
 800b566:	4619      	mov	r1, r3
 800b568:	4620      	mov	r0, r4
 800b56a:	f7ff ff8d 	bl	800b488 <debug_message>
				osThreadGetStackSpace(current_regulation_task_handle));
		ITM_SendChar('\n');
 800b56e:	200a      	movs	r0, #10
 800b570:	f7ff fcb4 	bl	800aedc <ITM_SendChar>

		osDelayUntil(entry_tick + 5000);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b57a:	3308      	adds	r3, #8
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fc fa12 	bl	80079a6 <osDelayUntil>
	while (TRUE) {
 800b582:	e7af      	b.n	800b4e4 <Debug_Task+0x8>
 800b584:	0800fea8 	.word	0x0800fea8
 800b588:	20005268 	.word	0x20005268
 800b58c:	0800fe48 	.word	0x0800fe48
 800b590:	2000525c 	.word	0x2000525c
 800b594:	0800fe5c 	.word	0x0800fe5c
 800b598:	2000526c 	.word	0x2000526c
 800b59c:	0800fe68 	.word	0x0800fe68
 800b5a0:	20005264 	.word	0x20005264
 800b5a4:	0800fe94 	.word	0x0800fe94
 800b5a8:	20005260 	.word	0x20005260
 800b5ac:	0800fe7c 	.word	0x0800fe7c
 800b5b0:	20005270 	.word	0x20005270

0800b5b4 <uart_transmit_dma>:
extern I2C_HandleTypeDef 	hi2c3;
extern SPI_HandleTypeDef 	hspi2;

// Transmit data using UART DMA.
int uart_transmit_dma(uint8_t *pBuffer, uint16_t buffer_size)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	73fb      	strb	r3, [r7, #15]
//
//	if (time - time_last > 50) {
//		time_last = time;
//		status = HAL_UART_Transmit_DMA(&hlpuart1, pBuffer, buffer_size);
//	}
	status = HAL_UART_Transmit_DMA(&hlpuart1, pBuffer, buffer_size);
 800b5c4:	887b      	ldrh	r3, [r7, #2]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	6879      	ldr	r1, [r7, #4]
 800b5ca:	4807      	ldr	r0, [pc, #28]	; (800b5e8 <uart_transmit_dma+0x34>)
 800b5cc:	f7fa ff50 	bl	8006470 <HAL_UART_Transmit_DMA>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d000      	beq.n	800b5dc <uart_transmit_dma+0x28>
		__NOP();
 800b5da:	bf00      	nop
	}

	return status;
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]

}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	20005070 	.word	0x20005070
 800b5ec:	00000000 	.word	0x00000000

0800b5f0 <get_temperature>:
// Read the temperature from temperature sensor (NTC).
// The return value should be within -20 to 150 degC, any
// values outside this range should be consider error.
// It might be broken sensor or ADC reading failed.
float get_temperature()
{
 800b5f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b5f4:	b084      	sub	sp, #16
 800b5f6:	af00      	add	r7, sp, #0
	float ret = -99; 	/* Default error code */
 800b5f8:	4b5d      	ldr	r3, [pc, #372]	; (800b770 <get_temperature+0x180>)
 800b5fa:	60fb      	str	r3, [r7, #12]
	uint16_t raw;
	float adc_volt = 0;
 800b5fc:	f04f 0300 	mov.w	r3, #0
 800b600:	60bb      	str	r3, [r7, #8]
	float sensor_res = 0;
 800b602:	f04f 0300 	mov.w	r3, #0
 800b606:	607b      	str	r3, [r7, #4]
	static const float C = 0.1053;
	static const int RESBOT = 2000;
	static const float TO_VOLT = 3.3 / (4096 - 1);

	// Get ADC raw reading
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 800b608:	485a      	ldr	r0, [pc, #360]	; (800b774 <get_temperature+0x184>)
 800b60a:	f7f6 fe9f 	bl	800234c <HAL_ADC_Start>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d001      	beq.n	800b618 <get_temperature+0x28>
		return -99;
 800b614:	4b56      	ldr	r3, [pc, #344]	; (800b770 <get_temperature+0x180>)
 800b616:	e09a      	b.n	800b74e <get_temperature+0x15e>
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 800b618:	f04f 31ff 	mov.w	r1, #4294967295
 800b61c:	4855      	ldr	r0, [pc, #340]	; (800b774 <get_temperature+0x184>)
 800b61e:	f7f6 ff51 	bl	80024c4 <HAL_ADC_PollForConversion>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d001      	beq.n	800b62c <get_temperature+0x3c>
		return -99;
 800b628:	4b51      	ldr	r3, [pc, #324]	; (800b770 <get_temperature+0x180>)
 800b62a:	e090      	b.n	800b74e <get_temperature+0x15e>
	raw = HAL_ADC_GetValue(&hadc1);
 800b62c:	4851      	ldr	r0, [pc, #324]	; (800b774 <get_temperature+0x184>)
 800b62e:	f7f7 f821 	bl	8002674 <HAL_ADC_GetValue>
 800b632:	4603      	mov	r3, r0
 800b634:	807b      	strh	r3, [r7, #2]

	// Convert the raw reading to temperature (degC).
	adc_volt = raw * TO_VOLT;
 800b636:	887b      	ldrh	r3, [r7, #2]
 800b638:	ee07 3a90 	vmov	s15, r3
 800b63c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b640:	4b4d      	ldr	r3, [pc, #308]	; (800b778 <get_temperature+0x188>)
 800b642:	edd3 7a00 	vldr	s15, [r3]
 800b646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b64a:	edc7 7a02 	vstr	s15, [r7, #8]
	sensor_res = RESBOT * (3.3 / adc_volt - 1);
 800b64e:	4b4b      	ldr	r3, [pc, #300]	; (800b77c <get_temperature+0x18c>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4618      	mov	r0, r3
 800b654:	f7f4 ff8e 	bl	8000574 <__aeabi_i2d>
 800b658:	4604      	mov	r4, r0
 800b65a:	460d      	mov	r5, r1
 800b65c:	68b8      	ldr	r0, [r7, #8]
 800b65e:	f7f4 ff9b 	bl	8000598 <__aeabi_f2d>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	a13e      	add	r1, pc, #248	; (adr r1, 800b760 <get_temperature+0x170>)
 800b668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b66c:	f7f5 f916 	bl	800089c <__aeabi_ddiv>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	4610      	mov	r0, r2
 800b676:	4619      	mov	r1, r3
 800b678:	f04f 0200 	mov.w	r2, #0
 800b67c:	4b40      	ldr	r3, [pc, #256]	; (800b780 <get_temperature+0x190>)
 800b67e:	f7f4 fe2b 	bl	80002d8 <__aeabi_dsub>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	4620      	mov	r0, r4
 800b688:	4629      	mov	r1, r5
 800b68a:	f7f4 ffdd 	bl	8000648 <__aeabi_dmul>
 800b68e:	4602      	mov	r2, r0
 800b690:	460b      	mov	r3, r1
 800b692:	4610      	mov	r0, r2
 800b694:	4619      	mov	r1, r3
 800b696:	f7f5 facf 	bl	8000c38 <__aeabi_d2f>
 800b69a:	4603      	mov	r3, r0
 800b69c:	607b      	str	r3, [r7, #4]
	ret = A + B * log(sensor_res) + C * pow(log(sensor_res), 3);
 800b69e:	4b39      	ldr	r3, [pc, #228]	; (800b784 <get_temperature+0x194>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7f4 ff78 	bl	8000598 <__aeabi_f2d>
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	460d      	mov	r5, r1
 800b6ac:	4b36      	ldr	r3, [pc, #216]	; (800b788 <get_temperature+0x198>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7f4 ff71 	bl	8000598 <__aeabi_f2d>
 800b6b6:	4680      	mov	r8, r0
 800b6b8:	4689      	mov	r9, r1
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7f4 ff6c 	bl	8000598 <__aeabi_f2d>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	ec43 2b10 	vmov	d0, r2, r3
 800b6c8:	f003 f9da 	bl	800ea80 <log>
 800b6cc:	ec53 2b10 	vmov	r2, r3, d0
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	4649      	mov	r1, r9
 800b6d4:	f7f4 ffb8 	bl	8000648 <__aeabi_dmul>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4620      	mov	r0, r4
 800b6de:	4629      	mov	r1, r5
 800b6e0:	f7f4 fdfc 	bl	80002dc <__adddf3>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4690      	mov	r8, r2
 800b6ea:	4699      	mov	r9, r3
 800b6ec:	4b27      	ldr	r3, [pc, #156]	; (800b78c <get_temperature+0x19c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7f4 ff51 	bl	8000598 <__aeabi_f2d>
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	460d      	mov	r5, r1
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7f4 ff4c 	bl	8000598 <__aeabi_f2d>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	ec43 2b10 	vmov	d0, r2, r3
 800b708:	f003 f9ba 	bl	800ea80 <log>
 800b70c:	eeb0 7a40 	vmov.f32	s14, s0
 800b710:	eef0 7a60 	vmov.f32	s15, s1
 800b714:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800b768 <get_temperature+0x178>
 800b718:	eeb0 0a47 	vmov.f32	s0, s14
 800b71c:	eef0 0a67 	vmov.f32	s1, s15
 800b720:	f003 f9f6 	bl	800eb10 <pow>
 800b724:	ec53 2b10 	vmov	r2, r3, d0
 800b728:	4620      	mov	r0, r4
 800b72a:	4629      	mov	r1, r5
 800b72c:	f7f4 ff8c 	bl	8000648 <__aeabi_dmul>
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	4640      	mov	r0, r8
 800b736:	4649      	mov	r1, r9
 800b738:	f7f4 fdd0 	bl	80002dc <__adddf3>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	4610      	mov	r0, r2
 800b742:	4619      	mov	r1, r3
 800b744:	f7f5 fa78 	bl	8000c38 <__aeabi_d2f>
 800b748:	4603      	mov	r3, r0
 800b74a:	60fb      	str	r3, [r7, #12]

	return ret;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	ee07 3a90 	vmov	s15, r3
}
 800b752:	eeb0 0a67 	vmov.f32	s0, s15
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b75e:	bf00      	nop
 800b760:	66666666 	.word	0x66666666
 800b764:	400a6666 	.word	0x400a6666
 800b768:	00000000 	.word	0x00000000
 800b76c:	40080000 	.word	0x40080000
 800b770:	c2c60000 	.word	0xc2c60000
 800b774:	20005100 	.word	0x20005100
 800b778:	08010074 	.word	0x08010074
 800b77c:	08010078 	.word	0x08010078
 800b780:	3ff00000 	.word	0x3ff00000
 800b784:	0801007c 	.word	0x0801007c
 800b788:	08010080 	.word	0x08010080
 800b78c:	08010084 	.word	0x08010084

0800b790 <set_dac_voltage>:

// Set the DAC (MCP4821) output voltage.
int set_dac_voltage(float voltage)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t data[2];
	uint16_t setDacVoltageCode = 0;
 800b79a:	2300      	movs	r3, #0
 800b79c:	81fb      	strh	r3, [r7, #14]

	// Turn the DAC off if the input value is negative or 0.
	if (voltage <= 0) {
 800b79e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b7a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7aa:	d804      	bhi.n	800b7b6 <set_dac_voltage+0x26>
		data[0] = 0;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	733b      	strb	r3, [r7, #12]
		data[1] = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	737b      	strb	r3, [r7, #13]
 800b7b4:	e07d      	b.n	800b8b2 <set_dac_voltage+0x122>
	} else if (voltage < 2.00) {
 800b7b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800b7ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b7be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c6:	d522      	bpl.n	800b80e <set_dac_voltage+0x7e>
		setDacVoltageCode = voltage * 4096 / 2.048;
 800b7c8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b7cc:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800b910 <set_dac_voltage+0x180>
 800b7d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7d4:	ee17 0a90 	vmov	r0, s15
 800b7d8:	f7f4 fede 	bl	8000598 <__aeabi_f2d>
 800b7dc:	a346      	add	r3, pc, #280	; (adr r3, 800b8f8 <set_dac_voltage+0x168>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f5 f85b 	bl	800089c <__aeabi_ddiv>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	f7f5 fa03 	bl	8000bf8 <__aeabi_d2uiz>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	81fb      	strh	r3, [r7, #14]
		data[0] = 0b00110000 | (setDacVoltageCode >> 8);
 800b7f6:	89fb      	ldrh	r3, [r7, #14]
 800b7f8:	0a1b      	lsrs	r3, r3, #8
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800b802:	b2db      	uxtb	r3, r3
 800b804:	733b      	strb	r3, [r7, #12]
		data[1] = setDacVoltageCode;
 800b806:	89fb      	ldrh	r3, [r7, #14]
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	737b      	strb	r3, [r7, #13]
 800b80c:	e051      	b.n	800b8b2 <set_dac_voltage+0x122>
	} else if (voltage < 2.7) {
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7f4 fec2 	bl	8000598 <__aeabi_f2d>
 800b814:	a33a      	add	r3, pc, #232	; (adr r3, 800b900 <set_dac_voltage+0x170>)
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	f7f5 f987 	bl	8000b2c <__aeabi_dcmplt>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d022      	beq.n	800b86a <set_dac_voltage+0xda>
		setDacVoltageCode = voltage * 4096 / 4.096;
 800b824:	edd7 7a01 	vldr	s15, [r7, #4]
 800b828:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800b910 <set_dac_voltage+0x180>
 800b82c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b830:	ee17 0a90 	vmov	r0, s15
 800b834:	f7f4 feb0 	bl	8000598 <__aeabi_f2d>
 800b838:	a333      	add	r3, pc, #204	; (adr r3, 800b908 <set_dac_voltage+0x178>)
 800b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83e:	f7f5 f82d 	bl	800089c <__aeabi_ddiv>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4610      	mov	r0, r2
 800b848:	4619      	mov	r1, r3
 800b84a:	f7f5 f9d5 	bl	8000bf8 <__aeabi_d2uiz>
 800b84e:	4603      	mov	r3, r0
 800b850:	81fb      	strh	r3, [r7, #14]
		data[0] = 0b00010000 | (setDacVoltageCode >> 8);
 800b852:	89fb      	ldrh	r3, [r7, #14]
 800b854:	0a1b      	lsrs	r3, r3, #8
 800b856:	b29b      	uxth	r3, r3
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	f043 0310 	orr.w	r3, r3, #16
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	733b      	strb	r3, [r7, #12]
		data[1] = setDacVoltageCode;
 800b862:	89fb      	ldrh	r3, [r7, #14]
 800b864:	b2db      	uxtb	r3, r3
 800b866:	737b      	strb	r3, [r7, #13]
 800b868:	e023      	b.n	800b8b2 <set_dac_voltage+0x122>
	} else {
		voltage = 2.7;
 800b86a:	4b2a      	ldr	r3, [pc, #168]	; (800b914 <set_dac_voltage+0x184>)
 800b86c:	607b      	str	r3, [r7, #4]
		setDacVoltageCode = voltage * 4096 / 4.096;
 800b86e:	edd7 7a01 	vldr	s15, [r7, #4]
 800b872:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b910 <set_dac_voltage+0x180>
 800b876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b87a:	ee17 0a90 	vmov	r0, s15
 800b87e:	f7f4 fe8b 	bl	8000598 <__aeabi_f2d>
 800b882:	a321      	add	r3, pc, #132	; (adr r3, 800b908 <set_dac_voltage+0x178>)
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f7f5 f808 	bl	800089c <__aeabi_ddiv>
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	4610      	mov	r0, r2
 800b892:	4619      	mov	r1, r3
 800b894:	f7f5 f9b0 	bl	8000bf8 <__aeabi_d2uiz>
 800b898:	4603      	mov	r3, r0
 800b89a:	81fb      	strh	r3, [r7, #14]
		data[0] = 0b00010000 | (setDacVoltageCode >> 8);
 800b89c:	89fb      	ldrh	r3, [r7, #14]
 800b89e:	0a1b      	lsrs	r3, r3, #8
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	f043 0310 	orr.w	r3, r3, #16
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	733b      	strb	r3, [r7, #12]
		data[1] = setDacVoltageCode;
 800b8ac:	89fb      	ldrh	r3, [r7, #14]
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	737b      	strb	r3, [r7, #13]
	}

	HAL_GPIO_WritePin(CS_DAC_GPIO_Port, CS_DAC_Pin, GPIO_PIN_RESET);
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	2140      	movs	r1, #64	; 0x40
 800b8b6:	4818      	ldr	r0, [pc, #96]	; (800b918 <set_dac_voltage+0x188>)
 800b8b8:	f7f8 f99a 	bl	8003bf0 <HAL_GPIO_WritePin>
	osDelay(1);
 800b8bc:	2001      	movs	r0, #1
 800b8be:	f7fc f857 	bl	8007970 <osDelay>
	if (HAL_SPI_Transmit(&hspi2, data, 2, 1000) != HAL_OK) {
 800b8c2:	f107 010c 	add.w	r1, r7, #12
 800b8c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	4813      	ldr	r0, [pc, #76]	; (800b91c <set_dac_voltage+0x18c>)
 800b8ce:	f7f9 ff66 	bl	800579e <HAL_SPI_Transmit>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <set_dac_voltage+0x14e>
		return -1;
 800b8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8dc:	e005      	b.n	800b8ea <set_dac_voltage+0x15a>
	}
	HAL_GPIO_WritePin(CS_DAC_GPIO_Port, CS_DAC_Pin, GPIO_PIN_SET);
 800b8de:	2201      	movs	r2, #1
 800b8e0:	2140      	movs	r1, #64	; 0x40
 800b8e2:	480d      	ldr	r0, [pc, #52]	; (800b918 <set_dac_voltage+0x188>)
 800b8e4:	f7f8 f984 	bl	8003bf0 <HAL_GPIO_WritePin>

	return 0;
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	f3af 8000 	nop.w
 800b8f8:	d2f1a9fc 	.word	0xd2f1a9fc
 800b8fc:	4000624d 	.word	0x4000624d
 800b900:	9999999a 	.word	0x9999999a
 800b904:	40059999 	.word	0x40059999
 800b908:	d2f1a9fc 	.word	0xd2f1a9fc
 800b90c:	4010624d 	.word	0x4010624d
 800b910:	45800000 	.word	0x45800000
 800b914:	402ccccd 	.word	0x402ccccd
 800b918:	48000800 	.word	0x48000800
 800b91c:	2000500c 	.word	0x2000500c

0800b920 <get_voltage>:
#define CURRENT_GAIN 0.0000725723
#define CURRENT_OFFSET 0.0001016406

// Get the voltage measurement from MCP3426.
float get_voltage()
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af02      	add	r7, sp, #8
	uint8_t txData = 0b10101000;
 800b926:	23a8      	movs	r3, #168	; 0xa8
 800b928:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[2] = { 0 };
 800b92a:	2300      	movs	r3, #0
 800b92c:	803b      	strh	r3, [r7, #0]
	int16_t result = 0;
 800b92e:	2300      	movs	r3, #0
 800b930:	80fb      	strh	r3, [r7, #6]

	if (HAL_I2C_Master_Transmit(&hi2c3, MCP3426_ADDR, &txData, 1, 1000) != HAL_OK)
 800b932:	1d7a      	adds	r2, r7, #5
 800b934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	2301      	movs	r3, #1
 800b93c:	21d0      	movs	r1, #208	; 0xd0
 800b93e:	4824      	ldr	r0, [pc, #144]	; (800b9d0 <get_voltage+0xb0>)
 800b940:	f7f8 fa16 	bl	8003d70 <HAL_I2C_Master_Transmit>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <get_voltage+0x2e>
		return -1;
 800b94a:	4b22      	ldr	r3, [pc, #136]	; (800b9d4 <get_voltage+0xb4>)
 800b94c:	e031      	b.n	800b9b2 <get_voltage+0x92>

	osDelay(67); // Take some time for the conversion to complete
 800b94e:	2043      	movs	r0, #67	; 0x43
 800b950:	f7fc f80e 	bl	8007970 <osDelay>

	if (HAL_I2C_Master_Receive(&hi2c3, MCP3426_ADDR, rxData, 2, 1000) != HAL_OK)
 800b954:	463a      	mov	r2, r7
 800b956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	2302      	movs	r3, #2
 800b95e:	21d0      	movs	r1, #208	; 0xd0
 800b960:	481b      	ldr	r0, [pc, #108]	; (800b9d0 <get_voltage+0xb0>)
 800b962:	f7f8 faf9 	bl	8003f58 <HAL_I2C_Master_Receive>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <get_voltage+0x50>
		return -1;
 800b96c:	4b19      	ldr	r3, [pc, #100]	; (800b9d4 <get_voltage+0xb4>)
 800b96e:	e020      	b.n	800b9b2 <get_voltage+0x92>

	result = rxData[0] << 8 | rxData[1];
 800b970:	783b      	ldrb	r3, [r7, #0]
 800b972:	021b      	lsls	r3, r3, #8
 800b974:	b21a      	sxth	r2, r3
 800b976:	787b      	ldrb	r3, [r7, #1]
 800b978:	b21b      	sxth	r3, r3
 800b97a:	4313      	orrs	r3, r2
 800b97c:	80fb      	strh	r3, [r7, #6]

	return result * VOLTAGE_GAIN + VOLTAGE_OFFSET;
 800b97e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b982:	4618      	mov	r0, r3
 800b984:	f7f4 fdf6 	bl	8000574 <__aeabi_i2d>
 800b988:	a30d      	add	r3, pc, #52	; (adr r3, 800b9c0 <get_voltage+0xa0>)
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	f7f4 fe5b 	bl	8000648 <__aeabi_dmul>
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	4610      	mov	r0, r2
 800b998:	4619      	mov	r1, r3
 800b99a:	a30b      	add	r3, pc, #44	; (adr r3, 800b9c8 <get_voltage+0xa8>)
 800b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a0:	f7f4 fc9c 	bl	80002dc <__adddf3>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4610      	mov	r0, r2
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	f7f5 f944 	bl	8000c38 <__aeabi_d2f>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	ee07 3a90 	vmov	s15, r3
}
 800b9b6:	eeb0 0a67 	vmov.f32	s0, s15
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	685217de 	.word	0x685217de
 800b9c4:	3f447d92 	.word	0x3f447d92
 800b9c8:	e3aafb3a 	.word	0xe3aafb3a
 800b9cc:	3f40104f 	.word	0x3f40104f
 800b9d0:	20004fc0 	.word	0x20004fc0
 800b9d4:	bf800000 	.word	0xbf800000

0800b9d8 <get_current>:

// Get the current measurement from MCP3426.
float get_current()
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af02      	add	r7, sp, #8
	uint8_t txData = 0b10001001;
 800b9de:	2389      	movs	r3, #137	; 0x89
 800b9e0:	717b      	strb	r3, [r7, #5]
	uint8_t rxData[2];
	int16_t result = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	80fb      	strh	r3, [r7, #6]

	if (HAL_I2C_Master_Transmit(&hi2c3, MCP3426_ADDR, &txData, 1, 1000) != HAL_OK) {
 800b9e6:	1d7a      	adds	r2, r7, #5
 800b9e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	21d0      	movs	r1, #208	; 0xd0
 800b9f2:	4825      	ldr	r0, [pc, #148]	; (800ba88 <get_current+0xb0>)
 800b9f4:	f7f8 f9bc 	bl	8003d70 <HAL_I2C_Master_Transmit>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <get_current+0x2a>
		return -1;
 800b9fe:	4b23      	ldr	r3, [pc, #140]	; (800ba8c <get_current+0xb4>)
 800ba00:	e031      	b.n	800ba66 <get_current+0x8e>
	}

	osDelay(67); // Take some time for the conversion to complete
 800ba02:	2043      	movs	r0, #67	; 0x43
 800ba04:	f7fb ffb4 	bl	8007970 <osDelay>

	if (HAL_I2C_Master_Receive(&hi2c3, MCP3426_ADDR, rxData, 2, 1000) != HAL_OK) {
 800ba08:	463a      	mov	r2, r7
 800ba0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	2302      	movs	r3, #2
 800ba12:	21d0      	movs	r1, #208	; 0xd0
 800ba14:	481c      	ldr	r0, [pc, #112]	; (800ba88 <get_current+0xb0>)
 800ba16:	f7f8 fa9f 	bl	8003f58 <HAL_I2C_Master_Receive>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d001      	beq.n	800ba24 <get_current+0x4c>
		return -1;
 800ba20:	4b1a      	ldr	r3, [pc, #104]	; (800ba8c <get_current+0xb4>)
 800ba22:	e020      	b.n	800ba66 <get_current+0x8e>
	}

	result = rxData[0] << 8 | rxData[1];
 800ba24:	783b      	ldrb	r3, [r7, #0]
 800ba26:	021b      	lsls	r3, r3, #8
 800ba28:	b21a      	sxth	r2, r3
 800ba2a:	787b      	ldrb	r3, [r7, #1]
 800ba2c:	b21b      	sxth	r3, r3
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	80fb      	strh	r3, [r7, #6]

	return result * CURRENT_GAIN + CURRENT_OFFSET;
 800ba32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7f4 fd9c 	bl	8000574 <__aeabi_i2d>
 800ba3c:	a30e      	add	r3, pc, #56	; (adr r3, 800ba78 <get_current+0xa0>)
 800ba3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba42:	f7f4 fe01 	bl	8000648 <__aeabi_dmul>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	a30c      	add	r3, pc, #48	; (adr r3, 800ba80 <get_current+0xa8>)
 800ba50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba54:	f7f4 fc42 	bl	80002dc <__adddf3>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	4619      	mov	r1, r3
 800ba60:	f7f5 f8ea 	bl	8000c38 <__aeabi_d2f>
 800ba64:	4603      	mov	r3, r0
 800ba66:	ee07 3a90 	vmov	s15, r3
}
 800ba6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	f3af 8000 	nop.w
 800ba78:	9ed15adf 	.word	0x9ed15adf
 800ba7c:	3f13063e 	.word	0x3f13063e
 800ba80:	36376dac 	.word	0x36376dac
 800ba84:	3f1aa4fc 	.word	0x3f1aa4fc
 800ba88:	20004fc0 	.word	0x20004fc0
 800ba8c:	bf800000 	.word	0xbf800000

0800ba90 <led_all_on>:


//
void led_all_on()
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_PC_GPIO_Port, LED_PC_Pin, GPIO_PIN_SET);
 800ba94:	2201      	movs	r2, #1
 800ba96:	2180      	movs	r1, #128	; 0x80
 800ba98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ba9c:	f7f8 f8a8 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RUN_GPIO_Port, LED_RUN_Pin, GPIO_PIN_SET);
 800baa0:	2201      	movs	r2, #1
 800baa2:	2110      	movs	r1, #16
 800baa4:	480c      	ldr	r0, [pc, #48]	; (800bad8 <led_all_on+0x48>)
 800baa6:	f7f8 f8a3 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_100_GPIO_Port, LED_100_Pin, GPIO_PIN_SET);
 800baaa:	2201      	movs	r2, #1
 800baac:	2120      	movs	r1, #32
 800baae:	480a      	ldr	r0, [pc, #40]	; (800bad8 <led_all_on+0x48>)
 800bab0:	f7f8 f89e 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_500_GPIO_Port, LED_500_Pin, GPIO_PIN_SET);
 800bab4:	2201      	movs	r2, #1
 800bab6:	2101      	movs	r1, #1
 800bab8:	4808      	ldr	r0, [pc, #32]	; (800badc <led_all_on+0x4c>)
 800baba:	f7f8 f899 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1000_GPIO_Port, LED_1000_Pin, GPIO_PIN_SET);
 800babe:	2201      	movs	r2, #1
 800bac0:	2102      	movs	r1, #2
 800bac2:	4806      	ldr	r0, [pc, #24]	; (800badc <led_all_on+0x4c>)
 800bac4:	f7f8 f894 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2000_GPIO_Port, LED_2000_Pin, GPIO_PIN_SET);
 800bac8:	2201      	movs	r2, #1
 800baca:	2104      	movs	r1, #4
 800bacc:	4803      	ldr	r0, [pc, #12]	; (800badc <led_all_on+0x4c>)
 800bace:	f7f8 f88f 	bl	8003bf0 <HAL_GPIO_WritePin>
}
 800bad2:	bf00      	nop
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	48000800 	.word	0x48000800
 800badc:	48000400 	.word	0x48000400

0800bae0 <led_all_off>:

//
void led_all_off()
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_PC_GPIO_Port, LED_PC_Pin, GPIO_PIN_RESET);
 800bae4:	2200      	movs	r2, #0
 800bae6:	2180      	movs	r1, #128	; 0x80
 800bae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800baec:	f7f8 f880 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RUN_GPIO_Port, LED_RUN_Pin, GPIO_PIN_RESET);
 800baf0:	2200      	movs	r2, #0
 800baf2:	2110      	movs	r1, #16
 800baf4:	480c      	ldr	r0, [pc, #48]	; (800bb28 <led_all_off+0x48>)
 800baf6:	f7f8 f87b 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_100_GPIO_Port, LED_100_Pin, GPIO_PIN_RESET);
 800bafa:	2200      	movs	r2, #0
 800bafc:	2120      	movs	r1, #32
 800bafe:	480a      	ldr	r0, [pc, #40]	; (800bb28 <led_all_off+0x48>)
 800bb00:	f7f8 f876 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_500_GPIO_Port, LED_500_Pin, GPIO_PIN_RESET);
 800bb04:	2200      	movs	r2, #0
 800bb06:	2101      	movs	r1, #1
 800bb08:	4808      	ldr	r0, [pc, #32]	; (800bb2c <led_all_off+0x4c>)
 800bb0a:	f7f8 f871 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1000_GPIO_Port, LED_1000_Pin, GPIO_PIN_RESET);
 800bb0e:	2200      	movs	r2, #0
 800bb10:	2102      	movs	r1, #2
 800bb12:	4806      	ldr	r0, [pc, #24]	; (800bb2c <led_all_off+0x4c>)
 800bb14:	f7f8 f86c 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2000_GPIO_Port, LED_2000_Pin, GPIO_PIN_RESET);
 800bb18:	2200      	movs	r2, #0
 800bb1a:	2104      	movs	r1, #4
 800bb1c:	4803      	ldr	r0, [pc, #12]	; (800bb2c <led_all_off+0x4c>)
 800bb1e:	f7f8 f867 	bl	8003bf0 <HAL_GPIO_WritePin>
}
 800bb22:	bf00      	nop
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	48000800 	.word	0x48000800
 800bb2c:	48000400 	.word	0x48000400

0800bb30 <led_pc_on>:

//
void led_pc_on()
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_PC_GPIO_Port, LED_PC_Pin, GPIO_PIN_SET);
 800bb34:	2201      	movs	r2, #1
 800bb36:	2180      	movs	r1, #128	; 0x80
 800bb38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bb3c:	f7f8 f858 	bl	8003bf0 <HAL_GPIO_WritePin>
}
 800bb40:	bf00      	nop
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <led_pc_off>:

//
void led_pc_off()
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_PC_GPIO_Port, LED_PC_Pin, GPIO_PIN_RESET);
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2180      	movs	r1, #128	; 0x80
 800bb4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bb50:	f7f8 f84e 	bl	8003bf0 <HAL_GPIO_WritePin>
}
 800bb54:	bf00      	nop
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <led_run_on>:

void led_run_on()
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RUN_GPIO_Port, LED_RUN_Pin, GPIO_PIN_SET);
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	2110      	movs	r1, #16
 800bb60:	4802      	ldr	r0, [pc, #8]	; (800bb6c <led_run_on+0x14>)
 800bb62:	f7f8 f845 	bl	8003bf0 <HAL_GPIO_WritePin>
}
 800bb66:	bf00      	nop
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	48000800 	.word	0x48000800

0800bb70 <led_run_off>:
void led_run_off()
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RUN_GPIO_Port, LED_RUN_Pin, GPIO_PIN_RESET);
 800bb74:	2200      	movs	r2, #0
 800bb76:	2110      	movs	r1, #16
 800bb78:	4802      	ldr	r0, [pc, #8]	; (800bb84 <led_run_off+0x14>)
 800bb7a:	f7f8 f839 	bl	8003bf0 <HAL_GPIO_WritePin>
}
 800bb7e:	bf00      	nop
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	48000800 	.word	0x48000800

0800bb88 <led_current_indication>:

//
void led_current_indication(uint8_t index)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	4603      	mov	r3, r0
 800bb90:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_100_GPIO_Port, LED_100_Pin, GPIO_PIN_RESET);
 800bb92:	2200      	movs	r2, #0
 800bb94:	2120      	movs	r1, #32
 800bb96:	483e      	ldr	r0, [pc, #248]	; (800bc90 <led_current_indication+0x108>)
 800bb98:	f7f8 f82a 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_500_GPIO_Port, LED_500_Pin, GPIO_PIN_RESET);
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	2101      	movs	r1, #1
 800bba0:	483c      	ldr	r0, [pc, #240]	; (800bc94 <led_current_indication+0x10c>)
 800bba2:	f7f8 f825 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1000_GPIO_Port, LED_1000_Pin, GPIO_PIN_RESET);
 800bba6:	2200      	movs	r2, #0
 800bba8:	2102      	movs	r1, #2
 800bbaa:	483a      	ldr	r0, [pc, #232]	; (800bc94 <led_current_indication+0x10c>)
 800bbac:	f7f8 f820 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2000_GPIO_Port, LED_2000_Pin, GPIO_PIN_RESET);
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	2104      	movs	r1, #4
 800bbb4:	4837      	ldr	r0, [pc, #220]	; (800bc94 <led_current_indication+0x10c>)
 800bbb6:	f7f8 f81b 	bl	8003bf0 <HAL_GPIO_WritePin>
	switch (index) {
 800bbba:	79fb      	ldrb	r3, [r7, #7]
 800bbbc:	2b08      	cmp	r3, #8
 800bbbe:	d862      	bhi.n	800bc86 <led_current_indication+0xfe>
 800bbc0:	a201      	add	r2, pc, #4	; (adr r2, 800bbc8 <led_current_indication+0x40>)
 800bbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc6:	bf00      	nop
 800bbc8:	0800bc87 	.word	0x0800bc87
 800bbcc:	0800bbed 	.word	0x0800bbed
 800bbd0:	0800bbf9 	.word	0x0800bbf9
 800bbd4:	0800bc0f 	.word	0x0800bc0f
 800bbd8:	0800bc1b 	.word	0x0800bc1b
 800bbdc:	0800bc31 	.word	0x0800bc31
 800bbe0:	0800bc3d 	.word	0x0800bc3d
 800bbe4:	0800bc53 	.word	0x0800bc53
 800bbe8:	0800bc5f 	.word	0x0800bc5f
		case 0:
			/* Already off */
			break;
		case 1:
			HAL_GPIO_WritePin(LED_100_GPIO_Port, LED_100_Pin, GPIO_PIN_SET);
 800bbec:	2201      	movs	r2, #1
 800bbee:	2120      	movs	r1, #32
 800bbf0:	4827      	ldr	r0, [pc, #156]	; (800bc90 <led_current_indication+0x108>)
 800bbf2:	f7f7 fffd 	bl	8003bf0 <HAL_GPIO_WritePin>
			break;
 800bbf6:	e047      	b.n	800bc88 <led_current_indication+0x100>
		case 2:
			HAL_GPIO_WritePin(LED_100_GPIO_Port, LED_100_Pin, GPIO_PIN_SET);
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	2120      	movs	r1, #32
 800bbfc:	4824      	ldr	r0, [pc, #144]	; (800bc90 <led_current_indication+0x108>)
 800bbfe:	f7f7 fff7 	bl	8003bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_500_GPIO_Port, LED_500_Pin, GPIO_PIN_SET);
 800bc02:	2201      	movs	r2, #1
 800bc04:	2101      	movs	r1, #1
 800bc06:	4823      	ldr	r0, [pc, #140]	; (800bc94 <led_current_indication+0x10c>)
 800bc08:	f7f7 fff2 	bl	8003bf0 <HAL_GPIO_WritePin>
			break;
 800bc0c:	e03c      	b.n	800bc88 <led_current_indication+0x100>
		case 3:
			HAL_GPIO_WritePin(LED_500_GPIO_Port, LED_500_Pin, GPIO_PIN_SET);
 800bc0e:	2201      	movs	r2, #1
 800bc10:	2101      	movs	r1, #1
 800bc12:	4820      	ldr	r0, [pc, #128]	; (800bc94 <led_current_indication+0x10c>)
 800bc14:	f7f7 ffec 	bl	8003bf0 <HAL_GPIO_WritePin>
			break;
 800bc18:	e036      	b.n	800bc88 <led_current_indication+0x100>
		case 4:
			HAL_GPIO_WritePin(LED_500_GPIO_Port, LED_500_Pin, GPIO_PIN_SET);
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	2101      	movs	r1, #1
 800bc1e:	481d      	ldr	r0, [pc, #116]	; (800bc94 <led_current_indication+0x10c>)
 800bc20:	f7f7 ffe6 	bl	8003bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1000_GPIO_Port, LED_1000_Pin, GPIO_PIN_SET);
 800bc24:	2201      	movs	r2, #1
 800bc26:	2102      	movs	r1, #2
 800bc28:	481a      	ldr	r0, [pc, #104]	; (800bc94 <led_current_indication+0x10c>)
 800bc2a:	f7f7 ffe1 	bl	8003bf0 <HAL_GPIO_WritePin>
			break;
 800bc2e:	e02b      	b.n	800bc88 <led_current_indication+0x100>
		case 5:
			HAL_GPIO_WritePin(LED_1000_GPIO_Port, LED_1000_Pin, GPIO_PIN_SET);
 800bc30:	2201      	movs	r2, #1
 800bc32:	2102      	movs	r1, #2
 800bc34:	4817      	ldr	r0, [pc, #92]	; (800bc94 <led_current_indication+0x10c>)
 800bc36:	f7f7 ffdb 	bl	8003bf0 <HAL_GPIO_WritePin>
			break;
 800bc3a:	e025      	b.n	800bc88 <led_current_indication+0x100>
		case 6:
			HAL_GPIO_WritePin(LED_1000_GPIO_Port, LED_1000_Pin, GPIO_PIN_SET);
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	2102      	movs	r1, #2
 800bc40:	4814      	ldr	r0, [pc, #80]	; (800bc94 <led_current_indication+0x10c>)
 800bc42:	f7f7 ffd5 	bl	8003bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2000_GPIO_Port, LED_2000_Pin, GPIO_PIN_SET);
 800bc46:	2201      	movs	r2, #1
 800bc48:	2104      	movs	r1, #4
 800bc4a:	4812      	ldr	r0, [pc, #72]	; (800bc94 <led_current_indication+0x10c>)
 800bc4c:	f7f7 ffd0 	bl	8003bf0 <HAL_GPIO_WritePin>
			break;
 800bc50:	e01a      	b.n	800bc88 <led_current_indication+0x100>
		case 7:
			HAL_GPIO_WritePin(LED_2000_GPIO_Port, LED_2000_Pin, GPIO_PIN_SET);
 800bc52:	2201      	movs	r2, #1
 800bc54:	2104      	movs	r1, #4
 800bc56:	480f      	ldr	r0, [pc, #60]	; (800bc94 <led_current_indication+0x10c>)
 800bc58:	f7f7 ffca 	bl	8003bf0 <HAL_GPIO_WritePin>
			break;
 800bc5c:	e014      	b.n	800bc88 <led_current_indication+0x100>
		case 8:
			HAL_GPIO_WritePin(LED_100_GPIO_Port, LED_100_Pin, GPIO_PIN_SET);
 800bc5e:	2201      	movs	r2, #1
 800bc60:	2120      	movs	r1, #32
 800bc62:	480b      	ldr	r0, [pc, #44]	; (800bc90 <led_current_indication+0x108>)
 800bc64:	f7f7 ffc4 	bl	8003bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_500_GPIO_Port, LED_500_Pin, GPIO_PIN_SET);
 800bc68:	2201      	movs	r2, #1
 800bc6a:	2101      	movs	r1, #1
 800bc6c:	4809      	ldr	r0, [pc, #36]	; (800bc94 <led_current_indication+0x10c>)
 800bc6e:	f7f7 ffbf 	bl	8003bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_1000_GPIO_Port, LED_1000_Pin, GPIO_PIN_SET);
 800bc72:	2201      	movs	r2, #1
 800bc74:	2102      	movs	r1, #2
 800bc76:	4807      	ldr	r0, [pc, #28]	; (800bc94 <led_current_indication+0x10c>)
 800bc78:	f7f7 ffba 	bl	8003bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_2000_GPIO_Port, LED_2000_Pin, GPIO_PIN_SET);
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	2104      	movs	r1, #4
 800bc80:	4804      	ldr	r0, [pc, #16]	; (800bc94 <led_current_indication+0x10c>)
 800bc82:	f7f7 ffb5 	bl	8003bf0 <HAL_GPIO_WritePin>
		default:
			break;
 800bc86:	bf00      	nop
	}

}
 800bc88:	bf00      	nop
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	48000800 	.word	0x48000800
 800bc94:	48000400 	.word	0x48000400

0800bc98 <HAL_GPIO_EXTI_Callback>:

extern osThreadId_t push_buttom_task_handle;

// ------------------------------------------------------------------------- //

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800bca2:	88fb      	ldrh	r3, [r7, #6]
 800bca4:	2b40      	cmp	r3, #64	; 0x40
 800bca6:	d00e      	beq.n	800bcc6 <HAL_GPIO_EXTI_Callback+0x2e>
 800bca8:	2b40      	cmp	r3, #64	; 0x40
 800bcaa:	dc10      	bgt.n	800bcce <HAL_GPIO_EXTI_Callback+0x36>
 800bcac:	2b10      	cmp	r3, #16
 800bcae:	d002      	beq.n	800bcb6 <HAL_GPIO_EXTI_Callback+0x1e>
 800bcb0:	2b20      	cmp	r3, #32
 800bcb2:	d004      	beq.n	800bcbe <HAL_GPIO_EXTI_Callback+0x26>
		break;
	case BT_DEC_Pin:
		pb_dec_pressed = 1;
		break;
	default:
		break;
 800bcb4:	e00b      	b.n	800bcce <HAL_GPIO_EXTI_Callback+0x36>
		pb_a_pressed = 1;
 800bcb6:	4b0b      	ldr	r3, [pc, #44]	; (800bce4 <HAL_GPIO_EXTI_Callback+0x4c>)
 800bcb8:	2201      	movs	r2, #1
 800bcba:	701a      	strb	r2, [r3, #0]
		break;
 800bcbc:	e008      	b.n	800bcd0 <HAL_GPIO_EXTI_Callback+0x38>
		pb_inc_pressed = 1;
 800bcbe:	4b0a      	ldr	r3, [pc, #40]	; (800bce8 <HAL_GPIO_EXTI_Callback+0x50>)
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	701a      	strb	r2, [r3, #0]
		break;
 800bcc4:	e004      	b.n	800bcd0 <HAL_GPIO_EXTI_Callback+0x38>
		pb_dec_pressed = 1;
 800bcc6:	4b09      	ldr	r3, [pc, #36]	; (800bcec <HAL_GPIO_EXTI_Callback+0x54>)
 800bcc8:	2201      	movs	r2, #1
 800bcca:	701a      	strb	r2, [r3, #0]
		break;
 800bccc:	e000      	b.n	800bcd0 <HAL_GPIO_EXTI_Callback+0x38>
		break;
 800bcce:	bf00      	nop
	}
	xTaskResumeFromISR(push_buttom_task_handle);
 800bcd0:	4b07      	ldr	r3, [pc, #28]	; (800bcf0 <HAL_GPIO_EXTI_Callback+0x58>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fd fa87 	bl	80091e8 <xTaskResumeFromISR>
}
 800bcda:	bf00      	nop
 800bcdc:	3708      	adds	r7, #8
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	20004f60 	.word	0x20004f60
 800bce8:	20004f61 	.word	0x20004f61
 800bcec:	20004f62 	.word	0x20004f62
 800bcf0:	20005264 	.word	0x20005264

0800bcf4 <__errno>:
 800bcf4:	4b01      	ldr	r3, [pc, #4]	; (800bcfc <__errno+0x8>)
 800bcf6:	6818      	ldr	r0, [r3, #0]
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	20000034 	.word	0x20000034

0800bd00 <__libc_init_array>:
 800bd00:	b570      	push	{r4, r5, r6, lr}
 800bd02:	4d0d      	ldr	r5, [pc, #52]	; (800bd38 <__libc_init_array+0x38>)
 800bd04:	4c0d      	ldr	r4, [pc, #52]	; (800bd3c <__libc_init_array+0x3c>)
 800bd06:	1b64      	subs	r4, r4, r5
 800bd08:	10a4      	asrs	r4, r4, #2
 800bd0a:	2600      	movs	r6, #0
 800bd0c:	42a6      	cmp	r6, r4
 800bd0e:	d109      	bne.n	800bd24 <__libc_init_array+0x24>
 800bd10:	4d0b      	ldr	r5, [pc, #44]	; (800bd40 <__libc_init_array+0x40>)
 800bd12:	4c0c      	ldr	r4, [pc, #48]	; (800bd44 <__libc_init_array+0x44>)
 800bd14:	f004 f86e 	bl	800fdf4 <_init>
 800bd18:	1b64      	subs	r4, r4, r5
 800bd1a:	10a4      	asrs	r4, r4, #2
 800bd1c:	2600      	movs	r6, #0
 800bd1e:	42a6      	cmp	r6, r4
 800bd20:	d105      	bne.n	800bd2e <__libc_init_array+0x2e>
 800bd22:	bd70      	pop	{r4, r5, r6, pc}
 800bd24:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd28:	4798      	blx	r3
 800bd2a:	3601      	adds	r6, #1
 800bd2c:	e7ee      	b.n	800bd0c <__libc_init_array+0xc>
 800bd2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd32:	4798      	blx	r3
 800bd34:	3601      	adds	r6, #1
 800bd36:	e7f2      	b.n	800bd1e <__libc_init_array+0x1e>
 800bd38:	080104b8 	.word	0x080104b8
 800bd3c:	080104b8 	.word	0x080104b8
 800bd40:	080104b8 	.word	0x080104b8
 800bd44:	080104bc 	.word	0x080104bc

0800bd48 <memcpy>:
 800bd48:	440a      	add	r2, r1
 800bd4a:	4291      	cmp	r1, r2
 800bd4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd50:	d100      	bne.n	800bd54 <memcpy+0xc>
 800bd52:	4770      	bx	lr
 800bd54:	b510      	push	{r4, lr}
 800bd56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd5e:	4291      	cmp	r1, r2
 800bd60:	d1f9      	bne.n	800bd56 <memcpy+0xe>
 800bd62:	bd10      	pop	{r4, pc}

0800bd64 <memset>:
 800bd64:	4402      	add	r2, r0
 800bd66:	4603      	mov	r3, r0
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d100      	bne.n	800bd6e <memset+0xa>
 800bd6c:	4770      	bx	lr
 800bd6e:	f803 1b01 	strb.w	r1, [r3], #1
 800bd72:	e7f9      	b.n	800bd68 <memset+0x4>

0800bd74 <__cvt>:
 800bd74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd78:	ec55 4b10 	vmov	r4, r5, d0
 800bd7c:	2d00      	cmp	r5, #0
 800bd7e:	460e      	mov	r6, r1
 800bd80:	4619      	mov	r1, r3
 800bd82:	462b      	mov	r3, r5
 800bd84:	bfbb      	ittet	lt
 800bd86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd8a:	461d      	movlt	r5, r3
 800bd8c:	2300      	movge	r3, #0
 800bd8e:	232d      	movlt	r3, #45	; 0x2d
 800bd90:	700b      	strb	r3, [r1, #0]
 800bd92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd98:	4691      	mov	r9, r2
 800bd9a:	f023 0820 	bic.w	r8, r3, #32
 800bd9e:	bfbc      	itt	lt
 800bda0:	4622      	movlt	r2, r4
 800bda2:	4614      	movlt	r4, r2
 800bda4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bda8:	d005      	beq.n	800bdb6 <__cvt+0x42>
 800bdaa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bdae:	d100      	bne.n	800bdb2 <__cvt+0x3e>
 800bdb0:	3601      	adds	r6, #1
 800bdb2:	2102      	movs	r1, #2
 800bdb4:	e000      	b.n	800bdb8 <__cvt+0x44>
 800bdb6:	2103      	movs	r1, #3
 800bdb8:	ab03      	add	r3, sp, #12
 800bdba:	9301      	str	r3, [sp, #4]
 800bdbc:	ab02      	add	r3, sp, #8
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	ec45 4b10 	vmov	d0, r4, r5
 800bdc4:	4653      	mov	r3, sl
 800bdc6:	4632      	mov	r2, r6
 800bdc8:	f000 fcea 	bl	800c7a0 <_dtoa_r>
 800bdcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	d102      	bne.n	800bdda <__cvt+0x66>
 800bdd4:	f019 0f01 	tst.w	r9, #1
 800bdd8:	d022      	beq.n	800be20 <__cvt+0xac>
 800bdda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bdde:	eb07 0906 	add.w	r9, r7, r6
 800bde2:	d110      	bne.n	800be06 <__cvt+0x92>
 800bde4:	783b      	ldrb	r3, [r7, #0]
 800bde6:	2b30      	cmp	r3, #48	; 0x30
 800bde8:	d10a      	bne.n	800be00 <__cvt+0x8c>
 800bdea:	2200      	movs	r2, #0
 800bdec:	2300      	movs	r3, #0
 800bdee:	4620      	mov	r0, r4
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	f7f4 fe91 	bl	8000b18 <__aeabi_dcmpeq>
 800bdf6:	b918      	cbnz	r0, 800be00 <__cvt+0x8c>
 800bdf8:	f1c6 0601 	rsb	r6, r6, #1
 800bdfc:	f8ca 6000 	str.w	r6, [sl]
 800be00:	f8da 3000 	ldr.w	r3, [sl]
 800be04:	4499      	add	r9, r3
 800be06:	2200      	movs	r2, #0
 800be08:	2300      	movs	r3, #0
 800be0a:	4620      	mov	r0, r4
 800be0c:	4629      	mov	r1, r5
 800be0e:	f7f4 fe83 	bl	8000b18 <__aeabi_dcmpeq>
 800be12:	b108      	cbz	r0, 800be18 <__cvt+0xa4>
 800be14:	f8cd 900c 	str.w	r9, [sp, #12]
 800be18:	2230      	movs	r2, #48	; 0x30
 800be1a:	9b03      	ldr	r3, [sp, #12]
 800be1c:	454b      	cmp	r3, r9
 800be1e:	d307      	bcc.n	800be30 <__cvt+0xbc>
 800be20:	9b03      	ldr	r3, [sp, #12]
 800be22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be24:	1bdb      	subs	r3, r3, r7
 800be26:	4638      	mov	r0, r7
 800be28:	6013      	str	r3, [r2, #0]
 800be2a:	b004      	add	sp, #16
 800be2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be30:	1c59      	adds	r1, r3, #1
 800be32:	9103      	str	r1, [sp, #12]
 800be34:	701a      	strb	r2, [r3, #0]
 800be36:	e7f0      	b.n	800be1a <__cvt+0xa6>

0800be38 <__exponent>:
 800be38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be3a:	4603      	mov	r3, r0
 800be3c:	2900      	cmp	r1, #0
 800be3e:	bfb8      	it	lt
 800be40:	4249      	neglt	r1, r1
 800be42:	f803 2b02 	strb.w	r2, [r3], #2
 800be46:	bfb4      	ite	lt
 800be48:	222d      	movlt	r2, #45	; 0x2d
 800be4a:	222b      	movge	r2, #43	; 0x2b
 800be4c:	2909      	cmp	r1, #9
 800be4e:	7042      	strb	r2, [r0, #1]
 800be50:	dd2a      	ble.n	800bea8 <__exponent+0x70>
 800be52:	f10d 0407 	add.w	r4, sp, #7
 800be56:	46a4      	mov	ip, r4
 800be58:	270a      	movs	r7, #10
 800be5a:	46a6      	mov	lr, r4
 800be5c:	460a      	mov	r2, r1
 800be5e:	fb91 f6f7 	sdiv	r6, r1, r7
 800be62:	fb07 1516 	mls	r5, r7, r6, r1
 800be66:	3530      	adds	r5, #48	; 0x30
 800be68:	2a63      	cmp	r2, #99	; 0x63
 800be6a:	f104 34ff 	add.w	r4, r4, #4294967295
 800be6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800be72:	4631      	mov	r1, r6
 800be74:	dcf1      	bgt.n	800be5a <__exponent+0x22>
 800be76:	3130      	adds	r1, #48	; 0x30
 800be78:	f1ae 0502 	sub.w	r5, lr, #2
 800be7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800be80:	1c44      	adds	r4, r0, #1
 800be82:	4629      	mov	r1, r5
 800be84:	4561      	cmp	r1, ip
 800be86:	d30a      	bcc.n	800be9e <__exponent+0x66>
 800be88:	f10d 0209 	add.w	r2, sp, #9
 800be8c:	eba2 020e 	sub.w	r2, r2, lr
 800be90:	4565      	cmp	r5, ip
 800be92:	bf88      	it	hi
 800be94:	2200      	movhi	r2, #0
 800be96:	4413      	add	r3, r2
 800be98:	1a18      	subs	r0, r3, r0
 800be9a:	b003      	add	sp, #12
 800be9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bea2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bea6:	e7ed      	b.n	800be84 <__exponent+0x4c>
 800bea8:	2330      	movs	r3, #48	; 0x30
 800beaa:	3130      	adds	r1, #48	; 0x30
 800beac:	7083      	strb	r3, [r0, #2]
 800beae:	70c1      	strb	r1, [r0, #3]
 800beb0:	1d03      	adds	r3, r0, #4
 800beb2:	e7f1      	b.n	800be98 <__exponent+0x60>

0800beb4 <_printf_float>:
 800beb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb8:	ed2d 8b02 	vpush	{d8}
 800bebc:	b08d      	sub	sp, #52	; 0x34
 800bebe:	460c      	mov	r4, r1
 800bec0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bec4:	4616      	mov	r6, r2
 800bec6:	461f      	mov	r7, r3
 800bec8:	4605      	mov	r5, r0
 800beca:	f001 fa55 	bl	800d378 <_localeconv_r>
 800bece:	f8d0 a000 	ldr.w	sl, [r0]
 800bed2:	4650      	mov	r0, sl
 800bed4:	f7f4 f9a4 	bl	8000220 <strlen>
 800bed8:	2300      	movs	r3, #0
 800beda:	930a      	str	r3, [sp, #40]	; 0x28
 800bedc:	6823      	ldr	r3, [r4, #0]
 800bede:	9305      	str	r3, [sp, #20]
 800bee0:	f8d8 3000 	ldr.w	r3, [r8]
 800bee4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bee8:	3307      	adds	r3, #7
 800beea:	f023 0307 	bic.w	r3, r3, #7
 800beee:	f103 0208 	add.w	r2, r3, #8
 800bef2:	f8c8 2000 	str.w	r2, [r8]
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800befe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bf02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf06:	9307      	str	r3, [sp, #28]
 800bf08:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf0c:	ee08 0a10 	vmov	s16, r0
 800bf10:	4b9f      	ldr	r3, [pc, #636]	; (800c190 <_printf_float+0x2dc>)
 800bf12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf16:	f04f 32ff 	mov.w	r2, #4294967295
 800bf1a:	f7f4 fe2f 	bl	8000b7c <__aeabi_dcmpun>
 800bf1e:	bb88      	cbnz	r0, 800bf84 <_printf_float+0xd0>
 800bf20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf24:	4b9a      	ldr	r3, [pc, #616]	; (800c190 <_printf_float+0x2dc>)
 800bf26:	f04f 32ff 	mov.w	r2, #4294967295
 800bf2a:	f7f4 fe09 	bl	8000b40 <__aeabi_dcmple>
 800bf2e:	bb48      	cbnz	r0, 800bf84 <_printf_float+0xd0>
 800bf30:	2200      	movs	r2, #0
 800bf32:	2300      	movs	r3, #0
 800bf34:	4640      	mov	r0, r8
 800bf36:	4649      	mov	r1, r9
 800bf38:	f7f4 fdf8 	bl	8000b2c <__aeabi_dcmplt>
 800bf3c:	b110      	cbz	r0, 800bf44 <_printf_float+0x90>
 800bf3e:	232d      	movs	r3, #45	; 0x2d
 800bf40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf44:	4b93      	ldr	r3, [pc, #588]	; (800c194 <_printf_float+0x2e0>)
 800bf46:	4894      	ldr	r0, [pc, #592]	; (800c198 <_printf_float+0x2e4>)
 800bf48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf4c:	bf94      	ite	ls
 800bf4e:	4698      	movls	r8, r3
 800bf50:	4680      	movhi	r8, r0
 800bf52:	2303      	movs	r3, #3
 800bf54:	6123      	str	r3, [r4, #16]
 800bf56:	9b05      	ldr	r3, [sp, #20]
 800bf58:	f023 0204 	bic.w	r2, r3, #4
 800bf5c:	6022      	str	r2, [r4, #0]
 800bf5e:	f04f 0900 	mov.w	r9, #0
 800bf62:	9700      	str	r7, [sp, #0]
 800bf64:	4633      	mov	r3, r6
 800bf66:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf68:	4621      	mov	r1, r4
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	f000 f9d8 	bl	800c320 <_printf_common>
 800bf70:	3001      	adds	r0, #1
 800bf72:	f040 8090 	bne.w	800c096 <_printf_float+0x1e2>
 800bf76:	f04f 30ff 	mov.w	r0, #4294967295
 800bf7a:	b00d      	add	sp, #52	; 0x34
 800bf7c:	ecbd 8b02 	vpop	{d8}
 800bf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf84:	4642      	mov	r2, r8
 800bf86:	464b      	mov	r3, r9
 800bf88:	4640      	mov	r0, r8
 800bf8a:	4649      	mov	r1, r9
 800bf8c:	f7f4 fdf6 	bl	8000b7c <__aeabi_dcmpun>
 800bf90:	b140      	cbz	r0, 800bfa4 <_printf_float+0xf0>
 800bf92:	464b      	mov	r3, r9
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	bfbc      	itt	lt
 800bf98:	232d      	movlt	r3, #45	; 0x2d
 800bf9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf9e:	487f      	ldr	r0, [pc, #508]	; (800c19c <_printf_float+0x2e8>)
 800bfa0:	4b7f      	ldr	r3, [pc, #508]	; (800c1a0 <_printf_float+0x2ec>)
 800bfa2:	e7d1      	b.n	800bf48 <_printf_float+0x94>
 800bfa4:	6863      	ldr	r3, [r4, #4]
 800bfa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bfaa:	9206      	str	r2, [sp, #24]
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	d13f      	bne.n	800c030 <_printf_float+0x17c>
 800bfb0:	2306      	movs	r3, #6
 800bfb2:	6063      	str	r3, [r4, #4]
 800bfb4:	9b05      	ldr	r3, [sp, #20]
 800bfb6:	6861      	ldr	r1, [r4, #4]
 800bfb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	9303      	str	r3, [sp, #12]
 800bfc0:	ab0a      	add	r3, sp, #40	; 0x28
 800bfc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bfc6:	ab09      	add	r3, sp, #36	; 0x24
 800bfc8:	ec49 8b10 	vmov	d0, r8, r9
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	6022      	str	r2, [r4, #0]
 800bfd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	f7ff fecd 	bl	800bd74 <__cvt>
 800bfda:	9b06      	ldr	r3, [sp, #24]
 800bfdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfde:	2b47      	cmp	r3, #71	; 0x47
 800bfe0:	4680      	mov	r8, r0
 800bfe2:	d108      	bne.n	800bff6 <_printf_float+0x142>
 800bfe4:	1cc8      	adds	r0, r1, #3
 800bfe6:	db02      	blt.n	800bfee <_printf_float+0x13a>
 800bfe8:	6863      	ldr	r3, [r4, #4]
 800bfea:	4299      	cmp	r1, r3
 800bfec:	dd41      	ble.n	800c072 <_printf_float+0x1be>
 800bfee:	f1ab 0b02 	sub.w	fp, fp, #2
 800bff2:	fa5f fb8b 	uxtb.w	fp, fp
 800bff6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bffa:	d820      	bhi.n	800c03e <_printf_float+0x18a>
 800bffc:	3901      	subs	r1, #1
 800bffe:	465a      	mov	r2, fp
 800c000:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c004:	9109      	str	r1, [sp, #36]	; 0x24
 800c006:	f7ff ff17 	bl	800be38 <__exponent>
 800c00a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c00c:	1813      	adds	r3, r2, r0
 800c00e:	2a01      	cmp	r2, #1
 800c010:	4681      	mov	r9, r0
 800c012:	6123      	str	r3, [r4, #16]
 800c014:	dc02      	bgt.n	800c01c <_printf_float+0x168>
 800c016:	6822      	ldr	r2, [r4, #0]
 800c018:	07d2      	lsls	r2, r2, #31
 800c01a:	d501      	bpl.n	800c020 <_printf_float+0x16c>
 800c01c:	3301      	adds	r3, #1
 800c01e:	6123      	str	r3, [r4, #16]
 800c020:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c024:	2b00      	cmp	r3, #0
 800c026:	d09c      	beq.n	800bf62 <_printf_float+0xae>
 800c028:	232d      	movs	r3, #45	; 0x2d
 800c02a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c02e:	e798      	b.n	800bf62 <_printf_float+0xae>
 800c030:	9a06      	ldr	r2, [sp, #24]
 800c032:	2a47      	cmp	r2, #71	; 0x47
 800c034:	d1be      	bne.n	800bfb4 <_printf_float+0x100>
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1bc      	bne.n	800bfb4 <_printf_float+0x100>
 800c03a:	2301      	movs	r3, #1
 800c03c:	e7b9      	b.n	800bfb2 <_printf_float+0xfe>
 800c03e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c042:	d118      	bne.n	800c076 <_printf_float+0x1c2>
 800c044:	2900      	cmp	r1, #0
 800c046:	6863      	ldr	r3, [r4, #4]
 800c048:	dd0b      	ble.n	800c062 <_printf_float+0x1ae>
 800c04a:	6121      	str	r1, [r4, #16]
 800c04c:	b913      	cbnz	r3, 800c054 <_printf_float+0x1a0>
 800c04e:	6822      	ldr	r2, [r4, #0]
 800c050:	07d0      	lsls	r0, r2, #31
 800c052:	d502      	bpl.n	800c05a <_printf_float+0x1a6>
 800c054:	3301      	adds	r3, #1
 800c056:	440b      	add	r3, r1
 800c058:	6123      	str	r3, [r4, #16]
 800c05a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c05c:	f04f 0900 	mov.w	r9, #0
 800c060:	e7de      	b.n	800c020 <_printf_float+0x16c>
 800c062:	b913      	cbnz	r3, 800c06a <_printf_float+0x1b6>
 800c064:	6822      	ldr	r2, [r4, #0]
 800c066:	07d2      	lsls	r2, r2, #31
 800c068:	d501      	bpl.n	800c06e <_printf_float+0x1ba>
 800c06a:	3302      	adds	r3, #2
 800c06c:	e7f4      	b.n	800c058 <_printf_float+0x1a4>
 800c06e:	2301      	movs	r3, #1
 800c070:	e7f2      	b.n	800c058 <_printf_float+0x1a4>
 800c072:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c078:	4299      	cmp	r1, r3
 800c07a:	db05      	blt.n	800c088 <_printf_float+0x1d4>
 800c07c:	6823      	ldr	r3, [r4, #0]
 800c07e:	6121      	str	r1, [r4, #16]
 800c080:	07d8      	lsls	r0, r3, #31
 800c082:	d5ea      	bpl.n	800c05a <_printf_float+0x1a6>
 800c084:	1c4b      	adds	r3, r1, #1
 800c086:	e7e7      	b.n	800c058 <_printf_float+0x1a4>
 800c088:	2900      	cmp	r1, #0
 800c08a:	bfd4      	ite	le
 800c08c:	f1c1 0202 	rsble	r2, r1, #2
 800c090:	2201      	movgt	r2, #1
 800c092:	4413      	add	r3, r2
 800c094:	e7e0      	b.n	800c058 <_printf_float+0x1a4>
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	055a      	lsls	r2, r3, #21
 800c09a:	d407      	bmi.n	800c0ac <_printf_float+0x1f8>
 800c09c:	6923      	ldr	r3, [r4, #16]
 800c09e:	4642      	mov	r2, r8
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	d12c      	bne.n	800c104 <_printf_float+0x250>
 800c0aa:	e764      	b.n	800bf76 <_printf_float+0xc2>
 800c0ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c0b0:	f240 80e0 	bls.w	800c274 <_printf_float+0x3c0>
 800c0b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	f7f4 fd2c 	bl	8000b18 <__aeabi_dcmpeq>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d034      	beq.n	800c12e <_printf_float+0x27a>
 800c0c4:	4a37      	ldr	r2, [pc, #220]	; (800c1a4 <_printf_float+0x2f0>)
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	4631      	mov	r1, r6
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	47b8      	blx	r7
 800c0ce:	3001      	adds	r0, #1
 800c0d0:	f43f af51 	beq.w	800bf76 <_printf_float+0xc2>
 800c0d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	db02      	blt.n	800c0e2 <_printf_float+0x22e>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	07d8      	lsls	r0, r3, #31
 800c0e0:	d510      	bpl.n	800c104 <_printf_float+0x250>
 800c0e2:	ee18 3a10 	vmov	r3, s16
 800c0e6:	4652      	mov	r2, sl
 800c0e8:	4631      	mov	r1, r6
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	47b8      	blx	r7
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	f43f af41 	beq.w	800bf76 <_printf_float+0xc2>
 800c0f4:	f04f 0800 	mov.w	r8, #0
 800c0f8:	f104 091a 	add.w	r9, r4, #26
 800c0fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0fe:	3b01      	subs	r3, #1
 800c100:	4543      	cmp	r3, r8
 800c102:	dc09      	bgt.n	800c118 <_printf_float+0x264>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	079b      	lsls	r3, r3, #30
 800c108:	f100 8105 	bmi.w	800c316 <_printf_float+0x462>
 800c10c:	68e0      	ldr	r0, [r4, #12]
 800c10e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c110:	4298      	cmp	r0, r3
 800c112:	bfb8      	it	lt
 800c114:	4618      	movlt	r0, r3
 800c116:	e730      	b.n	800bf7a <_printf_float+0xc6>
 800c118:	2301      	movs	r3, #1
 800c11a:	464a      	mov	r2, r9
 800c11c:	4631      	mov	r1, r6
 800c11e:	4628      	mov	r0, r5
 800c120:	47b8      	blx	r7
 800c122:	3001      	adds	r0, #1
 800c124:	f43f af27 	beq.w	800bf76 <_printf_float+0xc2>
 800c128:	f108 0801 	add.w	r8, r8, #1
 800c12c:	e7e6      	b.n	800c0fc <_printf_float+0x248>
 800c12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c130:	2b00      	cmp	r3, #0
 800c132:	dc39      	bgt.n	800c1a8 <_printf_float+0x2f4>
 800c134:	4a1b      	ldr	r2, [pc, #108]	; (800c1a4 <_printf_float+0x2f0>)
 800c136:	2301      	movs	r3, #1
 800c138:	4631      	mov	r1, r6
 800c13a:	4628      	mov	r0, r5
 800c13c:	47b8      	blx	r7
 800c13e:	3001      	adds	r0, #1
 800c140:	f43f af19 	beq.w	800bf76 <_printf_float+0xc2>
 800c144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c148:	4313      	orrs	r3, r2
 800c14a:	d102      	bne.n	800c152 <_printf_float+0x29e>
 800c14c:	6823      	ldr	r3, [r4, #0]
 800c14e:	07d9      	lsls	r1, r3, #31
 800c150:	d5d8      	bpl.n	800c104 <_printf_float+0x250>
 800c152:	ee18 3a10 	vmov	r3, s16
 800c156:	4652      	mov	r2, sl
 800c158:	4631      	mov	r1, r6
 800c15a:	4628      	mov	r0, r5
 800c15c:	47b8      	blx	r7
 800c15e:	3001      	adds	r0, #1
 800c160:	f43f af09 	beq.w	800bf76 <_printf_float+0xc2>
 800c164:	f04f 0900 	mov.w	r9, #0
 800c168:	f104 0a1a 	add.w	sl, r4, #26
 800c16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c16e:	425b      	negs	r3, r3
 800c170:	454b      	cmp	r3, r9
 800c172:	dc01      	bgt.n	800c178 <_printf_float+0x2c4>
 800c174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c176:	e792      	b.n	800c09e <_printf_float+0x1ea>
 800c178:	2301      	movs	r3, #1
 800c17a:	4652      	mov	r2, sl
 800c17c:	4631      	mov	r1, r6
 800c17e:	4628      	mov	r0, r5
 800c180:	47b8      	blx	r7
 800c182:	3001      	adds	r0, #1
 800c184:	f43f aef7 	beq.w	800bf76 <_printf_float+0xc2>
 800c188:	f109 0901 	add.w	r9, r9, #1
 800c18c:	e7ee      	b.n	800c16c <_printf_float+0x2b8>
 800c18e:	bf00      	nop
 800c190:	7fefffff 	.word	0x7fefffff
 800c194:	0801008c 	.word	0x0801008c
 800c198:	08010090 	.word	0x08010090
 800c19c:	08010098 	.word	0x08010098
 800c1a0:	08010094 	.word	0x08010094
 800c1a4:	0801009c 	.word	0x0801009c
 800c1a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	bfa8      	it	ge
 800c1b0:	461a      	movge	r2, r3
 800c1b2:	2a00      	cmp	r2, #0
 800c1b4:	4691      	mov	r9, r2
 800c1b6:	dc37      	bgt.n	800c228 <_printf_float+0x374>
 800c1b8:	f04f 0b00 	mov.w	fp, #0
 800c1bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1c0:	f104 021a 	add.w	r2, r4, #26
 800c1c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1c6:	9305      	str	r3, [sp, #20]
 800c1c8:	eba3 0309 	sub.w	r3, r3, r9
 800c1cc:	455b      	cmp	r3, fp
 800c1ce:	dc33      	bgt.n	800c238 <_printf_float+0x384>
 800c1d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	db3b      	blt.n	800c250 <_printf_float+0x39c>
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	07da      	lsls	r2, r3, #31
 800c1dc:	d438      	bmi.n	800c250 <_printf_float+0x39c>
 800c1de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1e0:	9b05      	ldr	r3, [sp, #20]
 800c1e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1e4:	1ad3      	subs	r3, r2, r3
 800c1e6:	eba2 0901 	sub.w	r9, r2, r1
 800c1ea:	4599      	cmp	r9, r3
 800c1ec:	bfa8      	it	ge
 800c1ee:	4699      	movge	r9, r3
 800c1f0:	f1b9 0f00 	cmp.w	r9, #0
 800c1f4:	dc35      	bgt.n	800c262 <_printf_float+0x3ae>
 800c1f6:	f04f 0800 	mov.w	r8, #0
 800c1fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1fe:	f104 0a1a 	add.w	sl, r4, #26
 800c202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c206:	1a9b      	subs	r3, r3, r2
 800c208:	eba3 0309 	sub.w	r3, r3, r9
 800c20c:	4543      	cmp	r3, r8
 800c20e:	f77f af79 	ble.w	800c104 <_printf_float+0x250>
 800c212:	2301      	movs	r3, #1
 800c214:	4652      	mov	r2, sl
 800c216:	4631      	mov	r1, r6
 800c218:	4628      	mov	r0, r5
 800c21a:	47b8      	blx	r7
 800c21c:	3001      	adds	r0, #1
 800c21e:	f43f aeaa 	beq.w	800bf76 <_printf_float+0xc2>
 800c222:	f108 0801 	add.w	r8, r8, #1
 800c226:	e7ec      	b.n	800c202 <_printf_float+0x34e>
 800c228:	4613      	mov	r3, r2
 800c22a:	4631      	mov	r1, r6
 800c22c:	4642      	mov	r2, r8
 800c22e:	4628      	mov	r0, r5
 800c230:	47b8      	blx	r7
 800c232:	3001      	adds	r0, #1
 800c234:	d1c0      	bne.n	800c1b8 <_printf_float+0x304>
 800c236:	e69e      	b.n	800bf76 <_printf_float+0xc2>
 800c238:	2301      	movs	r3, #1
 800c23a:	4631      	mov	r1, r6
 800c23c:	4628      	mov	r0, r5
 800c23e:	9205      	str	r2, [sp, #20]
 800c240:	47b8      	blx	r7
 800c242:	3001      	adds	r0, #1
 800c244:	f43f ae97 	beq.w	800bf76 <_printf_float+0xc2>
 800c248:	9a05      	ldr	r2, [sp, #20]
 800c24a:	f10b 0b01 	add.w	fp, fp, #1
 800c24e:	e7b9      	b.n	800c1c4 <_printf_float+0x310>
 800c250:	ee18 3a10 	vmov	r3, s16
 800c254:	4652      	mov	r2, sl
 800c256:	4631      	mov	r1, r6
 800c258:	4628      	mov	r0, r5
 800c25a:	47b8      	blx	r7
 800c25c:	3001      	adds	r0, #1
 800c25e:	d1be      	bne.n	800c1de <_printf_float+0x32a>
 800c260:	e689      	b.n	800bf76 <_printf_float+0xc2>
 800c262:	9a05      	ldr	r2, [sp, #20]
 800c264:	464b      	mov	r3, r9
 800c266:	4442      	add	r2, r8
 800c268:	4631      	mov	r1, r6
 800c26a:	4628      	mov	r0, r5
 800c26c:	47b8      	blx	r7
 800c26e:	3001      	adds	r0, #1
 800c270:	d1c1      	bne.n	800c1f6 <_printf_float+0x342>
 800c272:	e680      	b.n	800bf76 <_printf_float+0xc2>
 800c274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c276:	2a01      	cmp	r2, #1
 800c278:	dc01      	bgt.n	800c27e <_printf_float+0x3ca>
 800c27a:	07db      	lsls	r3, r3, #31
 800c27c:	d538      	bpl.n	800c2f0 <_printf_float+0x43c>
 800c27e:	2301      	movs	r3, #1
 800c280:	4642      	mov	r2, r8
 800c282:	4631      	mov	r1, r6
 800c284:	4628      	mov	r0, r5
 800c286:	47b8      	blx	r7
 800c288:	3001      	adds	r0, #1
 800c28a:	f43f ae74 	beq.w	800bf76 <_printf_float+0xc2>
 800c28e:	ee18 3a10 	vmov	r3, s16
 800c292:	4652      	mov	r2, sl
 800c294:	4631      	mov	r1, r6
 800c296:	4628      	mov	r0, r5
 800c298:	47b8      	blx	r7
 800c29a:	3001      	adds	r0, #1
 800c29c:	f43f ae6b 	beq.w	800bf76 <_printf_float+0xc2>
 800c2a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	f7f4 fc36 	bl	8000b18 <__aeabi_dcmpeq>
 800c2ac:	b9d8      	cbnz	r0, 800c2e6 <_printf_float+0x432>
 800c2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2b0:	f108 0201 	add.w	r2, r8, #1
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	4631      	mov	r1, r6
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	47b8      	blx	r7
 800c2bc:	3001      	adds	r0, #1
 800c2be:	d10e      	bne.n	800c2de <_printf_float+0x42a>
 800c2c0:	e659      	b.n	800bf76 <_printf_float+0xc2>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	4652      	mov	r2, sl
 800c2c6:	4631      	mov	r1, r6
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	47b8      	blx	r7
 800c2cc:	3001      	adds	r0, #1
 800c2ce:	f43f ae52 	beq.w	800bf76 <_printf_float+0xc2>
 800c2d2:	f108 0801 	add.w	r8, r8, #1
 800c2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	4543      	cmp	r3, r8
 800c2dc:	dcf1      	bgt.n	800c2c2 <_printf_float+0x40e>
 800c2de:	464b      	mov	r3, r9
 800c2e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c2e4:	e6dc      	b.n	800c0a0 <_printf_float+0x1ec>
 800c2e6:	f04f 0800 	mov.w	r8, #0
 800c2ea:	f104 0a1a 	add.w	sl, r4, #26
 800c2ee:	e7f2      	b.n	800c2d6 <_printf_float+0x422>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	4642      	mov	r2, r8
 800c2f4:	e7df      	b.n	800c2b6 <_printf_float+0x402>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	464a      	mov	r2, r9
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	47b8      	blx	r7
 800c300:	3001      	adds	r0, #1
 800c302:	f43f ae38 	beq.w	800bf76 <_printf_float+0xc2>
 800c306:	f108 0801 	add.w	r8, r8, #1
 800c30a:	68e3      	ldr	r3, [r4, #12]
 800c30c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c30e:	1a5b      	subs	r3, r3, r1
 800c310:	4543      	cmp	r3, r8
 800c312:	dcf0      	bgt.n	800c2f6 <_printf_float+0x442>
 800c314:	e6fa      	b.n	800c10c <_printf_float+0x258>
 800c316:	f04f 0800 	mov.w	r8, #0
 800c31a:	f104 0919 	add.w	r9, r4, #25
 800c31e:	e7f4      	b.n	800c30a <_printf_float+0x456>

0800c320 <_printf_common>:
 800c320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c324:	4616      	mov	r6, r2
 800c326:	4699      	mov	r9, r3
 800c328:	688a      	ldr	r2, [r1, #8]
 800c32a:	690b      	ldr	r3, [r1, #16]
 800c32c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c330:	4293      	cmp	r3, r2
 800c332:	bfb8      	it	lt
 800c334:	4613      	movlt	r3, r2
 800c336:	6033      	str	r3, [r6, #0]
 800c338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c33c:	4607      	mov	r7, r0
 800c33e:	460c      	mov	r4, r1
 800c340:	b10a      	cbz	r2, 800c346 <_printf_common+0x26>
 800c342:	3301      	adds	r3, #1
 800c344:	6033      	str	r3, [r6, #0]
 800c346:	6823      	ldr	r3, [r4, #0]
 800c348:	0699      	lsls	r1, r3, #26
 800c34a:	bf42      	ittt	mi
 800c34c:	6833      	ldrmi	r3, [r6, #0]
 800c34e:	3302      	addmi	r3, #2
 800c350:	6033      	strmi	r3, [r6, #0]
 800c352:	6825      	ldr	r5, [r4, #0]
 800c354:	f015 0506 	ands.w	r5, r5, #6
 800c358:	d106      	bne.n	800c368 <_printf_common+0x48>
 800c35a:	f104 0a19 	add.w	sl, r4, #25
 800c35e:	68e3      	ldr	r3, [r4, #12]
 800c360:	6832      	ldr	r2, [r6, #0]
 800c362:	1a9b      	subs	r3, r3, r2
 800c364:	42ab      	cmp	r3, r5
 800c366:	dc26      	bgt.n	800c3b6 <_printf_common+0x96>
 800c368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c36c:	1e13      	subs	r3, r2, #0
 800c36e:	6822      	ldr	r2, [r4, #0]
 800c370:	bf18      	it	ne
 800c372:	2301      	movne	r3, #1
 800c374:	0692      	lsls	r2, r2, #26
 800c376:	d42b      	bmi.n	800c3d0 <_printf_common+0xb0>
 800c378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c37c:	4649      	mov	r1, r9
 800c37e:	4638      	mov	r0, r7
 800c380:	47c0      	blx	r8
 800c382:	3001      	adds	r0, #1
 800c384:	d01e      	beq.n	800c3c4 <_printf_common+0xa4>
 800c386:	6823      	ldr	r3, [r4, #0]
 800c388:	68e5      	ldr	r5, [r4, #12]
 800c38a:	6832      	ldr	r2, [r6, #0]
 800c38c:	f003 0306 	and.w	r3, r3, #6
 800c390:	2b04      	cmp	r3, #4
 800c392:	bf08      	it	eq
 800c394:	1aad      	subeq	r5, r5, r2
 800c396:	68a3      	ldr	r3, [r4, #8]
 800c398:	6922      	ldr	r2, [r4, #16]
 800c39a:	bf0c      	ite	eq
 800c39c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3a0:	2500      	movne	r5, #0
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	bfc4      	itt	gt
 800c3a6:	1a9b      	subgt	r3, r3, r2
 800c3a8:	18ed      	addgt	r5, r5, r3
 800c3aa:	2600      	movs	r6, #0
 800c3ac:	341a      	adds	r4, #26
 800c3ae:	42b5      	cmp	r5, r6
 800c3b0:	d11a      	bne.n	800c3e8 <_printf_common+0xc8>
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	e008      	b.n	800c3c8 <_printf_common+0xa8>
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	4652      	mov	r2, sl
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	4638      	mov	r0, r7
 800c3be:	47c0      	blx	r8
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	d103      	bne.n	800c3cc <_printf_common+0xac>
 800c3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3cc:	3501      	adds	r5, #1
 800c3ce:	e7c6      	b.n	800c35e <_printf_common+0x3e>
 800c3d0:	18e1      	adds	r1, r4, r3
 800c3d2:	1c5a      	adds	r2, r3, #1
 800c3d4:	2030      	movs	r0, #48	; 0x30
 800c3d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3da:	4422      	add	r2, r4
 800c3dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3e4:	3302      	adds	r3, #2
 800c3e6:	e7c7      	b.n	800c378 <_printf_common+0x58>
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	4622      	mov	r2, r4
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	4638      	mov	r0, r7
 800c3f0:	47c0      	blx	r8
 800c3f2:	3001      	adds	r0, #1
 800c3f4:	d0e6      	beq.n	800c3c4 <_printf_common+0xa4>
 800c3f6:	3601      	adds	r6, #1
 800c3f8:	e7d9      	b.n	800c3ae <_printf_common+0x8e>
	...

0800c3fc <_printf_i>:
 800c3fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c400:	460c      	mov	r4, r1
 800c402:	4691      	mov	r9, r2
 800c404:	7e27      	ldrb	r7, [r4, #24]
 800c406:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c408:	2f78      	cmp	r7, #120	; 0x78
 800c40a:	4680      	mov	r8, r0
 800c40c:	469a      	mov	sl, r3
 800c40e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c412:	d807      	bhi.n	800c424 <_printf_i+0x28>
 800c414:	2f62      	cmp	r7, #98	; 0x62
 800c416:	d80a      	bhi.n	800c42e <_printf_i+0x32>
 800c418:	2f00      	cmp	r7, #0
 800c41a:	f000 80d8 	beq.w	800c5ce <_printf_i+0x1d2>
 800c41e:	2f58      	cmp	r7, #88	; 0x58
 800c420:	f000 80a3 	beq.w	800c56a <_printf_i+0x16e>
 800c424:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c42c:	e03a      	b.n	800c4a4 <_printf_i+0xa8>
 800c42e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c432:	2b15      	cmp	r3, #21
 800c434:	d8f6      	bhi.n	800c424 <_printf_i+0x28>
 800c436:	a001      	add	r0, pc, #4	; (adr r0, 800c43c <_printf_i+0x40>)
 800c438:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c43c:	0800c495 	.word	0x0800c495
 800c440:	0800c4a9 	.word	0x0800c4a9
 800c444:	0800c425 	.word	0x0800c425
 800c448:	0800c425 	.word	0x0800c425
 800c44c:	0800c425 	.word	0x0800c425
 800c450:	0800c425 	.word	0x0800c425
 800c454:	0800c4a9 	.word	0x0800c4a9
 800c458:	0800c425 	.word	0x0800c425
 800c45c:	0800c425 	.word	0x0800c425
 800c460:	0800c425 	.word	0x0800c425
 800c464:	0800c425 	.word	0x0800c425
 800c468:	0800c5b5 	.word	0x0800c5b5
 800c46c:	0800c4d9 	.word	0x0800c4d9
 800c470:	0800c597 	.word	0x0800c597
 800c474:	0800c425 	.word	0x0800c425
 800c478:	0800c425 	.word	0x0800c425
 800c47c:	0800c5d7 	.word	0x0800c5d7
 800c480:	0800c425 	.word	0x0800c425
 800c484:	0800c4d9 	.word	0x0800c4d9
 800c488:	0800c425 	.word	0x0800c425
 800c48c:	0800c425 	.word	0x0800c425
 800c490:	0800c59f 	.word	0x0800c59f
 800c494:	680b      	ldr	r3, [r1, #0]
 800c496:	1d1a      	adds	r2, r3, #4
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	600a      	str	r2, [r1, #0]
 800c49c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c4a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e0a3      	b.n	800c5f0 <_printf_i+0x1f4>
 800c4a8:	6825      	ldr	r5, [r4, #0]
 800c4aa:	6808      	ldr	r0, [r1, #0]
 800c4ac:	062e      	lsls	r6, r5, #24
 800c4ae:	f100 0304 	add.w	r3, r0, #4
 800c4b2:	d50a      	bpl.n	800c4ca <_printf_i+0xce>
 800c4b4:	6805      	ldr	r5, [r0, #0]
 800c4b6:	600b      	str	r3, [r1, #0]
 800c4b8:	2d00      	cmp	r5, #0
 800c4ba:	da03      	bge.n	800c4c4 <_printf_i+0xc8>
 800c4bc:	232d      	movs	r3, #45	; 0x2d
 800c4be:	426d      	negs	r5, r5
 800c4c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4c4:	485e      	ldr	r0, [pc, #376]	; (800c640 <_printf_i+0x244>)
 800c4c6:	230a      	movs	r3, #10
 800c4c8:	e019      	b.n	800c4fe <_printf_i+0x102>
 800c4ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c4ce:	6805      	ldr	r5, [r0, #0]
 800c4d0:	600b      	str	r3, [r1, #0]
 800c4d2:	bf18      	it	ne
 800c4d4:	b22d      	sxthne	r5, r5
 800c4d6:	e7ef      	b.n	800c4b8 <_printf_i+0xbc>
 800c4d8:	680b      	ldr	r3, [r1, #0]
 800c4da:	6825      	ldr	r5, [r4, #0]
 800c4dc:	1d18      	adds	r0, r3, #4
 800c4de:	6008      	str	r0, [r1, #0]
 800c4e0:	0628      	lsls	r0, r5, #24
 800c4e2:	d501      	bpl.n	800c4e8 <_printf_i+0xec>
 800c4e4:	681d      	ldr	r5, [r3, #0]
 800c4e6:	e002      	b.n	800c4ee <_printf_i+0xf2>
 800c4e8:	0669      	lsls	r1, r5, #25
 800c4ea:	d5fb      	bpl.n	800c4e4 <_printf_i+0xe8>
 800c4ec:	881d      	ldrh	r5, [r3, #0]
 800c4ee:	4854      	ldr	r0, [pc, #336]	; (800c640 <_printf_i+0x244>)
 800c4f0:	2f6f      	cmp	r7, #111	; 0x6f
 800c4f2:	bf0c      	ite	eq
 800c4f4:	2308      	moveq	r3, #8
 800c4f6:	230a      	movne	r3, #10
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4fe:	6866      	ldr	r6, [r4, #4]
 800c500:	60a6      	str	r6, [r4, #8]
 800c502:	2e00      	cmp	r6, #0
 800c504:	bfa2      	ittt	ge
 800c506:	6821      	ldrge	r1, [r4, #0]
 800c508:	f021 0104 	bicge.w	r1, r1, #4
 800c50c:	6021      	strge	r1, [r4, #0]
 800c50e:	b90d      	cbnz	r5, 800c514 <_printf_i+0x118>
 800c510:	2e00      	cmp	r6, #0
 800c512:	d04d      	beq.n	800c5b0 <_printf_i+0x1b4>
 800c514:	4616      	mov	r6, r2
 800c516:	fbb5 f1f3 	udiv	r1, r5, r3
 800c51a:	fb03 5711 	mls	r7, r3, r1, r5
 800c51e:	5dc7      	ldrb	r7, [r0, r7]
 800c520:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c524:	462f      	mov	r7, r5
 800c526:	42bb      	cmp	r3, r7
 800c528:	460d      	mov	r5, r1
 800c52a:	d9f4      	bls.n	800c516 <_printf_i+0x11a>
 800c52c:	2b08      	cmp	r3, #8
 800c52e:	d10b      	bne.n	800c548 <_printf_i+0x14c>
 800c530:	6823      	ldr	r3, [r4, #0]
 800c532:	07df      	lsls	r7, r3, #31
 800c534:	d508      	bpl.n	800c548 <_printf_i+0x14c>
 800c536:	6923      	ldr	r3, [r4, #16]
 800c538:	6861      	ldr	r1, [r4, #4]
 800c53a:	4299      	cmp	r1, r3
 800c53c:	bfde      	ittt	le
 800c53e:	2330      	movle	r3, #48	; 0x30
 800c540:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c544:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c548:	1b92      	subs	r2, r2, r6
 800c54a:	6122      	str	r2, [r4, #16]
 800c54c:	f8cd a000 	str.w	sl, [sp]
 800c550:	464b      	mov	r3, r9
 800c552:	aa03      	add	r2, sp, #12
 800c554:	4621      	mov	r1, r4
 800c556:	4640      	mov	r0, r8
 800c558:	f7ff fee2 	bl	800c320 <_printf_common>
 800c55c:	3001      	adds	r0, #1
 800c55e:	d14c      	bne.n	800c5fa <_printf_i+0x1fe>
 800c560:	f04f 30ff 	mov.w	r0, #4294967295
 800c564:	b004      	add	sp, #16
 800c566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c56a:	4835      	ldr	r0, [pc, #212]	; (800c640 <_printf_i+0x244>)
 800c56c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c570:	6823      	ldr	r3, [r4, #0]
 800c572:	680e      	ldr	r6, [r1, #0]
 800c574:	061f      	lsls	r7, r3, #24
 800c576:	f856 5b04 	ldr.w	r5, [r6], #4
 800c57a:	600e      	str	r6, [r1, #0]
 800c57c:	d514      	bpl.n	800c5a8 <_printf_i+0x1ac>
 800c57e:	07d9      	lsls	r1, r3, #31
 800c580:	bf44      	itt	mi
 800c582:	f043 0320 	orrmi.w	r3, r3, #32
 800c586:	6023      	strmi	r3, [r4, #0]
 800c588:	b91d      	cbnz	r5, 800c592 <_printf_i+0x196>
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	f023 0320 	bic.w	r3, r3, #32
 800c590:	6023      	str	r3, [r4, #0]
 800c592:	2310      	movs	r3, #16
 800c594:	e7b0      	b.n	800c4f8 <_printf_i+0xfc>
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	f043 0320 	orr.w	r3, r3, #32
 800c59c:	6023      	str	r3, [r4, #0]
 800c59e:	2378      	movs	r3, #120	; 0x78
 800c5a0:	4828      	ldr	r0, [pc, #160]	; (800c644 <_printf_i+0x248>)
 800c5a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5a6:	e7e3      	b.n	800c570 <_printf_i+0x174>
 800c5a8:	065e      	lsls	r6, r3, #25
 800c5aa:	bf48      	it	mi
 800c5ac:	b2ad      	uxthmi	r5, r5
 800c5ae:	e7e6      	b.n	800c57e <_printf_i+0x182>
 800c5b0:	4616      	mov	r6, r2
 800c5b2:	e7bb      	b.n	800c52c <_printf_i+0x130>
 800c5b4:	680b      	ldr	r3, [r1, #0]
 800c5b6:	6826      	ldr	r6, [r4, #0]
 800c5b8:	6960      	ldr	r0, [r4, #20]
 800c5ba:	1d1d      	adds	r5, r3, #4
 800c5bc:	600d      	str	r5, [r1, #0]
 800c5be:	0635      	lsls	r5, r6, #24
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	d501      	bpl.n	800c5c8 <_printf_i+0x1cc>
 800c5c4:	6018      	str	r0, [r3, #0]
 800c5c6:	e002      	b.n	800c5ce <_printf_i+0x1d2>
 800c5c8:	0671      	lsls	r1, r6, #25
 800c5ca:	d5fb      	bpl.n	800c5c4 <_printf_i+0x1c8>
 800c5cc:	8018      	strh	r0, [r3, #0]
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	6123      	str	r3, [r4, #16]
 800c5d2:	4616      	mov	r6, r2
 800c5d4:	e7ba      	b.n	800c54c <_printf_i+0x150>
 800c5d6:	680b      	ldr	r3, [r1, #0]
 800c5d8:	1d1a      	adds	r2, r3, #4
 800c5da:	600a      	str	r2, [r1, #0]
 800c5dc:	681e      	ldr	r6, [r3, #0]
 800c5de:	6862      	ldr	r2, [r4, #4]
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f7f3 fe24 	bl	8000230 <memchr>
 800c5e8:	b108      	cbz	r0, 800c5ee <_printf_i+0x1f2>
 800c5ea:	1b80      	subs	r0, r0, r6
 800c5ec:	6060      	str	r0, [r4, #4]
 800c5ee:	6863      	ldr	r3, [r4, #4]
 800c5f0:	6123      	str	r3, [r4, #16]
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5f8:	e7a8      	b.n	800c54c <_printf_i+0x150>
 800c5fa:	6923      	ldr	r3, [r4, #16]
 800c5fc:	4632      	mov	r2, r6
 800c5fe:	4649      	mov	r1, r9
 800c600:	4640      	mov	r0, r8
 800c602:	47d0      	blx	sl
 800c604:	3001      	adds	r0, #1
 800c606:	d0ab      	beq.n	800c560 <_printf_i+0x164>
 800c608:	6823      	ldr	r3, [r4, #0]
 800c60a:	079b      	lsls	r3, r3, #30
 800c60c:	d413      	bmi.n	800c636 <_printf_i+0x23a>
 800c60e:	68e0      	ldr	r0, [r4, #12]
 800c610:	9b03      	ldr	r3, [sp, #12]
 800c612:	4298      	cmp	r0, r3
 800c614:	bfb8      	it	lt
 800c616:	4618      	movlt	r0, r3
 800c618:	e7a4      	b.n	800c564 <_printf_i+0x168>
 800c61a:	2301      	movs	r3, #1
 800c61c:	4632      	mov	r2, r6
 800c61e:	4649      	mov	r1, r9
 800c620:	4640      	mov	r0, r8
 800c622:	47d0      	blx	sl
 800c624:	3001      	adds	r0, #1
 800c626:	d09b      	beq.n	800c560 <_printf_i+0x164>
 800c628:	3501      	adds	r5, #1
 800c62a:	68e3      	ldr	r3, [r4, #12]
 800c62c:	9903      	ldr	r1, [sp, #12]
 800c62e:	1a5b      	subs	r3, r3, r1
 800c630:	42ab      	cmp	r3, r5
 800c632:	dcf2      	bgt.n	800c61a <_printf_i+0x21e>
 800c634:	e7eb      	b.n	800c60e <_printf_i+0x212>
 800c636:	2500      	movs	r5, #0
 800c638:	f104 0619 	add.w	r6, r4, #25
 800c63c:	e7f5      	b.n	800c62a <_printf_i+0x22e>
 800c63e:	bf00      	nop
 800c640:	0801009e 	.word	0x0801009e
 800c644:	080100af 	.word	0x080100af

0800c648 <siprintf>:
 800c648:	b40e      	push	{r1, r2, r3}
 800c64a:	b500      	push	{lr}
 800c64c:	b09c      	sub	sp, #112	; 0x70
 800c64e:	ab1d      	add	r3, sp, #116	; 0x74
 800c650:	9002      	str	r0, [sp, #8]
 800c652:	9006      	str	r0, [sp, #24]
 800c654:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c658:	4809      	ldr	r0, [pc, #36]	; (800c680 <siprintf+0x38>)
 800c65a:	9107      	str	r1, [sp, #28]
 800c65c:	9104      	str	r1, [sp, #16]
 800c65e:	4909      	ldr	r1, [pc, #36]	; (800c684 <siprintf+0x3c>)
 800c660:	f853 2b04 	ldr.w	r2, [r3], #4
 800c664:	9105      	str	r1, [sp, #20]
 800c666:	6800      	ldr	r0, [r0, #0]
 800c668:	9301      	str	r3, [sp, #4]
 800c66a:	a902      	add	r1, sp, #8
 800c66c:	f001 fb24 	bl	800dcb8 <_svfiprintf_r>
 800c670:	9b02      	ldr	r3, [sp, #8]
 800c672:	2200      	movs	r2, #0
 800c674:	701a      	strb	r2, [r3, #0]
 800c676:	b01c      	add	sp, #112	; 0x70
 800c678:	f85d eb04 	ldr.w	lr, [sp], #4
 800c67c:	b003      	add	sp, #12
 800c67e:	4770      	bx	lr
 800c680:	20000034 	.word	0x20000034
 800c684:	ffff0208 	.word	0xffff0208

0800c688 <quorem>:
 800c688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	6903      	ldr	r3, [r0, #16]
 800c68e:	690c      	ldr	r4, [r1, #16]
 800c690:	42a3      	cmp	r3, r4
 800c692:	4607      	mov	r7, r0
 800c694:	f2c0 8081 	blt.w	800c79a <quorem+0x112>
 800c698:	3c01      	subs	r4, #1
 800c69a:	f101 0814 	add.w	r8, r1, #20
 800c69e:	f100 0514 	add.w	r5, r0, #20
 800c6a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6a6:	9301      	str	r3, [sp, #4]
 800c6a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c6ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c6b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c6bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800c6c0:	d331      	bcc.n	800c726 <quorem+0x9e>
 800c6c2:	f04f 0e00 	mov.w	lr, #0
 800c6c6:	4640      	mov	r0, r8
 800c6c8:	46ac      	mov	ip, r5
 800c6ca:	46f2      	mov	sl, lr
 800c6cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c6d0:	b293      	uxth	r3, r2
 800c6d2:	fb06 e303 	mla	r3, r6, r3, lr
 800c6d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	ebaa 0303 	sub.w	r3, sl, r3
 800c6e0:	0c12      	lsrs	r2, r2, #16
 800c6e2:	f8dc a000 	ldr.w	sl, [ip]
 800c6e6:	fb06 e202 	mla	r2, r6, r2, lr
 800c6ea:	fa13 f38a 	uxtah	r3, r3, sl
 800c6ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c6f2:	fa1f fa82 	uxth.w	sl, r2
 800c6f6:	f8dc 2000 	ldr.w	r2, [ip]
 800c6fa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c6fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c702:	b29b      	uxth	r3, r3
 800c704:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c708:	4581      	cmp	r9, r0
 800c70a:	f84c 3b04 	str.w	r3, [ip], #4
 800c70e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c712:	d2db      	bcs.n	800c6cc <quorem+0x44>
 800c714:	f855 300b 	ldr.w	r3, [r5, fp]
 800c718:	b92b      	cbnz	r3, 800c726 <quorem+0x9e>
 800c71a:	9b01      	ldr	r3, [sp, #4]
 800c71c:	3b04      	subs	r3, #4
 800c71e:	429d      	cmp	r5, r3
 800c720:	461a      	mov	r2, r3
 800c722:	d32e      	bcc.n	800c782 <quorem+0xfa>
 800c724:	613c      	str	r4, [r7, #16]
 800c726:	4638      	mov	r0, r7
 800c728:	f001 f8b0 	bl	800d88c <__mcmp>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	db24      	blt.n	800c77a <quorem+0xf2>
 800c730:	3601      	adds	r6, #1
 800c732:	4628      	mov	r0, r5
 800c734:	f04f 0c00 	mov.w	ip, #0
 800c738:	f858 2b04 	ldr.w	r2, [r8], #4
 800c73c:	f8d0 e000 	ldr.w	lr, [r0]
 800c740:	b293      	uxth	r3, r2
 800c742:	ebac 0303 	sub.w	r3, ip, r3
 800c746:	0c12      	lsrs	r2, r2, #16
 800c748:	fa13 f38e 	uxtah	r3, r3, lr
 800c74c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c750:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c754:	b29b      	uxth	r3, r3
 800c756:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c75a:	45c1      	cmp	r9, r8
 800c75c:	f840 3b04 	str.w	r3, [r0], #4
 800c760:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c764:	d2e8      	bcs.n	800c738 <quorem+0xb0>
 800c766:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c76a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c76e:	b922      	cbnz	r2, 800c77a <quorem+0xf2>
 800c770:	3b04      	subs	r3, #4
 800c772:	429d      	cmp	r5, r3
 800c774:	461a      	mov	r2, r3
 800c776:	d30a      	bcc.n	800c78e <quorem+0x106>
 800c778:	613c      	str	r4, [r7, #16]
 800c77a:	4630      	mov	r0, r6
 800c77c:	b003      	add	sp, #12
 800c77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c782:	6812      	ldr	r2, [r2, #0]
 800c784:	3b04      	subs	r3, #4
 800c786:	2a00      	cmp	r2, #0
 800c788:	d1cc      	bne.n	800c724 <quorem+0x9c>
 800c78a:	3c01      	subs	r4, #1
 800c78c:	e7c7      	b.n	800c71e <quorem+0x96>
 800c78e:	6812      	ldr	r2, [r2, #0]
 800c790:	3b04      	subs	r3, #4
 800c792:	2a00      	cmp	r2, #0
 800c794:	d1f0      	bne.n	800c778 <quorem+0xf0>
 800c796:	3c01      	subs	r4, #1
 800c798:	e7eb      	b.n	800c772 <quorem+0xea>
 800c79a:	2000      	movs	r0, #0
 800c79c:	e7ee      	b.n	800c77c <quorem+0xf4>
	...

0800c7a0 <_dtoa_r>:
 800c7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a4:	ed2d 8b02 	vpush	{d8}
 800c7a8:	ec57 6b10 	vmov	r6, r7, d0
 800c7ac:	b095      	sub	sp, #84	; 0x54
 800c7ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c7b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c7b4:	9105      	str	r1, [sp, #20]
 800c7b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c7be:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7c0:	b975      	cbnz	r5, 800c7e0 <_dtoa_r+0x40>
 800c7c2:	2010      	movs	r0, #16
 800c7c4:	f000 fddc 	bl	800d380 <malloc>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	6260      	str	r0, [r4, #36]	; 0x24
 800c7cc:	b920      	cbnz	r0, 800c7d8 <_dtoa_r+0x38>
 800c7ce:	4bb2      	ldr	r3, [pc, #712]	; (800ca98 <_dtoa_r+0x2f8>)
 800c7d0:	21ea      	movs	r1, #234	; 0xea
 800c7d2:	48b2      	ldr	r0, [pc, #712]	; (800ca9c <_dtoa_r+0x2fc>)
 800c7d4:	f001 fb80 	bl	800ded8 <__assert_func>
 800c7d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c7dc:	6005      	str	r5, [r0, #0]
 800c7de:	60c5      	str	r5, [r0, #12]
 800c7e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7e2:	6819      	ldr	r1, [r3, #0]
 800c7e4:	b151      	cbz	r1, 800c7fc <_dtoa_r+0x5c>
 800c7e6:	685a      	ldr	r2, [r3, #4]
 800c7e8:	604a      	str	r2, [r1, #4]
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	4093      	lsls	r3, r2
 800c7ee:	608b      	str	r3, [r1, #8]
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f000 fe0d 	bl	800d410 <_Bfree>
 800c7f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	601a      	str	r2, [r3, #0]
 800c7fc:	1e3b      	subs	r3, r7, #0
 800c7fe:	bfb9      	ittee	lt
 800c800:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c804:	9303      	strlt	r3, [sp, #12]
 800c806:	2300      	movge	r3, #0
 800c808:	f8c8 3000 	strge.w	r3, [r8]
 800c80c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c810:	4ba3      	ldr	r3, [pc, #652]	; (800caa0 <_dtoa_r+0x300>)
 800c812:	bfbc      	itt	lt
 800c814:	2201      	movlt	r2, #1
 800c816:	f8c8 2000 	strlt.w	r2, [r8]
 800c81a:	ea33 0309 	bics.w	r3, r3, r9
 800c81e:	d11b      	bne.n	800c858 <_dtoa_r+0xb8>
 800c820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c822:	f242 730f 	movw	r3, #9999	; 0x270f
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c82c:	4333      	orrs	r3, r6
 800c82e:	f000 857a 	beq.w	800d326 <_dtoa_r+0xb86>
 800c832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c834:	b963      	cbnz	r3, 800c850 <_dtoa_r+0xb0>
 800c836:	4b9b      	ldr	r3, [pc, #620]	; (800caa4 <_dtoa_r+0x304>)
 800c838:	e024      	b.n	800c884 <_dtoa_r+0xe4>
 800c83a:	4b9b      	ldr	r3, [pc, #620]	; (800caa8 <_dtoa_r+0x308>)
 800c83c:	9300      	str	r3, [sp, #0]
 800c83e:	3308      	adds	r3, #8
 800c840:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c842:	6013      	str	r3, [r2, #0]
 800c844:	9800      	ldr	r0, [sp, #0]
 800c846:	b015      	add	sp, #84	; 0x54
 800c848:	ecbd 8b02 	vpop	{d8}
 800c84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c850:	4b94      	ldr	r3, [pc, #592]	; (800caa4 <_dtoa_r+0x304>)
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	3303      	adds	r3, #3
 800c856:	e7f3      	b.n	800c840 <_dtoa_r+0xa0>
 800c858:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c85c:	2200      	movs	r2, #0
 800c85e:	ec51 0b17 	vmov	r0, r1, d7
 800c862:	2300      	movs	r3, #0
 800c864:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c868:	f7f4 f956 	bl	8000b18 <__aeabi_dcmpeq>
 800c86c:	4680      	mov	r8, r0
 800c86e:	b158      	cbz	r0, 800c888 <_dtoa_r+0xe8>
 800c870:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c872:	2301      	movs	r3, #1
 800c874:	6013      	str	r3, [r2, #0]
 800c876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 8551 	beq.w	800d320 <_dtoa_r+0xb80>
 800c87e:	488b      	ldr	r0, [pc, #556]	; (800caac <_dtoa_r+0x30c>)
 800c880:	6018      	str	r0, [r3, #0]
 800c882:	1e43      	subs	r3, r0, #1
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	e7dd      	b.n	800c844 <_dtoa_r+0xa4>
 800c888:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c88c:	aa12      	add	r2, sp, #72	; 0x48
 800c88e:	a913      	add	r1, sp, #76	; 0x4c
 800c890:	4620      	mov	r0, r4
 800c892:	f001 f89f 	bl	800d9d4 <__d2b>
 800c896:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c89a:	4683      	mov	fp, r0
 800c89c:	2d00      	cmp	r5, #0
 800c89e:	d07c      	beq.n	800c99a <_dtoa_r+0x1fa>
 800c8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c8a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c8ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c8b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c8b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c8ba:	4b7d      	ldr	r3, [pc, #500]	; (800cab0 <_dtoa_r+0x310>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	4630      	mov	r0, r6
 800c8c0:	4639      	mov	r1, r7
 800c8c2:	f7f3 fd09 	bl	80002d8 <__aeabi_dsub>
 800c8c6:	a36e      	add	r3, pc, #440	; (adr r3, 800ca80 <_dtoa_r+0x2e0>)
 800c8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8cc:	f7f3 febc 	bl	8000648 <__aeabi_dmul>
 800c8d0:	a36d      	add	r3, pc, #436	; (adr r3, 800ca88 <_dtoa_r+0x2e8>)
 800c8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d6:	f7f3 fd01 	bl	80002dc <__adddf3>
 800c8da:	4606      	mov	r6, r0
 800c8dc:	4628      	mov	r0, r5
 800c8de:	460f      	mov	r7, r1
 800c8e0:	f7f3 fe48 	bl	8000574 <__aeabi_i2d>
 800c8e4:	a36a      	add	r3, pc, #424	; (adr r3, 800ca90 <_dtoa_r+0x2f0>)
 800c8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ea:	f7f3 fead 	bl	8000648 <__aeabi_dmul>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	4639      	mov	r1, r7
 800c8f6:	f7f3 fcf1 	bl	80002dc <__adddf3>
 800c8fa:	4606      	mov	r6, r0
 800c8fc:	460f      	mov	r7, r1
 800c8fe:	f7f4 f953 	bl	8000ba8 <__aeabi_d2iz>
 800c902:	2200      	movs	r2, #0
 800c904:	4682      	mov	sl, r0
 800c906:	2300      	movs	r3, #0
 800c908:	4630      	mov	r0, r6
 800c90a:	4639      	mov	r1, r7
 800c90c:	f7f4 f90e 	bl	8000b2c <__aeabi_dcmplt>
 800c910:	b148      	cbz	r0, 800c926 <_dtoa_r+0x186>
 800c912:	4650      	mov	r0, sl
 800c914:	f7f3 fe2e 	bl	8000574 <__aeabi_i2d>
 800c918:	4632      	mov	r2, r6
 800c91a:	463b      	mov	r3, r7
 800c91c:	f7f4 f8fc 	bl	8000b18 <__aeabi_dcmpeq>
 800c920:	b908      	cbnz	r0, 800c926 <_dtoa_r+0x186>
 800c922:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c926:	f1ba 0f16 	cmp.w	sl, #22
 800c92a:	d854      	bhi.n	800c9d6 <_dtoa_r+0x236>
 800c92c:	4b61      	ldr	r3, [pc, #388]	; (800cab4 <_dtoa_r+0x314>)
 800c92e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c93a:	f7f4 f8f7 	bl	8000b2c <__aeabi_dcmplt>
 800c93e:	2800      	cmp	r0, #0
 800c940:	d04b      	beq.n	800c9da <_dtoa_r+0x23a>
 800c942:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c946:	2300      	movs	r3, #0
 800c948:	930e      	str	r3, [sp, #56]	; 0x38
 800c94a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c94c:	1b5d      	subs	r5, r3, r5
 800c94e:	1e6b      	subs	r3, r5, #1
 800c950:	9304      	str	r3, [sp, #16]
 800c952:	bf43      	ittte	mi
 800c954:	2300      	movmi	r3, #0
 800c956:	f1c5 0801 	rsbmi	r8, r5, #1
 800c95a:	9304      	strmi	r3, [sp, #16]
 800c95c:	f04f 0800 	movpl.w	r8, #0
 800c960:	f1ba 0f00 	cmp.w	sl, #0
 800c964:	db3b      	blt.n	800c9de <_dtoa_r+0x23e>
 800c966:	9b04      	ldr	r3, [sp, #16]
 800c968:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c96c:	4453      	add	r3, sl
 800c96e:	9304      	str	r3, [sp, #16]
 800c970:	2300      	movs	r3, #0
 800c972:	9306      	str	r3, [sp, #24]
 800c974:	9b05      	ldr	r3, [sp, #20]
 800c976:	2b09      	cmp	r3, #9
 800c978:	d869      	bhi.n	800ca4e <_dtoa_r+0x2ae>
 800c97a:	2b05      	cmp	r3, #5
 800c97c:	bfc4      	itt	gt
 800c97e:	3b04      	subgt	r3, #4
 800c980:	9305      	strgt	r3, [sp, #20]
 800c982:	9b05      	ldr	r3, [sp, #20]
 800c984:	f1a3 0302 	sub.w	r3, r3, #2
 800c988:	bfcc      	ite	gt
 800c98a:	2500      	movgt	r5, #0
 800c98c:	2501      	movle	r5, #1
 800c98e:	2b03      	cmp	r3, #3
 800c990:	d869      	bhi.n	800ca66 <_dtoa_r+0x2c6>
 800c992:	e8df f003 	tbb	[pc, r3]
 800c996:	4e2c      	.short	0x4e2c
 800c998:	5a4c      	.short	0x5a4c
 800c99a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c99e:	441d      	add	r5, r3
 800c9a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c9a4:	2b20      	cmp	r3, #32
 800c9a6:	bfc1      	itttt	gt
 800c9a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c9ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c9b0:	fa09 f303 	lslgt.w	r3, r9, r3
 800c9b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c9b8:	bfda      	itte	le
 800c9ba:	f1c3 0320 	rsble	r3, r3, #32
 800c9be:	fa06 f003 	lslle.w	r0, r6, r3
 800c9c2:	4318      	orrgt	r0, r3
 800c9c4:	f7f3 fdc6 	bl	8000554 <__aeabi_ui2d>
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c9d0:	3d01      	subs	r5, #1
 800c9d2:	9310      	str	r3, [sp, #64]	; 0x40
 800c9d4:	e771      	b.n	800c8ba <_dtoa_r+0x11a>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e7b6      	b.n	800c948 <_dtoa_r+0x1a8>
 800c9da:	900e      	str	r0, [sp, #56]	; 0x38
 800c9dc:	e7b5      	b.n	800c94a <_dtoa_r+0x1aa>
 800c9de:	f1ca 0300 	rsb	r3, sl, #0
 800c9e2:	9306      	str	r3, [sp, #24]
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	eba8 080a 	sub.w	r8, r8, sl
 800c9ea:	930d      	str	r3, [sp, #52]	; 0x34
 800c9ec:	e7c2      	b.n	800c974 <_dtoa_r+0x1d4>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	9308      	str	r3, [sp, #32]
 800c9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	dc39      	bgt.n	800ca6c <_dtoa_r+0x2cc>
 800c9f8:	f04f 0901 	mov.w	r9, #1
 800c9fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca00:	464b      	mov	r3, r9
 800ca02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ca06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ca08:	2200      	movs	r2, #0
 800ca0a:	6042      	str	r2, [r0, #4]
 800ca0c:	2204      	movs	r2, #4
 800ca0e:	f102 0614 	add.w	r6, r2, #20
 800ca12:	429e      	cmp	r6, r3
 800ca14:	6841      	ldr	r1, [r0, #4]
 800ca16:	d92f      	bls.n	800ca78 <_dtoa_r+0x2d8>
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f000 fcb9 	bl	800d390 <_Balloc>
 800ca1e:	9000      	str	r0, [sp, #0]
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d14b      	bne.n	800cabc <_dtoa_r+0x31c>
 800ca24:	4b24      	ldr	r3, [pc, #144]	; (800cab8 <_dtoa_r+0x318>)
 800ca26:	4602      	mov	r2, r0
 800ca28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ca2c:	e6d1      	b.n	800c7d2 <_dtoa_r+0x32>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e7de      	b.n	800c9f0 <_dtoa_r+0x250>
 800ca32:	2300      	movs	r3, #0
 800ca34:	9308      	str	r3, [sp, #32]
 800ca36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca38:	eb0a 0903 	add.w	r9, sl, r3
 800ca3c:	f109 0301 	add.w	r3, r9, #1
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	9301      	str	r3, [sp, #4]
 800ca44:	bfb8      	it	lt
 800ca46:	2301      	movlt	r3, #1
 800ca48:	e7dd      	b.n	800ca06 <_dtoa_r+0x266>
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e7f2      	b.n	800ca34 <_dtoa_r+0x294>
 800ca4e:	2501      	movs	r5, #1
 800ca50:	2300      	movs	r3, #0
 800ca52:	9305      	str	r3, [sp, #20]
 800ca54:	9508      	str	r5, [sp, #32]
 800ca56:	f04f 39ff 	mov.w	r9, #4294967295
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca60:	2312      	movs	r3, #18
 800ca62:	9209      	str	r2, [sp, #36]	; 0x24
 800ca64:	e7cf      	b.n	800ca06 <_dtoa_r+0x266>
 800ca66:	2301      	movs	r3, #1
 800ca68:	9308      	str	r3, [sp, #32]
 800ca6a:	e7f4      	b.n	800ca56 <_dtoa_r+0x2b6>
 800ca6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ca70:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca74:	464b      	mov	r3, r9
 800ca76:	e7c6      	b.n	800ca06 <_dtoa_r+0x266>
 800ca78:	3101      	adds	r1, #1
 800ca7a:	6041      	str	r1, [r0, #4]
 800ca7c:	0052      	lsls	r2, r2, #1
 800ca7e:	e7c6      	b.n	800ca0e <_dtoa_r+0x26e>
 800ca80:	636f4361 	.word	0x636f4361
 800ca84:	3fd287a7 	.word	0x3fd287a7
 800ca88:	8b60c8b3 	.word	0x8b60c8b3
 800ca8c:	3fc68a28 	.word	0x3fc68a28
 800ca90:	509f79fb 	.word	0x509f79fb
 800ca94:	3fd34413 	.word	0x3fd34413
 800ca98:	080100cd 	.word	0x080100cd
 800ca9c:	080100e4 	.word	0x080100e4
 800caa0:	7ff00000 	.word	0x7ff00000
 800caa4:	080100c9 	.word	0x080100c9
 800caa8:	080100c0 	.word	0x080100c0
 800caac:	0801009d 	.word	0x0801009d
 800cab0:	3ff80000 	.word	0x3ff80000
 800cab4:	080101e0 	.word	0x080101e0
 800cab8:	08010143 	.word	0x08010143
 800cabc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cabe:	9a00      	ldr	r2, [sp, #0]
 800cac0:	601a      	str	r2, [r3, #0]
 800cac2:	9b01      	ldr	r3, [sp, #4]
 800cac4:	2b0e      	cmp	r3, #14
 800cac6:	f200 80ad 	bhi.w	800cc24 <_dtoa_r+0x484>
 800caca:	2d00      	cmp	r5, #0
 800cacc:	f000 80aa 	beq.w	800cc24 <_dtoa_r+0x484>
 800cad0:	f1ba 0f00 	cmp.w	sl, #0
 800cad4:	dd36      	ble.n	800cb44 <_dtoa_r+0x3a4>
 800cad6:	4ac3      	ldr	r2, [pc, #780]	; (800cde4 <_dtoa_r+0x644>)
 800cad8:	f00a 030f 	and.w	r3, sl, #15
 800cadc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cae0:	ed93 7b00 	vldr	d7, [r3]
 800cae4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cae8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800caec:	eeb0 8a47 	vmov.f32	s16, s14
 800caf0:	eef0 8a67 	vmov.f32	s17, s15
 800caf4:	d016      	beq.n	800cb24 <_dtoa_r+0x384>
 800caf6:	4bbc      	ldr	r3, [pc, #752]	; (800cde8 <_dtoa_r+0x648>)
 800caf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cafc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb00:	f7f3 fecc 	bl	800089c <__aeabi_ddiv>
 800cb04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb08:	f007 070f 	and.w	r7, r7, #15
 800cb0c:	2503      	movs	r5, #3
 800cb0e:	4eb6      	ldr	r6, [pc, #728]	; (800cde8 <_dtoa_r+0x648>)
 800cb10:	b957      	cbnz	r7, 800cb28 <_dtoa_r+0x388>
 800cb12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb16:	ec53 2b18 	vmov	r2, r3, d8
 800cb1a:	f7f3 febf 	bl	800089c <__aeabi_ddiv>
 800cb1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb22:	e029      	b.n	800cb78 <_dtoa_r+0x3d8>
 800cb24:	2502      	movs	r5, #2
 800cb26:	e7f2      	b.n	800cb0e <_dtoa_r+0x36e>
 800cb28:	07f9      	lsls	r1, r7, #31
 800cb2a:	d508      	bpl.n	800cb3e <_dtoa_r+0x39e>
 800cb2c:	ec51 0b18 	vmov	r0, r1, d8
 800cb30:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb34:	f7f3 fd88 	bl	8000648 <__aeabi_dmul>
 800cb38:	ec41 0b18 	vmov	d8, r0, r1
 800cb3c:	3501      	adds	r5, #1
 800cb3e:	107f      	asrs	r7, r7, #1
 800cb40:	3608      	adds	r6, #8
 800cb42:	e7e5      	b.n	800cb10 <_dtoa_r+0x370>
 800cb44:	f000 80a6 	beq.w	800cc94 <_dtoa_r+0x4f4>
 800cb48:	f1ca 0600 	rsb	r6, sl, #0
 800cb4c:	4ba5      	ldr	r3, [pc, #660]	; (800cde4 <_dtoa_r+0x644>)
 800cb4e:	4fa6      	ldr	r7, [pc, #664]	; (800cde8 <_dtoa_r+0x648>)
 800cb50:	f006 020f 	and.w	r2, r6, #15
 800cb54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb60:	f7f3 fd72 	bl	8000648 <__aeabi_dmul>
 800cb64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb68:	1136      	asrs	r6, r6, #4
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	2502      	movs	r5, #2
 800cb6e:	2e00      	cmp	r6, #0
 800cb70:	f040 8085 	bne.w	800cc7e <_dtoa_r+0x4de>
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d1d2      	bne.n	800cb1e <_dtoa_r+0x37e>
 800cb78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	f000 808c 	beq.w	800cc98 <_dtoa_r+0x4f8>
 800cb80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cb84:	4b99      	ldr	r3, [pc, #612]	; (800cdec <_dtoa_r+0x64c>)
 800cb86:	2200      	movs	r2, #0
 800cb88:	4630      	mov	r0, r6
 800cb8a:	4639      	mov	r1, r7
 800cb8c:	f7f3 ffce 	bl	8000b2c <__aeabi_dcmplt>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	f000 8081 	beq.w	800cc98 <_dtoa_r+0x4f8>
 800cb96:	9b01      	ldr	r3, [sp, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d07d      	beq.n	800cc98 <_dtoa_r+0x4f8>
 800cb9c:	f1b9 0f00 	cmp.w	r9, #0
 800cba0:	dd3c      	ble.n	800cc1c <_dtoa_r+0x47c>
 800cba2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cba6:	9307      	str	r3, [sp, #28]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	4b91      	ldr	r3, [pc, #580]	; (800cdf0 <_dtoa_r+0x650>)
 800cbac:	4630      	mov	r0, r6
 800cbae:	4639      	mov	r1, r7
 800cbb0:	f7f3 fd4a 	bl	8000648 <__aeabi_dmul>
 800cbb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbb8:	3501      	adds	r5, #1
 800cbba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cbbe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	f7f3 fcd6 	bl	8000574 <__aeabi_i2d>
 800cbc8:	4632      	mov	r2, r6
 800cbca:	463b      	mov	r3, r7
 800cbcc:	f7f3 fd3c 	bl	8000648 <__aeabi_dmul>
 800cbd0:	4b88      	ldr	r3, [pc, #544]	; (800cdf4 <_dtoa_r+0x654>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f7f3 fb82 	bl	80002dc <__adddf3>
 800cbd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cbdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbe0:	9303      	str	r3, [sp, #12]
 800cbe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d15c      	bne.n	800cca2 <_dtoa_r+0x502>
 800cbe8:	4b83      	ldr	r3, [pc, #524]	; (800cdf8 <_dtoa_r+0x658>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	4630      	mov	r0, r6
 800cbee:	4639      	mov	r1, r7
 800cbf0:	f7f3 fb72 	bl	80002d8 <__aeabi_dsub>
 800cbf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbf8:	4606      	mov	r6, r0
 800cbfa:	460f      	mov	r7, r1
 800cbfc:	f7f3 ffb4 	bl	8000b68 <__aeabi_dcmpgt>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	f040 8296 	bne.w	800d132 <_dtoa_r+0x992>
 800cc06:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc10:	4639      	mov	r1, r7
 800cc12:	f7f3 ff8b 	bl	8000b2c <__aeabi_dcmplt>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	f040 8288 	bne.w	800d12c <_dtoa_r+0x98c>
 800cc1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f2c0 8158 	blt.w	800cedc <_dtoa_r+0x73c>
 800cc2c:	f1ba 0f0e 	cmp.w	sl, #14
 800cc30:	f300 8154 	bgt.w	800cedc <_dtoa_r+0x73c>
 800cc34:	4b6b      	ldr	r3, [pc, #428]	; (800cde4 <_dtoa_r+0x644>)
 800cc36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cc3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f280 80e3 	bge.w	800ce0c <_dtoa_r+0x66c>
 800cc46:	9b01      	ldr	r3, [sp, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f300 80df 	bgt.w	800ce0c <_dtoa_r+0x66c>
 800cc4e:	f040 826d 	bne.w	800d12c <_dtoa_r+0x98c>
 800cc52:	4b69      	ldr	r3, [pc, #420]	; (800cdf8 <_dtoa_r+0x658>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	4640      	mov	r0, r8
 800cc58:	4649      	mov	r1, r9
 800cc5a:	f7f3 fcf5 	bl	8000648 <__aeabi_dmul>
 800cc5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc62:	f7f3 ff77 	bl	8000b54 <__aeabi_dcmpge>
 800cc66:	9e01      	ldr	r6, [sp, #4]
 800cc68:	4637      	mov	r7, r6
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	f040 8243 	bne.w	800d0f6 <_dtoa_r+0x956>
 800cc70:	9d00      	ldr	r5, [sp, #0]
 800cc72:	2331      	movs	r3, #49	; 0x31
 800cc74:	f805 3b01 	strb.w	r3, [r5], #1
 800cc78:	f10a 0a01 	add.w	sl, sl, #1
 800cc7c:	e23f      	b.n	800d0fe <_dtoa_r+0x95e>
 800cc7e:	07f2      	lsls	r2, r6, #31
 800cc80:	d505      	bpl.n	800cc8e <_dtoa_r+0x4ee>
 800cc82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc86:	f7f3 fcdf 	bl	8000648 <__aeabi_dmul>
 800cc8a:	3501      	adds	r5, #1
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	1076      	asrs	r6, r6, #1
 800cc90:	3708      	adds	r7, #8
 800cc92:	e76c      	b.n	800cb6e <_dtoa_r+0x3ce>
 800cc94:	2502      	movs	r5, #2
 800cc96:	e76f      	b.n	800cb78 <_dtoa_r+0x3d8>
 800cc98:	9b01      	ldr	r3, [sp, #4]
 800cc9a:	f8cd a01c 	str.w	sl, [sp, #28]
 800cc9e:	930c      	str	r3, [sp, #48]	; 0x30
 800cca0:	e78d      	b.n	800cbbe <_dtoa_r+0x41e>
 800cca2:	9900      	ldr	r1, [sp, #0]
 800cca4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cca6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cca8:	4b4e      	ldr	r3, [pc, #312]	; (800cde4 <_dtoa_r+0x644>)
 800ccaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccae:	4401      	add	r1, r0
 800ccb0:	9102      	str	r1, [sp, #8]
 800ccb2:	9908      	ldr	r1, [sp, #32]
 800ccb4:	eeb0 8a47 	vmov.f32	s16, s14
 800ccb8:	eef0 8a67 	vmov.f32	s17, s15
 800ccbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ccc4:	2900      	cmp	r1, #0
 800ccc6:	d045      	beq.n	800cd54 <_dtoa_r+0x5b4>
 800ccc8:	494c      	ldr	r1, [pc, #304]	; (800cdfc <_dtoa_r+0x65c>)
 800ccca:	2000      	movs	r0, #0
 800cccc:	f7f3 fde6 	bl	800089c <__aeabi_ddiv>
 800ccd0:	ec53 2b18 	vmov	r2, r3, d8
 800ccd4:	f7f3 fb00 	bl	80002d8 <__aeabi_dsub>
 800ccd8:	9d00      	ldr	r5, [sp, #0]
 800ccda:	ec41 0b18 	vmov	d8, r0, r1
 800ccde:	4639      	mov	r1, r7
 800cce0:	4630      	mov	r0, r6
 800cce2:	f7f3 ff61 	bl	8000ba8 <__aeabi_d2iz>
 800cce6:	900c      	str	r0, [sp, #48]	; 0x30
 800cce8:	f7f3 fc44 	bl	8000574 <__aeabi_i2d>
 800ccec:	4602      	mov	r2, r0
 800ccee:	460b      	mov	r3, r1
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	4639      	mov	r1, r7
 800ccf4:	f7f3 faf0 	bl	80002d8 <__aeabi_dsub>
 800ccf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccfa:	3330      	adds	r3, #48	; 0x30
 800ccfc:	f805 3b01 	strb.w	r3, [r5], #1
 800cd00:	ec53 2b18 	vmov	r2, r3, d8
 800cd04:	4606      	mov	r6, r0
 800cd06:	460f      	mov	r7, r1
 800cd08:	f7f3 ff10 	bl	8000b2c <__aeabi_dcmplt>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d165      	bne.n	800cddc <_dtoa_r+0x63c>
 800cd10:	4632      	mov	r2, r6
 800cd12:	463b      	mov	r3, r7
 800cd14:	4935      	ldr	r1, [pc, #212]	; (800cdec <_dtoa_r+0x64c>)
 800cd16:	2000      	movs	r0, #0
 800cd18:	f7f3 fade 	bl	80002d8 <__aeabi_dsub>
 800cd1c:	ec53 2b18 	vmov	r2, r3, d8
 800cd20:	f7f3 ff04 	bl	8000b2c <__aeabi_dcmplt>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	f040 80b9 	bne.w	800ce9c <_dtoa_r+0x6fc>
 800cd2a:	9b02      	ldr	r3, [sp, #8]
 800cd2c:	429d      	cmp	r5, r3
 800cd2e:	f43f af75 	beq.w	800cc1c <_dtoa_r+0x47c>
 800cd32:	4b2f      	ldr	r3, [pc, #188]	; (800cdf0 <_dtoa_r+0x650>)
 800cd34:	ec51 0b18 	vmov	r0, r1, d8
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f7f3 fc85 	bl	8000648 <__aeabi_dmul>
 800cd3e:	4b2c      	ldr	r3, [pc, #176]	; (800cdf0 <_dtoa_r+0x650>)
 800cd40:	ec41 0b18 	vmov	d8, r0, r1
 800cd44:	2200      	movs	r2, #0
 800cd46:	4630      	mov	r0, r6
 800cd48:	4639      	mov	r1, r7
 800cd4a:	f7f3 fc7d 	bl	8000648 <__aeabi_dmul>
 800cd4e:	4606      	mov	r6, r0
 800cd50:	460f      	mov	r7, r1
 800cd52:	e7c4      	b.n	800ccde <_dtoa_r+0x53e>
 800cd54:	ec51 0b17 	vmov	r0, r1, d7
 800cd58:	f7f3 fc76 	bl	8000648 <__aeabi_dmul>
 800cd5c:	9b02      	ldr	r3, [sp, #8]
 800cd5e:	9d00      	ldr	r5, [sp, #0]
 800cd60:	930c      	str	r3, [sp, #48]	; 0x30
 800cd62:	ec41 0b18 	vmov	d8, r0, r1
 800cd66:	4639      	mov	r1, r7
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f7f3 ff1d 	bl	8000ba8 <__aeabi_d2iz>
 800cd6e:	9011      	str	r0, [sp, #68]	; 0x44
 800cd70:	f7f3 fc00 	bl	8000574 <__aeabi_i2d>
 800cd74:	4602      	mov	r2, r0
 800cd76:	460b      	mov	r3, r1
 800cd78:	4630      	mov	r0, r6
 800cd7a:	4639      	mov	r1, r7
 800cd7c:	f7f3 faac 	bl	80002d8 <__aeabi_dsub>
 800cd80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd82:	3330      	adds	r3, #48	; 0x30
 800cd84:	f805 3b01 	strb.w	r3, [r5], #1
 800cd88:	9b02      	ldr	r3, [sp, #8]
 800cd8a:	429d      	cmp	r5, r3
 800cd8c:	4606      	mov	r6, r0
 800cd8e:	460f      	mov	r7, r1
 800cd90:	f04f 0200 	mov.w	r2, #0
 800cd94:	d134      	bne.n	800ce00 <_dtoa_r+0x660>
 800cd96:	4b19      	ldr	r3, [pc, #100]	; (800cdfc <_dtoa_r+0x65c>)
 800cd98:	ec51 0b18 	vmov	r0, r1, d8
 800cd9c:	f7f3 fa9e 	bl	80002dc <__adddf3>
 800cda0:	4602      	mov	r2, r0
 800cda2:	460b      	mov	r3, r1
 800cda4:	4630      	mov	r0, r6
 800cda6:	4639      	mov	r1, r7
 800cda8:	f7f3 fede 	bl	8000b68 <__aeabi_dcmpgt>
 800cdac:	2800      	cmp	r0, #0
 800cdae:	d175      	bne.n	800ce9c <_dtoa_r+0x6fc>
 800cdb0:	ec53 2b18 	vmov	r2, r3, d8
 800cdb4:	4911      	ldr	r1, [pc, #68]	; (800cdfc <_dtoa_r+0x65c>)
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	f7f3 fa8e 	bl	80002d8 <__aeabi_dsub>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	4639      	mov	r1, r7
 800cdc4:	f7f3 feb2 	bl	8000b2c <__aeabi_dcmplt>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f43f af27 	beq.w	800cc1c <_dtoa_r+0x47c>
 800cdce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cdd0:	1e6b      	subs	r3, r5, #1
 800cdd2:	930c      	str	r3, [sp, #48]	; 0x30
 800cdd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cdd8:	2b30      	cmp	r3, #48	; 0x30
 800cdda:	d0f8      	beq.n	800cdce <_dtoa_r+0x62e>
 800cddc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cde0:	e04a      	b.n	800ce78 <_dtoa_r+0x6d8>
 800cde2:	bf00      	nop
 800cde4:	080101e0 	.word	0x080101e0
 800cde8:	080101b8 	.word	0x080101b8
 800cdec:	3ff00000 	.word	0x3ff00000
 800cdf0:	40240000 	.word	0x40240000
 800cdf4:	401c0000 	.word	0x401c0000
 800cdf8:	40140000 	.word	0x40140000
 800cdfc:	3fe00000 	.word	0x3fe00000
 800ce00:	4baf      	ldr	r3, [pc, #700]	; (800d0c0 <_dtoa_r+0x920>)
 800ce02:	f7f3 fc21 	bl	8000648 <__aeabi_dmul>
 800ce06:	4606      	mov	r6, r0
 800ce08:	460f      	mov	r7, r1
 800ce0a:	e7ac      	b.n	800cd66 <_dtoa_r+0x5c6>
 800ce0c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce10:	9d00      	ldr	r5, [sp, #0]
 800ce12:	4642      	mov	r2, r8
 800ce14:	464b      	mov	r3, r9
 800ce16:	4630      	mov	r0, r6
 800ce18:	4639      	mov	r1, r7
 800ce1a:	f7f3 fd3f 	bl	800089c <__aeabi_ddiv>
 800ce1e:	f7f3 fec3 	bl	8000ba8 <__aeabi_d2iz>
 800ce22:	9002      	str	r0, [sp, #8]
 800ce24:	f7f3 fba6 	bl	8000574 <__aeabi_i2d>
 800ce28:	4642      	mov	r2, r8
 800ce2a:	464b      	mov	r3, r9
 800ce2c:	f7f3 fc0c 	bl	8000648 <__aeabi_dmul>
 800ce30:	4602      	mov	r2, r0
 800ce32:	460b      	mov	r3, r1
 800ce34:	4630      	mov	r0, r6
 800ce36:	4639      	mov	r1, r7
 800ce38:	f7f3 fa4e 	bl	80002d8 <__aeabi_dsub>
 800ce3c:	9e02      	ldr	r6, [sp, #8]
 800ce3e:	9f01      	ldr	r7, [sp, #4]
 800ce40:	3630      	adds	r6, #48	; 0x30
 800ce42:	f805 6b01 	strb.w	r6, [r5], #1
 800ce46:	9e00      	ldr	r6, [sp, #0]
 800ce48:	1bae      	subs	r6, r5, r6
 800ce4a:	42b7      	cmp	r7, r6
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	460b      	mov	r3, r1
 800ce50:	d137      	bne.n	800cec2 <_dtoa_r+0x722>
 800ce52:	f7f3 fa43 	bl	80002dc <__adddf3>
 800ce56:	4642      	mov	r2, r8
 800ce58:	464b      	mov	r3, r9
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	460f      	mov	r7, r1
 800ce5e:	f7f3 fe83 	bl	8000b68 <__aeabi_dcmpgt>
 800ce62:	b9c8      	cbnz	r0, 800ce98 <_dtoa_r+0x6f8>
 800ce64:	4642      	mov	r2, r8
 800ce66:	464b      	mov	r3, r9
 800ce68:	4630      	mov	r0, r6
 800ce6a:	4639      	mov	r1, r7
 800ce6c:	f7f3 fe54 	bl	8000b18 <__aeabi_dcmpeq>
 800ce70:	b110      	cbz	r0, 800ce78 <_dtoa_r+0x6d8>
 800ce72:	9b02      	ldr	r3, [sp, #8]
 800ce74:	07d9      	lsls	r1, r3, #31
 800ce76:	d40f      	bmi.n	800ce98 <_dtoa_r+0x6f8>
 800ce78:	4620      	mov	r0, r4
 800ce7a:	4659      	mov	r1, fp
 800ce7c:	f000 fac8 	bl	800d410 <_Bfree>
 800ce80:	2300      	movs	r3, #0
 800ce82:	702b      	strb	r3, [r5, #0]
 800ce84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce86:	f10a 0001 	add.w	r0, sl, #1
 800ce8a:	6018      	str	r0, [r3, #0]
 800ce8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f43f acd8 	beq.w	800c844 <_dtoa_r+0xa4>
 800ce94:	601d      	str	r5, [r3, #0]
 800ce96:	e4d5      	b.n	800c844 <_dtoa_r+0xa4>
 800ce98:	f8cd a01c 	str.w	sl, [sp, #28]
 800ce9c:	462b      	mov	r3, r5
 800ce9e:	461d      	mov	r5, r3
 800cea0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cea4:	2a39      	cmp	r2, #57	; 0x39
 800cea6:	d108      	bne.n	800ceba <_dtoa_r+0x71a>
 800cea8:	9a00      	ldr	r2, [sp, #0]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d1f7      	bne.n	800ce9e <_dtoa_r+0x6fe>
 800ceae:	9a07      	ldr	r2, [sp, #28]
 800ceb0:	9900      	ldr	r1, [sp, #0]
 800ceb2:	3201      	adds	r2, #1
 800ceb4:	9207      	str	r2, [sp, #28]
 800ceb6:	2230      	movs	r2, #48	; 0x30
 800ceb8:	700a      	strb	r2, [r1, #0]
 800ceba:	781a      	ldrb	r2, [r3, #0]
 800cebc:	3201      	adds	r2, #1
 800cebe:	701a      	strb	r2, [r3, #0]
 800cec0:	e78c      	b.n	800cddc <_dtoa_r+0x63c>
 800cec2:	4b7f      	ldr	r3, [pc, #508]	; (800d0c0 <_dtoa_r+0x920>)
 800cec4:	2200      	movs	r2, #0
 800cec6:	f7f3 fbbf 	bl	8000648 <__aeabi_dmul>
 800ceca:	2200      	movs	r2, #0
 800cecc:	2300      	movs	r3, #0
 800cece:	4606      	mov	r6, r0
 800ced0:	460f      	mov	r7, r1
 800ced2:	f7f3 fe21 	bl	8000b18 <__aeabi_dcmpeq>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d09b      	beq.n	800ce12 <_dtoa_r+0x672>
 800ceda:	e7cd      	b.n	800ce78 <_dtoa_r+0x6d8>
 800cedc:	9a08      	ldr	r2, [sp, #32]
 800cede:	2a00      	cmp	r2, #0
 800cee0:	f000 80c4 	beq.w	800d06c <_dtoa_r+0x8cc>
 800cee4:	9a05      	ldr	r2, [sp, #20]
 800cee6:	2a01      	cmp	r2, #1
 800cee8:	f300 80a8 	bgt.w	800d03c <_dtoa_r+0x89c>
 800ceec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ceee:	2a00      	cmp	r2, #0
 800cef0:	f000 80a0 	beq.w	800d034 <_dtoa_r+0x894>
 800cef4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cef8:	9e06      	ldr	r6, [sp, #24]
 800cefa:	4645      	mov	r5, r8
 800cefc:	9a04      	ldr	r2, [sp, #16]
 800cefe:	2101      	movs	r1, #1
 800cf00:	441a      	add	r2, r3
 800cf02:	4620      	mov	r0, r4
 800cf04:	4498      	add	r8, r3
 800cf06:	9204      	str	r2, [sp, #16]
 800cf08:	f000 fb3e 	bl	800d588 <__i2b>
 800cf0c:	4607      	mov	r7, r0
 800cf0e:	2d00      	cmp	r5, #0
 800cf10:	dd0b      	ble.n	800cf2a <_dtoa_r+0x78a>
 800cf12:	9b04      	ldr	r3, [sp, #16]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	dd08      	ble.n	800cf2a <_dtoa_r+0x78a>
 800cf18:	42ab      	cmp	r3, r5
 800cf1a:	9a04      	ldr	r2, [sp, #16]
 800cf1c:	bfa8      	it	ge
 800cf1e:	462b      	movge	r3, r5
 800cf20:	eba8 0803 	sub.w	r8, r8, r3
 800cf24:	1aed      	subs	r5, r5, r3
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	9304      	str	r3, [sp, #16]
 800cf2a:	9b06      	ldr	r3, [sp, #24]
 800cf2c:	b1fb      	cbz	r3, 800cf6e <_dtoa_r+0x7ce>
 800cf2e:	9b08      	ldr	r3, [sp, #32]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f000 809f 	beq.w	800d074 <_dtoa_r+0x8d4>
 800cf36:	2e00      	cmp	r6, #0
 800cf38:	dd11      	ble.n	800cf5e <_dtoa_r+0x7be>
 800cf3a:	4639      	mov	r1, r7
 800cf3c:	4632      	mov	r2, r6
 800cf3e:	4620      	mov	r0, r4
 800cf40:	f000 fbde 	bl	800d700 <__pow5mult>
 800cf44:	465a      	mov	r2, fp
 800cf46:	4601      	mov	r1, r0
 800cf48:	4607      	mov	r7, r0
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	f000 fb32 	bl	800d5b4 <__multiply>
 800cf50:	4659      	mov	r1, fp
 800cf52:	9007      	str	r0, [sp, #28]
 800cf54:	4620      	mov	r0, r4
 800cf56:	f000 fa5b 	bl	800d410 <_Bfree>
 800cf5a:	9b07      	ldr	r3, [sp, #28]
 800cf5c:	469b      	mov	fp, r3
 800cf5e:	9b06      	ldr	r3, [sp, #24]
 800cf60:	1b9a      	subs	r2, r3, r6
 800cf62:	d004      	beq.n	800cf6e <_dtoa_r+0x7ce>
 800cf64:	4659      	mov	r1, fp
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 fbca 	bl	800d700 <__pow5mult>
 800cf6c:	4683      	mov	fp, r0
 800cf6e:	2101      	movs	r1, #1
 800cf70:	4620      	mov	r0, r4
 800cf72:	f000 fb09 	bl	800d588 <__i2b>
 800cf76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	4606      	mov	r6, r0
 800cf7c:	dd7c      	ble.n	800d078 <_dtoa_r+0x8d8>
 800cf7e:	461a      	mov	r2, r3
 800cf80:	4601      	mov	r1, r0
 800cf82:	4620      	mov	r0, r4
 800cf84:	f000 fbbc 	bl	800d700 <__pow5mult>
 800cf88:	9b05      	ldr	r3, [sp, #20]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	4606      	mov	r6, r0
 800cf8e:	dd76      	ble.n	800d07e <_dtoa_r+0x8de>
 800cf90:	2300      	movs	r3, #0
 800cf92:	9306      	str	r3, [sp, #24]
 800cf94:	6933      	ldr	r3, [r6, #16]
 800cf96:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cf9a:	6918      	ldr	r0, [r3, #16]
 800cf9c:	f000 faa4 	bl	800d4e8 <__hi0bits>
 800cfa0:	f1c0 0020 	rsb	r0, r0, #32
 800cfa4:	9b04      	ldr	r3, [sp, #16]
 800cfa6:	4418      	add	r0, r3
 800cfa8:	f010 001f 	ands.w	r0, r0, #31
 800cfac:	f000 8086 	beq.w	800d0bc <_dtoa_r+0x91c>
 800cfb0:	f1c0 0320 	rsb	r3, r0, #32
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	dd7f      	ble.n	800d0b8 <_dtoa_r+0x918>
 800cfb8:	f1c0 001c 	rsb	r0, r0, #28
 800cfbc:	9b04      	ldr	r3, [sp, #16]
 800cfbe:	4403      	add	r3, r0
 800cfc0:	4480      	add	r8, r0
 800cfc2:	4405      	add	r5, r0
 800cfc4:	9304      	str	r3, [sp, #16]
 800cfc6:	f1b8 0f00 	cmp.w	r8, #0
 800cfca:	dd05      	ble.n	800cfd8 <_dtoa_r+0x838>
 800cfcc:	4659      	mov	r1, fp
 800cfce:	4642      	mov	r2, r8
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f000 fbef 	bl	800d7b4 <__lshift>
 800cfd6:	4683      	mov	fp, r0
 800cfd8:	9b04      	ldr	r3, [sp, #16]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	dd05      	ble.n	800cfea <_dtoa_r+0x84a>
 800cfde:	4631      	mov	r1, r6
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f000 fbe6 	bl	800d7b4 <__lshift>
 800cfe8:	4606      	mov	r6, r0
 800cfea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d069      	beq.n	800d0c4 <_dtoa_r+0x924>
 800cff0:	4631      	mov	r1, r6
 800cff2:	4658      	mov	r0, fp
 800cff4:	f000 fc4a 	bl	800d88c <__mcmp>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	da63      	bge.n	800d0c4 <_dtoa_r+0x924>
 800cffc:	2300      	movs	r3, #0
 800cffe:	4659      	mov	r1, fp
 800d000:	220a      	movs	r2, #10
 800d002:	4620      	mov	r0, r4
 800d004:	f000 fa26 	bl	800d454 <__multadd>
 800d008:	9b08      	ldr	r3, [sp, #32]
 800d00a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d00e:	4683      	mov	fp, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	f000 818f 	beq.w	800d334 <_dtoa_r+0xb94>
 800d016:	4639      	mov	r1, r7
 800d018:	2300      	movs	r3, #0
 800d01a:	220a      	movs	r2, #10
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 fa19 	bl	800d454 <__multadd>
 800d022:	f1b9 0f00 	cmp.w	r9, #0
 800d026:	4607      	mov	r7, r0
 800d028:	f300 808e 	bgt.w	800d148 <_dtoa_r+0x9a8>
 800d02c:	9b05      	ldr	r3, [sp, #20]
 800d02e:	2b02      	cmp	r3, #2
 800d030:	dc50      	bgt.n	800d0d4 <_dtoa_r+0x934>
 800d032:	e089      	b.n	800d148 <_dtoa_r+0x9a8>
 800d034:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d036:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d03a:	e75d      	b.n	800cef8 <_dtoa_r+0x758>
 800d03c:	9b01      	ldr	r3, [sp, #4]
 800d03e:	1e5e      	subs	r6, r3, #1
 800d040:	9b06      	ldr	r3, [sp, #24]
 800d042:	42b3      	cmp	r3, r6
 800d044:	bfbf      	itttt	lt
 800d046:	9b06      	ldrlt	r3, [sp, #24]
 800d048:	9606      	strlt	r6, [sp, #24]
 800d04a:	1af2      	sublt	r2, r6, r3
 800d04c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d04e:	bfb6      	itet	lt
 800d050:	189b      	addlt	r3, r3, r2
 800d052:	1b9e      	subge	r6, r3, r6
 800d054:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d056:	9b01      	ldr	r3, [sp, #4]
 800d058:	bfb8      	it	lt
 800d05a:	2600      	movlt	r6, #0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	bfb5      	itete	lt
 800d060:	eba8 0503 	sublt.w	r5, r8, r3
 800d064:	9b01      	ldrge	r3, [sp, #4]
 800d066:	2300      	movlt	r3, #0
 800d068:	4645      	movge	r5, r8
 800d06a:	e747      	b.n	800cefc <_dtoa_r+0x75c>
 800d06c:	9e06      	ldr	r6, [sp, #24]
 800d06e:	9f08      	ldr	r7, [sp, #32]
 800d070:	4645      	mov	r5, r8
 800d072:	e74c      	b.n	800cf0e <_dtoa_r+0x76e>
 800d074:	9a06      	ldr	r2, [sp, #24]
 800d076:	e775      	b.n	800cf64 <_dtoa_r+0x7c4>
 800d078:	9b05      	ldr	r3, [sp, #20]
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	dc18      	bgt.n	800d0b0 <_dtoa_r+0x910>
 800d07e:	9b02      	ldr	r3, [sp, #8]
 800d080:	b9b3      	cbnz	r3, 800d0b0 <_dtoa_r+0x910>
 800d082:	9b03      	ldr	r3, [sp, #12]
 800d084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d088:	b9a3      	cbnz	r3, 800d0b4 <_dtoa_r+0x914>
 800d08a:	9b03      	ldr	r3, [sp, #12]
 800d08c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d090:	0d1b      	lsrs	r3, r3, #20
 800d092:	051b      	lsls	r3, r3, #20
 800d094:	b12b      	cbz	r3, 800d0a2 <_dtoa_r+0x902>
 800d096:	9b04      	ldr	r3, [sp, #16]
 800d098:	3301      	adds	r3, #1
 800d09a:	9304      	str	r3, [sp, #16]
 800d09c:	f108 0801 	add.w	r8, r8, #1
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	9306      	str	r3, [sp, #24]
 800d0a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f47f af74 	bne.w	800cf94 <_dtoa_r+0x7f4>
 800d0ac:	2001      	movs	r0, #1
 800d0ae:	e779      	b.n	800cfa4 <_dtoa_r+0x804>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	e7f6      	b.n	800d0a2 <_dtoa_r+0x902>
 800d0b4:	9b02      	ldr	r3, [sp, #8]
 800d0b6:	e7f4      	b.n	800d0a2 <_dtoa_r+0x902>
 800d0b8:	d085      	beq.n	800cfc6 <_dtoa_r+0x826>
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	301c      	adds	r0, #28
 800d0be:	e77d      	b.n	800cfbc <_dtoa_r+0x81c>
 800d0c0:	40240000 	.word	0x40240000
 800d0c4:	9b01      	ldr	r3, [sp, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	dc38      	bgt.n	800d13c <_dtoa_r+0x99c>
 800d0ca:	9b05      	ldr	r3, [sp, #20]
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	dd35      	ble.n	800d13c <_dtoa_r+0x99c>
 800d0d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d0d4:	f1b9 0f00 	cmp.w	r9, #0
 800d0d8:	d10d      	bne.n	800d0f6 <_dtoa_r+0x956>
 800d0da:	4631      	mov	r1, r6
 800d0dc:	464b      	mov	r3, r9
 800d0de:	2205      	movs	r2, #5
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f000 f9b7 	bl	800d454 <__multadd>
 800d0e6:	4601      	mov	r1, r0
 800d0e8:	4606      	mov	r6, r0
 800d0ea:	4658      	mov	r0, fp
 800d0ec:	f000 fbce 	bl	800d88c <__mcmp>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	f73f adbd 	bgt.w	800cc70 <_dtoa_r+0x4d0>
 800d0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f8:	9d00      	ldr	r5, [sp, #0]
 800d0fa:	ea6f 0a03 	mvn.w	sl, r3
 800d0fe:	f04f 0800 	mov.w	r8, #0
 800d102:	4631      	mov	r1, r6
 800d104:	4620      	mov	r0, r4
 800d106:	f000 f983 	bl	800d410 <_Bfree>
 800d10a:	2f00      	cmp	r7, #0
 800d10c:	f43f aeb4 	beq.w	800ce78 <_dtoa_r+0x6d8>
 800d110:	f1b8 0f00 	cmp.w	r8, #0
 800d114:	d005      	beq.n	800d122 <_dtoa_r+0x982>
 800d116:	45b8      	cmp	r8, r7
 800d118:	d003      	beq.n	800d122 <_dtoa_r+0x982>
 800d11a:	4641      	mov	r1, r8
 800d11c:	4620      	mov	r0, r4
 800d11e:	f000 f977 	bl	800d410 <_Bfree>
 800d122:	4639      	mov	r1, r7
 800d124:	4620      	mov	r0, r4
 800d126:	f000 f973 	bl	800d410 <_Bfree>
 800d12a:	e6a5      	b.n	800ce78 <_dtoa_r+0x6d8>
 800d12c:	2600      	movs	r6, #0
 800d12e:	4637      	mov	r7, r6
 800d130:	e7e1      	b.n	800d0f6 <_dtoa_r+0x956>
 800d132:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d134:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d138:	4637      	mov	r7, r6
 800d13a:	e599      	b.n	800cc70 <_dtoa_r+0x4d0>
 800d13c:	9b08      	ldr	r3, [sp, #32]
 800d13e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	f000 80fd 	beq.w	800d342 <_dtoa_r+0xba2>
 800d148:	2d00      	cmp	r5, #0
 800d14a:	dd05      	ble.n	800d158 <_dtoa_r+0x9b8>
 800d14c:	4639      	mov	r1, r7
 800d14e:	462a      	mov	r2, r5
 800d150:	4620      	mov	r0, r4
 800d152:	f000 fb2f 	bl	800d7b4 <__lshift>
 800d156:	4607      	mov	r7, r0
 800d158:	9b06      	ldr	r3, [sp, #24]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d05c      	beq.n	800d218 <_dtoa_r+0xa78>
 800d15e:	6879      	ldr	r1, [r7, #4]
 800d160:	4620      	mov	r0, r4
 800d162:	f000 f915 	bl	800d390 <_Balloc>
 800d166:	4605      	mov	r5, r0
 800d168:	b928      	cbnz	r0, 800d176 <_dtoa_r+0x9d6>
 800d16a:	4b80      	ldr	r3, [pc, #512]	; (800d36c <_dtoa_r+0xbcc>)
 800d16c:	4602      	mov	r2, r0
 800d16e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d172:	f7ff bb2e 	b.w	800c7d2 <_dtoa_r+0x32>
 800d176:	693a      	ldr	r2, [r7, #16]
 800d178:	3202      	adds	r2, #2
 800d17a:	0092      	lsls	r2, r2, #2
 800d17c:	f107 010c 	add.w	r1, r7, #12
 800d180:	300c      	adds	r0, #12
 800d182:	f7fe fde1 	bl	800bd48 <memcpy>
 800d186:	2201      	movs	r2, #1
 800d188:	4629      	mov	r1, r5
 800d18a:	4620      	mov	r0, r4
 800d18c:	f000 fb12 	bl	800d7b4 <__lshift>
 800d190:	9b00      	ldr	r3, [sp, #0]
 800d192:	3301      	adds	r3, #1
 800d194:	9301      	str	r3, [sp, #4]
 800d196:	9b00      	ldr	r3, [sp, #0]
 800d198:	444b      	add	r3, r9
 800d19a:	9307      	str	r3, [sp, #28]
 800d19c:	9b02      	ldr	r3, [sp, #8]
 800d19e:	f003 0301 	and.w	r3, r3, #1
 800d1a2:	46b8      	mov	r8, r7
 800d1a4:	9306      	str	r3, [sp, #24]
 800d1a6:	4607      	mov	r7, r0
 800d1a8:	9b01      	ldr	r3, [sp, #4]
 800d1aa:	4631      	mov	r1, r6
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	4658      	mov	r0, fp
 800d1b0:	9302      	str	r3, [sp, #8]
 800d1b2:	f7ff fa69 	bl	800c688 <quorem>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	3330      	adds	r3, #48	; 0x30
 800d1ba:	9004      	str	r0, [sp, #16]
 800d1bc:	4641      	mov	r1, r8
 800d1be:	4658      	mov	r0, fp
 800d1c0:	9308      	str	r3, [sp, #32]
 800d1c2:	f000 fb63 	bl	800d88c <__mcmp>
 800d1c6:	463a      	mov	r2, r7
 800d1c8:	4681      	mov	r9, r0
 800d1ca:	4631      	mov	r1, r6
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	f000 fb79 	bl	800d8c4 <__mdiff>
 800d1d2:	68c2      	ldr	r2, [r0, #12]
 800d1d4:	9b08      	ldr	r3, [sp, #32]
 800d1d6:	4605      	mov	r5, r0
 800d1d8:	bb02      	cbnz	r2, 800d21c <_dtoa_r+0xa7c>
 800d1da:	4601      	mov	r1, r0
 800d1dc:	4658      	mov	r0, fp
 800d1de:	f000 fb55 	bl	800d88c <__mcmp>
 800d1e2:	9b08      	ldr	r3, [sp, #32]
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	4629      	mov	r1, r5
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d1ee:	f000 f90f 	bl	800d410 <_Bfree>
 800d1f2:	9b05      	ldr	r3, [sp, #20]
 800d1f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1f6:	9d01      	ldr	r5, [sp, #4]
 800d1f8:	ea43 0102 	orr.w	r1, r3, r2
 800d1fc:	9b06      	ldr	r3, [sp, #24]
 800d1fe:	430b      	orrs	r3, r1
 800d200:	9b08      	ldr	r3, [sp, #32]
 800d202:	d10d      	bne.n	800d220 <_dtoa_r+0xa80>
 800d204:	2b39      	cmp	r3, #57	; 0x39
 800d206:	d029      	beq.n	800d25c <_dtoa_r+0xabc>
 800d208:	f1b9 0f00 	cmp.w	r9, #0
 800d20c:	dd01      	ble.n	800d212 <_dtoa_r+0xa72>
 800d20e:	9b04      	ldr	r3, [sp, #16]
 800d210:	3331      	adds	r3, #49	; 0x31
 800d212:	9a02      	ldr	r2, [sp, #8]
 800d214:	7013      	strb	r3, [r2, #0]
 800d216:	e774      	b.n	800d102 <_dtoa_r+0x962>
 800d218:	4638      	mov	r0, r7
 800d21a:	e7b9      	b.n	800d190 <_dtoa_r+0x9f0>
 800d21c:	2201      	movs	r2, #1
 800d21e:	e7e2      	b.n	800d1e6 <_dtoa_r+0xa46>
 800d220:	f1b9 0f00 	cmp.w	r9, #0
 800d224:	db06      	blt.n	800d234 <_dtoa_r+0xa94>
 800d226:	9905      	ldr	r1, [sp, #20]
 800d228:	ea41 0909 	orr.w	r9, r1, r9
 800d22c:	9906      	ldr	r1, [sp, #24]
 800d22e:	ea59 0101 	orrs.w	r1, r9, r1
 800d232:	d120      	bne.n	800d276 <_dtoa_r+0xad6>
 800d234:	2a00      	cmp	r2, #0
 800d236:	ddec      	ble.n	800d212 <_dtoa_r+0xa72>
 800d238:	4659      	mov	r1, fp
 800d23a:	2201      	movs	r2, #1
 800d23c:	4620      	mov	r0, r4
 800d23e:	9301      	str	r3, [sp, #4]
 800d240:	f000 fab8 	bl	800d7b4 <__lshift>
 800d244:	4631      	mov	r1, r6
 800d246:	4683      	mov	fp, r0
 800d248:	f000 fb20 	bl	800d88c <__mcmp>
 800d24c:	2800      	cmp	r0, #0
 800d24e:	9b01      	ldr	r3, [sp, #4]
 800d250:	dc02      	bgt.n	800d258 <_dtoa_r+0xab8>
 800d252:	d1de      	bne.n	800d212 <_dtoa_r+0xa72>
 800d254:	07da      	lsls	r2, r3, #31
 800d256:	d5dc      	bpl.n	800d212 <_dtoa_r+0xa72>
 800d258:	2b39      	cmp	r3, #57	; 0x39
 800d25a:	d1d8      	bne.n	800d20e <_dtoa_r+0xa6e>
 800d25c:	9a02      	ldr	r2, [sp, #8]
 800d25e:	2339      	movs	r3, #57	; 0x39
 800d260:	7013      	strb	r3, [r2, #0]
 800d262:	462b      	mov	r3, r5
 800d264:	461d      	mov	r5, r3
 800d266:	3b01      	subs	r3, #1
 800d268:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d26c:	2a39      	cmp	r2, #57	; 0x39
 800d26e:	d050      	beq.n	800d312 <_dtoa_r+0xb72>
 800d270:	3201      	adds	r2, #1
 800d272:	701a      	strb	r2, [r3, #0]
 800d274:	e745      	b.n	800d102 <_dtoa_r+0x962>
 800d276:	2a00      	cmp	r2, #0
 800d278:	dd03      	ble.n	800d282 <_dtoa_r+0xae2>
 800d27a:	2b39      	cmp	r3, #57	; 0x39
 800d27c:	d0ee      	beq.n	800d25c <_dtoa_r+0xabc>
 800d27e:	3301      	adds	r3, #1
 800d280:	e7c7      	b.n	800d212 <_dtoa_r+0xa72>
 800d282:	9a01      	ldr	r2, [sp, #4]
 800d284:	9907      	ldr	r1, [sp, #28]
 800d286:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d28a:	428a      	cmp	r2, r1
 800d28c:	d02a      	beq.n	800d2e4 <_dtoa_r+0xb44>
 800d28e:	4659      	mov	r1, fp
 800d290:	2300      	movs	r3, #0
 800d292:	220a      	movs	r2, #10
 800d294:	4620      	mov	r0, r4
 800d296:	f000 f8dd 	bl	800d454 <__multadd>
 800d29a:	45b8      	cmp	r8, r7
 800d29c:	4683      	mov	fp, r0
 800d29e:	f04f 0300 	mov.w	r3, #0
 800d2a2:	f04f 020a 	mov.w	r2, #10
 800d2a6:	4641      	mov	r1, r8
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	d107      	bne.n	800d2bc <_dtoa_r+0xb1c>
 800d2ac:	f000 f8d2 	bl	800d454 <__multadd>
 800d2b0:	4680      	mov	r8, r0
 800d2b2:	4607      	mov	r7, r0
 800d2b4:	9b01      	ldr	r3, [sp, #4]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	9301      	str	r3, [sp, #4]
 800d2ba:	e775      	b.n	800d1a8 <_dtoa_r+0xa08>
 800d2bc:	f000 f8ca 	bl	800d454 <__multadd>
 800d2c0:	4639      	mov	r1, r7
 800d2c2:	4680      	mov	r8, r0
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	220a      	movs	r2, #10
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 f8c3 	bl	800d454 <__multadd>
 800d2ce:	4607      	mov	r7, r0
 800d2d0:	e7f0      	b.n	800d2b4 <_dtoa_r+0xb14>
 800d2d2:	f1b9 0f00 	cmp.w	r9, #0
 800d2d6:	9a00      	ldr	r2, [sp, #0]
 800d2d8:	bfcc      	ite	gt
 800d2da:	464d      	movgt	r5, r9
 800d2dc:	2501      	movle	r5, #1
 800d2de:	4415      	add	r5, r2
 800d2e0:	f04f 0800 	mov.w	r8, #0
 800d2e4:	4659      	mov	r1, fp
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	9301      	str	r3, [sp, #4]
 800d2ec:	f000 fa62 	bl	800d7b4 <__lshift>
 800d2f0:	4631      	mov	r1, r6
 800d2f2:	4683      	mov	fp, r0
 800d2f4:	f000 faca 	bl	800d88c <__mcmp>
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	dcb2      	bgt.n	800d262 <_dtoa_r+0xac2>
 800d2fc:	d102      	bne.n	800d304 <_dtoa_r+0xb64>
 800d2fe:	9b01      	ldr	r3, [sp, #4]
 800d300:	07db      	lsls	r3, r3, #31
 800d302:	d4ae      	bmi.n	800d262 <_dtoa_r+0xac2>
 800d304:	462b      	mov	r3, r5
 800d306:	461d      	mov	r5, r3
 800d308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d30c:	2a30      	cmp	r2, #48	; 0x30
 800d30e:	d0fa      	beq.n	800d306 <_dtoa_r+0xb66>
 800d310:	e6f7      	b.n	800d102 <_dtoa_r+0x962>
 800d312:	9a00      	ldr	r2, [sp, #0]
 800d314:	429a      	cmp	r2, r3
 800d316:	d1a5      	bne.n	800d264 <_dtoa_r+0xac4>
 800d318:	f10a 0a01 	add.w	sl, sl, #1
 800d31c:	2331      	movs	r3, #49	; 0x31
 800d31e:	e779      	b.n	800d214 <_dtoa_r+0xa74>
 800d320:	4b13      	ldr	r3, [pc, #76]	; (800d370 <_dtoa_r+0xbd0>)
 800d322:	f7ff baaf 	b.w	800c884 <_dtoa_r+0xe4>
 800d326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f47f aa86 	bne.w	800c83a <_dtoa_r+0x9a>
 800d32e:	4b11      	ldr	r3, [pc, #68]	; (800d374 <_dtoa_r+0xbd4>)
 800d330:	f7ff baa8 	b.w	800c884 <_dtoa_r+0xe4>
 800d334:	f1b9 0f00 	cmp.w	r9, #0
 800d338:	dc03      	bgt.n	800d342 <_dtoa_r+0xba2>
 800d33a:	9b05      	ldr	r3, [sp, #20]
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	f73f aec9 	bgt.w	800d0d4 <_dtoa_r+0x934>
 800d342:	9d00      	ldr	r5, [sp, #0]
 800d344:	4631      	mov	r1, r6
 800d346:	4658      	mov	r0, fp
 800d348:	f7ff f99e 	bl	800c688 <quorem>
 800d34c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d350:	f805 3b01 	strb.w	r3, [r5], #1
 800d354:	9a00      	ldr	r2, [sp, #0]
 800d356:	1aaa      	subs	r2, r5, r2
 800d358:	4591      	cmp	r9, r2
 800d35a:	ddba      	ble.n	800d2d2 <_dtoa_r+0xb32>
 800d35c:	4659      	mov	r1, fp
 800d35e:	2300      	movs	r3, #0
 800d360:	220a      	movs	r2, #10
 800d362:	4620      	mov	r0, r4
 800d364:	f000 f876 	bl	800d454 <__multadd>
 800d368:	4683      	mov	fp, r0
 800d36a:	e7eb      	b.n	800d344 <_dtoa_r+0xba4>
 800d36c:	08010143 	.word	0x08010143
 800d370:	0801009c 	.word	0x0801009c
 800d374:	080100c0 	.word	0x080100c0

0800d378 <_localeconv_r>:
 800d378:	4800      	ldr	r0, [pc, #0]	; (800d37c <_localeconv_r+0x4>)
 800d37a:	4770      	bx	lr
 800d37c:	20000188 	.word	0x20000188

0800d380 <malloc>:
 800d380:	4b02      	ldr	r3, [pc, #8]	; (800d38c <malloc+0xc>)
 800d382:	4601      	mov	r1, r0
 800d384:	6818      	ldr	r0, [r3, #0]
 800d386:	f000 bbe1 	b.w	800db4c <_malloc_r>
 800d38a:	bf00      	nop
 800d38c:	20000034 	.word	0x20000034

0800d390 <_Balloc>:
 800d390:	b570      	push	{r4, r5, r6, lr}
 800d392:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d394:	4604      	mov	r4, r0
 800d396:	460d      	mov	r5, r1
 800d398:	b976      	cbnz	r6, 800d3b8 <_Balloc+0x28>
 800d39a:	2010      	movs	r0, #16
 800d39c:	f7ff fff0 	bl	800d380 <malloc>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	6260      	str	r0, [r4, #36]	; 0x24
 800d3a4:	b920      	cbnz	r0, 800d3b0 <_Balloc+0x20>
 800d3a6:	4b18      	ldr	r3, [pc, #96]	; (800d408 <_Balloc+0x78>)
 800d3a8:	4818      	ldr	r0, [pc, #96]	; (800d40c <_Balloc+0x7c>)
 800d3aa:	2166      	movs	r1, #102	; 0x66
 800d3ac:	f000 fd94 	bl	800ded8 <__assert_func>
 800d3b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3b4:	6006      	str	r6, [r0, #0]
 800d3b6:	60c6      	str	r6, [r0, #12]
 800d3b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d3ba:	68f3      	ldr	r3, [r6, #12]
 800d3bc:	b183      	cbz	r3, 800d3e0 <_Balloc+0x50>
 800d3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3c6:	b9b8      	cbnz	r0, 800d3f8 <_Balloc+0x68>
 800d3c8:	2101      	movs	r1, #1
 800d3ca:	fa01 f605 	lsl.w	r6, r1, r5
 800d3ce:	1d72      	adds	r2, r6, #5
 800d3d0:	0092      	lsls	r2, r2, #2
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f000 fb5a 	bl	800da8c <_calloc_r>
 800d3d8:	b160      	cbz	r0, 800d3f4 <_Balloc+0x64>
 800d3da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3de:	e00e      	b.n	800d3fe <_Balloc+0x6e>
 800d3e0:	2221      	movs	r2, #33	; 0x21
 800d3e2:	2104      	movs	r1, #4
 800d3e4:	4620      	mov	r0, r4
 800d3e6:	f000 fb51 	bl	800da8c <_calloc_r>
 800d3ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3ec:	60f0      	str	r0, [r6, #12]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1e4      	bne.n	800d3be <_Balloc+0x2e>
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	bd70      	pop	{r4, r5, r6, pc}
 800d3f8:	6802      	ldr	r2, [r0, #0]
 800d3fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3fe:	2300      	movs	r3, #0
 800d400:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d404:	e7f7      	b.n	800d3f6 <_Balloc+0x66>
 800d406:	bf00      	nop
 800d408:	080100cd 	.word	0x080100cd
 800d40c:	08010154 	.word	0x08010154

0800d410 <_Bfree>:
 800d410:	b570      	push	{r4, r5, r6, lr}
 800d412:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d414:	4605      	mov	r5, r0
 800d416:	460c      	mov	r4, r1
 800d418:	b976      	cbnz	r6, 800d438 <_Bfree+0x28>
 800d41a:	2010      	movs	r0, #16
 800d41c:	f7ff ffb0 	bl	800d380 <malloc>
 800d420:	4602      	mov	r2, r0
 800d422:	6268      	str	r0, [r5, #36]	; 0x24
 800d424:	b920      	cbnz	r0, 800d430 <_Bfree+0x20>
 800d426:	4b09      	ldr	r3, [pc, #36]	; (800d44c <_Bfree+0x3c>)
 800d428:	4809      	ldr	r0, [pc, #36]	; (800d450 <_Bfree+0x40>)
 800d42a:	218a      	movs	r1, #138	; 0x8a
 800d42c:	f000 fd54 	bl	800ded8 <__assert_func>
 800d430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d434:	6006      	str	r6, [r0, #0]
 800d436:	60c6      	str	r6, [r0, #12]
 800d438:	b13c      	cbz	r4, 800d44a <_Bfree+0x3a>
 800d43a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d43c:	6862      	ldr	r2, [r4, #4]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d444:	6021      	str	r1, [r4, #0]
 800d446:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d44a:	bd70      	pop	{r4, r5, r6, pc}
 800d44c:	080100cd 	.word	0x080100cd
 800d450:	08010154 	.word	0x08010154

0800d454 <__multadd>:
 800d454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d458:	690e      	ldr	r6, [r1, #16]
 800d45a:	4607      	mov	r7, r0
 800d45c:	4698      	mov	r8, r3
 800d45e:	460c      	mov	r4, r1
 800d460:	f101 0014 	add.w	r0, r1, #20
 800d464:	2300      	movs	r3, #0
 800d466:	6805      	ldr	r5, [r0, #0]
 800d468:	b2a9      	uxth	r1, r5
 800d46a:	fb02 8101 	mla	r1, r2, r1, r8
 800d46e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d472:	0c2d      	lsrs	r5, r5, #16
 800d474:	fb02 c505 	mla	r5, r2, r5, ip
 800d478:	b289      	uxth	r1, r1
 800d47a:	3301      	adds	r3, #1
 800d47c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d480:	429e      	cmp	r6, r3
 800d482:	f840 1b04 	str.w	r1, [r0], #4
 800d486:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d48a:	dcec      	bgt.n	800d466 <__multadd+0x12>
 800d48c:	f1b8 0f00 	cmp.w	r8, #0
 800d490:	d022      	beq.n	800d4d8 <__multadd+0x84>
 800d492:	68a3      	ldr	r3, [r4, #8]
 800d494:	42b3      	cmp	r3, r6
 800d496:	dc19      	bgt.n	800d4cc <__multadd+0x78>
 800d498:	6861      	ldr	r1, [r4, #4]
 800d49a:	4638      	mov	r0, r7
 800d49c:	3101      	adds	r1, #1
 800d49e:	f7ff ff77 	bl	800d390 <_Balloc>
 800d4a2:	4605      	mov	r5, r0
 800d4a4:	b928      	cbnz	r0, 800d4b2 <__multadd+0x5e>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	4b0d      	ldr	r3, [pc, #52]	; (800d4e0 <__multadd+0x8c>)
 800d4aa:	480e      	ldr	r0, [pc, #56]	; (800d4e4 <__multadd+0x90>)
 800d4ac:	21b5      	movs	r1, #181	; 0xb5
 800d4ae:	f000 fd13 	bl	800ded8 <__assert_func>
 800d4b2:	6922      	ldr	r2, [r4, #16]
 800d4b4:	3202      	adds	r2, #2
 800d4b6:	f104 010c 	add.w	r1, r4, #12
 800d4ba:	0092      	lsls	r2, r2, #2
 800d4bc:	300c      	adds	r0, #12
 800d4be:	f7fe fc43 	bl	800bd48 <memcpy>
 800d4c2:	4621      	mov	r1, r4
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	f7ff ffa3 	bl	800d410 <_Bfree>
 800d4ca:	462c      	mov	r4, r5
 800d4cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d4d0:	3601      	adds	r6, #1
 800d4d2:	f8c3 8014 	str.w	r8, [r3, #20]
 800d4d6:	6126      	str	r6, [r4, #16]
 800d4d8:	4620      	mov	r0, r4
 800d4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4de:	bf00      	nop
 800d4e0:	08010143 	.word	0x08010143
 800d4e4:	08010154 	.word	0x08010154

0800d4e8 <__hi0bits>:
 800d4e8:	0c03      	lsrs	r3, r0, #16
 800d4ea:	041b      	lsls	r3, r3, #16
 800d4ec:	b9d3      	cbnz	r3, 800d524 <__hi0bits+0x3c>
 800d4ee:	0400      	lsls	r0, r0, #16
 800d4f0:	2310      	movs	r3, #16
 800d4f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d4f6:	bf04      	itt	eq
 800d4f8:	0200      	lsleq	r0, r0, #8
 800d4fa:	3308      	addeq	r3, #8
 800d4fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d500:	bf04      	itt	eq
 800d502:	0100      	lsleq	r0, r0, #4
 800d504:	3304      	addeq	r3, #4
 800d506:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d50a:	bf04      	itt	eq
 800d50c:	0080      	lsleq	r0, r0, #2
 800d50e:	3302      	addeq	r3, #2
 800d510:	2800      	cmp	r0, #0
 800d512:	db05      	blt.n	800d520 <__hi0bits+0x38>
 800d514:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d518:	f103 0301 	add.w	r3, r3, #1
 800d51c:	bf08      	it	eq
 800d51e:	2320      	moveq	r3, #32
 800d520:	4618      	mov	r0, r3
 800d522:	4770      	bx	lr
 800d524:	2300      	movs	r3, #0
 800d526:	e7e4      	b.n	800d4f2 <__hi0bits+0xa>

0800d528 <__lo0bits>:
 800d528:	6803      	ldr	r3, [r0, #0]
 800d52a:	f013 0207 	ands.w	r2, r3, #7
 800d52e:	4601      	mov	r1, r0
 800d530:	d00b      	beq.n	800d54a <__lo0bits+0x22>
 800d532:	07da      	lsls	r2, r3, #31
 800d534:	d424      	bmi.n	800d580 <__lo0bits+0x58>
 800d536:	0798      	lsls	r0, r3, #30
 800d538:	bf49      	itett	mi
 800d53a:	085b      	lsrmi	r3, r3, #1
 800d53c:	089b      	lsrpl	r3, r3, #2
 800d53e:	2001      	movmi	r0, #1
 800d540:	600b      	strmi	r3, [r1, #0]
 800d542:	bf5c      	itt	pl
 800d544:	600b      	strpl	r3, [r1, #0]
 800d546:	2002      	movpl	r0, #2
 800d548:	4770      	bx	lr
 800d54a:	b298      	uxth	r0, r3
 800d54c:	b9b0      	cbnz	r0, 800d57c <__lo0bits+0x54>
 800d54e:	0c1b      	lsrs	r3, r3, #16
 800d550:	2010      	movs	r0, #16
 800d552:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d556:	bf04      	itt	eq
 800d558:	0a1b      	lsreq	r3, r3, #8
 800d55a:	3008      	addeq	r0, #8
 800d55c:	071a      	lsls	r2, r3, #28
 800d55e:	bf04      	itt	eq
 800d560:	091b      	lsreq	r3, r3, #4
 800d562:	3004      	addeq	r0, #4
 800d564:	079a      	lsls	r2, r3, #30
 800d566:	bf04      	itt	eq
 800d568:	089b      	lsreq	r3, r3, #2
 800d56a:	3002      	addeq	r0, #2
 800d56c:	07da      	lsls	r2, r3, #31
 800d56e:	d403      	bmi.n	800d578 <__lo0bits+0x50>
 800d570:	085b      	lsrs	r3, r3, #1
 800d572:	f100 0001 	add.w	r0, r0, #1
 800d576:	d005      	beq.n	800d584 <__lo0bits+0x5c>
 800d578:	600b      	str	r3, [r1, #0]
 800d57a:	4770      	bx	lr
 800d57c:	4610      	mov	r0, r2
 800d57e:	e7e8      	b.n	800d552 <__lo0bits+0x2a>
 800d580:	2000      	movs	r0, #0
 800d582:	4770      	bx	lr
 800d584:	2020      	movs	r0, #32
 800d586:	4770      	bx	lr

0800d588 <__i2b>:
 800d588:	b510      	push	{r4, lr}
 800d58a:	460c      	mov	r4, r1
 800d58c:	2101      	movs	r1, #1
 800d58e:	f7ff feff 	bl	800d390 <_Balloc>
 800d592:	4602      	mov	r2, r0
 800d594:	b928      	cbnz	r0, 800d5a2 <__i2b+0x1a>
 800d596:	4b05      	ldr	r3, [pc, #20]	; (800d5ac <__i2b+0x24>)
 800d598:	4805      	ldr	r0, [pc, #20]	; (800d5b0 <__i2b+0x28>)
 800d59a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d59e:	f000 fc9b 	bl	800ded8 <__assert_func>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	6144      	str	r4, [r0, #20]
 800d5a6:	6103      	str	r3, [r0, #16]
 800d5a8:	bd10      	pop	{r4, pc}
 800d5aa:	bf00      	nop
 800d5ac:	08010143 	.word	0x08010143
 800d5b0:	08010154 	.word	0x08010154

0800d5b4 <__multiply>:
 800d5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b8:	4614      	mov	r4, r2
 800d5ba:	690a      	ldr	r2, [r1, #16]
 800d5bc:	6923      	ldr	r3, [r4, #16]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	bfb8      	it	lt
 800d5c2:	460b      	movlt	r3, r1
 800d5c4:	460d      	mov	r5, r1
 800d5c6:	bfbc      	itt	lt
 800d5c8:	4625      	movlt	r5, r4
 800d5ca:	461c      	movlt	r4, r3
 800d5cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d5d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d5d4:	68ab      	ldr	r3, [r5, #8]
 800d5d6:	6869      	ldr	r1, [r5, #4]
 800d5d8:	eb0a 0709 	add.w	r7, sl, r9
 800d5dc:	42bb      	cmp	r3, r7
 800d5de:	b085      	sub	sp, #20
 800d5e0:	bfb8      	it	lt
 800d5e2:	3101      	addlt	r1, #1
 800d5e4:	f7ff fed4 	bl	800d390 <_Balloc>
 800d5e8:	b930      	cbnz	r0, 800d5f8 <__multiply+0x44>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	4b42      	ldr	r3, [pc, #264]	; (800d6f8 <__multiply+0x144>)
 800d5ee:	4843      	ldr	r0, [pc, #268]	; (800d6fc <__multiply+0x148>)
 800d5f0:	f240 115d 	movw	r1, #349	; 0x15d
 800d5f4:	f000 fc70 	bl	800ded8 <__assert_func>
 800d5f8:	f100 0614 	add.w	r6, r0, #20
 800d5fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d600:	4633      	mov	r3, r6
 800d602:	2200      	movs	r2, #0
 800d604:	4543      	cmp	r3, r8
 800d606:	d31e      	bcc.n	800d646 <__multiply+0x92>
 800d608:	f105 0c14 	add.w	ip, r5, #20
 800d60c:	f104 0314 	add.w	r3, r4, #20
 800d610:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d614:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d618:	9202      	str	r2, [sp, #8]
 800d61a:	ebac 0205 	sub.w	r2, ip, r5
 800d61e:	3a15      	subs	r2, #21
 800d620:	f022 0203 	bic.w	r2, r2, #3
 800d624:	3204      	adds	r2, #4
 800d626:	f105 0115 	add.w	r1, r5, #21
 800d62a:	458c      	cmp	ip, r1
 800d62c:	bf38      	it	cc
 800d62e:	2204      	movcc	r2, #4
 800d630:	9201      	str	r2, [sp, #4]
 800d632:	9a02      	ldr	r2, [sp, #8]
 800d634:	9303      	str	r3, [sp, #12]
 800d636:	429a      	cmp	r2, r3
 800d638:	d808      	bhi.n	800d64c <__multiply+0x98>
 800d63a:	2f00      	cmp	r7, #0
 800d63c:	dc55      	bgt.n	800d6ea <__multiply+0x136>
 800d63e:	6107      	str	r7, [r0, #16]
 800d640:	b005      	add	sp, #20
 800d642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d646:	f843 2b04 	str.w	r2, [r3], #4
 800d64a:	e7db      	b.n	800d604 <__multiply+0x50>
 800d64c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d650:	f1ba 0f00 	cmp.w	sl, #0
 800d654:	d020      	beq.n	800d698 <__multiply+0xe4>
 800d656:	f105 0e14 	add.w	lr, r5, #20
 800d65a:	46b1      	mov	r9, r6
 800d65c:	2200      	movs	r2, #0
 800d65e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d662:	f8d9 b000 	ldr.w	fp, [r9]
 800d666:	b2a1      	uxth	r1, r4
 800d668:	fa1f fb8b 	uxth.w	fp, fp
 800d66c:	fb0a b101 	mla	r1, sl, r1, fp
 800d670:	4411      	add	r1, r2
 800d672:	f8d9 2000 	ldr.w	r2, [r9]
 800d676:	0c24      	lsrs	r4, r4, #16
 800d678:	0c12      	lsrs	r2, r2, #16
 800d67a:	fb0a 2404 	mla	r4, sl, r4, r2
 800d67e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d682:	b289      	uxth	r1, r1
 800d684:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d688:	45f4      	cmp	ip, lr
 800d68a:	f849 1b04 	str.w	r1, [r9], #4
 800d68e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d692:	d8e4      	bhi.n	800d65e <__multiply+0xaa>
 800d694:	9901      	ldr	r1, [sp, #4]
 800d696:	5072      	str	r2, [r6, r1]
 800d698:	9a03      	ldr	r2, [sp, #12]
 800d69a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d69e:	3304      	adds	r3, #4
 800d6a0:	f1b9 0f00 	cmp.w	r9, #0
 800d6a4:	d01f      	beq.n	800d6e6 <__multiply+0x132>
 800d6a6:	6834      	ldr	r4, [r6, #0]
 800d6a8:	f105 0114 	add.w	r1, r5, #20
 800d6ac:	46b6      	mov	lr, r6
 800d6ae:	f04f 0a00 	mov.w	sl, #0
 800d6b2:	880a      	ldrh	r2, [r1, #0]
 800d6b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d6b8:	fb09 b202 	mla	r2, r9, r2, fp
 800d6bc:	4492      	add	sl, r2
 800d6be:	b2a4      	uxth	r4, r4
 800d6c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d6c4:	f84e 4b04 	str.w	r4, [lr], #4
 800d6c8:	f851 4b04 	ldr.w	r4, [r1], #4
 800d6cc:	f8be 2000 	ldrh.w	r2, [lr]
 800d6d0:	0c24      	lsrs	r4, r4, #16
 800d6d2:	fb09 2404 	mla	r4, r9, r4, r2
 800d6d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d6da:	458c      	cmp	ip, r1
 800d6dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d6e0:	d8e7      	bhi.n	800d6b2 <__multiply+0xfe>
 800d6e2:	9a01      	ldr	r2, [sp, #4]
 800d6e4:	50b4      	str	r4, [r6, r2]
 800d6e6:	3604      	adds	r6, #4
 800d6e8:	e7a3      	b.n	800d632 <__multiply+0x7e>
 800d6ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d1a5      	bne.n	800d63e <__multiply+0x8a>
 800d6f2:	3f01      	subs	r7, #1
 800d6f4:	e7a1      	b.n	800d63a <__multiply+0x86>
 800d6f6:	bf00      	nop
 800d6f8:	08010143 	.word	0x08010143
 800d6fc:	08010154 	.word	0x08010154

0800d700 <__pow5mult>:
 800d700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d704:	4615      	mov	r5, r2
 800d706:	f012 0203 	ands.w	r2, r2, #3
 800d70a:	4606      	mov	r6, r0
 800d70c:	460f      	mov	r7, r1
 800d70e:	d007      	beq.n	800d720 <__pow5mult+0x20>
 800d710:	4c25      	ldr	r4, [pc, #148]	; (800d7a8 <__pow5mult+0xa8>)
 800d712:	3a01      	subs	r2, #1
 800d714:	2300      	movs	r3, #0
 800d716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d71a:	f7ff fe9b 	bl	800d454 <__multadd>
 800d71e:	4607      	mov	r7, r0
 800d720:	10ad      	asrs	r5, r5, #2
 800d722:	d03d      	beq.n	800d7a0 <__pow5mult+0xa0>
 800d724:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d726:	b97c      	cbnz	r4, 800d748 <__pow5mult+0x48>
 800d728:	2010      	movs	r0, #16
 800d72a:	f7ff fe29 	bl	800d380 <malloc>
 800d72e:	4602      	mov	r2, r0
 800d730:	6270      	str	r0, [r6, #36]	; 0x24
 800d732:	b928      	cbnz	r0, 800d740 <__pow5mult+0x40>
 800d734:	4b1d      	ldr	r3, [pc, #116]	; (800d7ac <__pow5mult+0xac>)
 800d736:	481e      	ldr	r0, [pc, #120]	; (800d7b0 <__pow5mult+0xb0>)
 800d738:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d73c:	f000 fbcc 	bl	800ded8 <__assert_func>
 800d740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d744:	6004      	str	r4, [r0, #0]
 800d746:	60c4      	str	r4, [r0, #12]
 800d748:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d74c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d750:	b94c      	cbnz	r4, 800d766 <__pow5mult+0x66>
 800d752:	f240 2171 	movw	r1, #625	; 0x271
 800d756:	4630      	mov	r0, r6
 800d758:	f7ff ff16 	bl	800d588 <__i2b>
 800d75c:	2300      	movs	r3, #0
 800d75e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d762:	4604      	mov	r4, r0
 800d764:	6003      	str	r3, [r0, #0]
 800d766:	f04f 0900 	mov.w	r9, #0
 800d76a:	07eb      	lsls	r3, r5, #31
 800d76c:	d50a      	bpl.n	800d784 <__pow5mult+0x84>
 800d76e:	4639      	mov	r1, r7
 800d770:	4622      	mov	r2, r4
 800d772:	4630      	mov	r0, r6
 800d774:	f7ff ff1e 	bl	800d5b4 <__multiply>
 800d778:	4639      	mov	r1, r7
 800d77a:	4680      	mov	r8, r0
 800d77c:	4630      	mov	r0, r6
 800d77e:	f7ff fe47 	bl	800d410 <_Bfree>
 800d782:	4647      	mov	r7, r8
 800d784:	106d      	asrs	r5, r5, #1
 800d786:	d00b      	beq.n	800d7a0 <__pow5mult+0xa0>
 800d788:	6820      	ldr	r0, [r4, #0]
 800d78a:	b938      	cbnz	r0, 800d79c <__pow5mult+0x9c>
 800d78c:	4622      	mov	r2, r4
 800d78e:	4621      	mov	r1, r4
 800d790:	4630      	mov	r0, r6
 800d792:	f7ff ff0f 	bl	800d5b4 <__multiply>
 800d796:	6020      	str	r0, [r4, #0]
 800d798:	f8c0 9000 	str.w	r9, [r0]
 800d79c:	4604      	mov	r4, r0
 800d79e:	e7e4      	b.n	800d76a <__pow5mult+0x6a>
 800d7a0:	4638      	mov	r0, r7
 800d7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a6:	bf00      	nop
 800d7a8:	080102a8 	.word	0x080102a8
 800d7ac:	080100cd 	.word	0x080100cd
 800d7b0:	08010154 	.word	0x08010154

0800d7b4 <__lshift>:
 800d7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	6849      	ldr	r1, [r1, #4]
 800d7bc:	6923      	ldr	r3, [r4, #16]
 800d7be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7c2:	68a3      	ldr	r3, [r4, #8]
 800d7c4:	4607      	mov	r7, r0
 800d7c6:	4691      	mov	r9, r2
 800d7c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7cc:	f108 0601 	add.w	r6, r8, #1
 800d7d0:	42b3      	cmp	r3, r6
 800d7d2:	db0b      	blt.n	800d7ec <__lshift+0x38>
 800d7d4:	4638      	mov	r0, r7
 800d7d6:	f7ff fddb 	bl	800d390 <_Balloc>
 800d7da:	4605      	mov	r5, r0
 800d7dc:	b948      	cbnz	r0, 800d7f2 <__lshift+0x3e>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	4b28      	ldr	r3, [pc, #160]	; (800d884 <__lshift+0xd0>)
 800d7e2:	4829      	ldr	r0, [pc, #164]	; (800d888 <__lshift+0xd4>)
 800d7e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d7e8:	f000 fb76 	bl	800ded8 <__assert_func>
 800d7ec:	3101      	adds	r1, #1
 800d7ee:	005b      	lsls	r3, r3, #1
 800d7f0:	e7ee      	b.n	800d7d0 <__lshift+0x1c>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	f100 0114 	add.w	r1, r0, #20
 800d7f8:	f100 0210 	add.w	r2, r0, #16
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	4553      	cmp	r3, sl
 800d800:	db33      	blt.n	800d86a <__lshift+0xb6>
 800d802:	6920      	ldr	r0, [r4, #16]
 800d804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d808:	f104 0314 	add.w	r3, r4, #20
 800d80c:	f019 091f 	ands.w	r9, r9, #31
 800d810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d814:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d818:	d02b      	beq.n	800d872 <__lshift+0xbe>
 800d81a:	f1c9 0e20 	rsb	lr, r9, #32
 800d81e:	468a      	mov	sl, r1
 800d820:	2200      	movs	r2, #0
 800d822:	6818      	ldr	r0, [r3, #0]
 800d824:	fa00 f009 	lsl.w	r0, r0, r9
 800d828:	4302      	orrs	r2, r0
 800d82a:	f84a 2b04 	str.w	r2, [sl], #4
 800d82e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d832:	459c      	cmp	ip, r3
 800d834:	fa22 f20e 	lsr.w	r2, r2, lr
 800d838:	d8f3      	bhi.n	800d822 <__lshift+0x6e>
 800d83a:	ebac 0304 	sub.w	r3, ip, r4
 800d83e:	3b15      	subs	r3, #21
 800d840:	f023 0303 	bic.w	r3, r3, #3
 800d844:	3304      	adds	r3, #4
 800d846:	f104 0015 	add.w	r0, r4, #21
 800d84a:	4584      	cmp	ip, r0
 800d84c:	bf38      	it	cc
 800d84e:	2304      	movcc	r3, #4
 800d850:	50ca      	str	r2, [r1, r3]
 800d852:	b10a      	cbz	r2, 800d858 <__lshift+0xa4>
 800d854:	f108 0602 	add.w	r6, r8, #2
 800d858:	3e01      	subs	r6, #1
 800d85a:	4638      	mov	r0, r7
 800d85c:	612e      	str	r6, [r5, #16]
 800d85e:	4621      	mov	r1, r4
 800d860:	f7ff fdd6 	bl	800d410 <_Bfree>
 800d864:	4628      	mov	r0, r5
 800d866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d86a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d86e:	3301      	adds	r3, #1
 800d870:	e7c5      	b.n	800d7fe <__lshift+0x4a>
 800d872:	3904      	subs	r1, #4
 800d874:	f853 2b04 	ldr.w	r2, [r3], #4
 800d878:	f841 2f04 	str.w	r2, [r1, #4]!
 800d87c:	459c      	cmp	ip, r3
 800d87e:	d8f9      	bhi.n	800d874 <__lshift+0xc0>
 800d880:	e7ea      	b.n	800d858 <__lshift+0xa4>
 800d882:	bf00      	nop
 800d884:	08010143 	.word	0x08010143
 800d888:	08010154 	.word	0x08010154

0800d88c <__mcmp>:
 800d88c:	b530      	push	{r4, r5, lr}
 800d88e:	6902      	ldr	r2, [r0, #16]
 800d890:	690c      	ldr	r4, [r1, #16]
 800d892:	1b12      	subs	r2, r2, r4
 800d894:	d10e      	bne.n	800d8b4 <__mcmp+0x28>
 800d896:	f100 0314 	add.w	r3, r0, #20
 800d89a:	3114      	adds	r1, #20
 800d89c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d8a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d8a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d8a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d8ac:	42a5      	cmp	r5, r4
 800d8ae:	d003      	beq.n	800d8b8 <__mcmp+0x2c>
 800d8b0:	d305      	bcc.n	800d8be <__mcmp+0x32>
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	bd30      	pop	{r4, r5, pc}
 800d8b8:	4283      	cmp	r3, r0
 800d8ba:	d3f3      	bcc.n	800d8a4 <__mcmp+0x18>
 800d8bc:	e7fa      	b.n	800d8b4 <__mcmp+0x28>
 800d8be:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c2:	e7f7      	b.n	800d8b4 <__mcmp+0x28>

0800d8c4 <__mdiff>:
 800d8c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c8:	460c      	mov	r4, r1
 800d8ca:	4606      	mov	r6, r0
 800d8cc:	4611      	mov	r1, r2
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	4617      	mov	r7, r2
 800d8d2:	f7ff ffdb 	bl	800d88c <__mcmp>
 800d8d6:	1e05      	subs	r5, r0, #0
 800d8d8:	d110      	bne.n	800d8fc <__mdiff+0x38>
 800d8da:	4629      	mov	r1, r5
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f7ff fd57 	bl	800d390 <_Balloc>
 800d8e2:	b930      	cbnz	r0, 800d8f2 <__mdiff+0x2e>
 800d8e4:	4b39      	ldr	r3, [pc, #228]	; (800d9cc <__mdiff+0x108>)
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	f240 2132 	movw	r1, #562	; 0x232
 800d8ec:	4838      	ldr	r0, [pc, #224]	; (800d9d0 <__mdiff+0x10c>)
 800d8ee:	f000 faf3 	bl	800ded8 <__assert_func>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8fc:	bfa4      	itt	ge
 800d8fe:	463b      	movge	r3, r7
 800d900:	4627      	movge	r7, r4
 800d902:	4630      	mov	r0, r6
 800d904:	6879      	ldr	r1, [r7, #4]
 800d906:	bfa6      	itte	ge
 800d908:	461c      	movge	r4, r3
 800d90a:	2500      	movge	r5, #0
 800d90c:	2501      	movlt	r5, #1
 800d90e:	f7ff fd3f 	bl	800d390 <_Balloc>
 800d912:	b920      	cbnz	r0, 800d91e <__mdiff+0x5a>
 800d914:	4b2d      	ldr	r3, [pc, #180]	; (800d9cc <__mdiff+0x108>)
 800d916:	4602      	mov	r2, r0
 800d918:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d91c:	e7e6      	b.n	800d8ec <__mdiff+0x28>
 800d91e:	693e      	ldr	r6, [r7, #16]
 800d920:	60c5      	str	r5, [r0, #12]
 800d922:	6925      	ldr	r5, [r4, #16]
 800d924:	f107 0114 	add.w	r1, r7, #20
 800d928:	f104 0914 	add.w	r9, r4, #20
 800d92c:	f100 0e14 	add.w	lr, r0, #20
 800d930:	f107 0210 	add.w	r2, r7, #16
 800d934:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d938:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d93c:	46f2      	mov	sl, lr
 800d93e:	2700      	movs	r7, #0
 800d940:	f859 3b04 	ldr.w	r3, [r9], #4
 800d944:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d948:	fa1f f883 	uxth.w	r8, r3
 800d94c:	fa17 f78b 	uxtah	r7, r7, fp
 800d950:	0c1b      	lsrs	r3, r3, #16
 800d952:	eba7 0808 	sub.w	r8, r7, r8
 800d956:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d95a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d95e:	fa1f f888 	uxth.w	r8, r8
 800d962:	141f      	asrs	r7, r3, #16
 800d964:	454d      	cmp	r5, r9
 800d966:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d96a:	f84a 3b04 	str.w	r3, [sl], #4
 800d96e:	d8e7      	bhi.n	800d940 <__mdiff+0x7c>
 800d970:	1b2b      	subs	r3, r5, r4
 800d972:	3b15      	subs	r3, #21
 800d974:	f023 0303 	bic.w	r3, r3, #3
 800d978:	3304      	adds	r3, #4
 800d97a:	3415      	adds	r4, #21
 800d97c:	42a5      	cmp	r5, r4
 800d97e:	bf38      	it	cc
 800d980:	2304      	movcc	r3, #4
 800d982:	4419      	add	r1, r3
 800d984:	4473      	add	r3, lr
 800d986:	469e      	mov	lr, r3
 800d988:	460d      	mov	r5, r1
 800d98a:	4565      	cmp	r5, ip
 800d98c:	d30e      	bcc.n	800d9ac <__mdiff+0xe8>
 800d98e:	f10c 0203 	add.w	r2, ip, #3
 800d992:	1a52      	subs	r2, r2, r1
 800d994:	f022 0203 	bic.w	r2, r2, #3
 800d998:	3903      	subs	r1, #3
 800d99a:	458c      	cmp	ip, r1
 800d99c:	bf38      	it	cc
 800d99e:	2200      	movcc	r2, #0
 800d9a0:	441a      	add	r2, r3
 800d9a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d9a6:	b17b      	cbz	r3, 800d9c8 <__mdiff+0x104>
 800d9a8:	6106      	str	r6, [r0, #16]
 800d9aa:	e7a5      	b.n	800d8f8 <__mdiff+0x34>
 800d9ac:	f855 8b04 	ldr.w	r8, [r5], #4
 800d9b0:	fa17 f488 	uxtah	r4, r7, r8
 800d9b4:	1422      	asrs	r2, r4, #16
 800d9b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d9ba:	b2a4      	uxth	r4, r4
 800d9bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d9c0:	f84e 4b04 	str.w	r4, [lr], #4
 800d9c4:	1417      	asrs	r7, r2, #16
 800d9c6:	e7e0      	b.n	800d98a <__mdiff+0xc6>
 800d9c8:	3e01      	subs	r6, #1
 800d9ca:	e7ea      	b.n	800d9a2 <__mdiff+0xde>
 800d9cc:	08010143 	.word	0x08010143
 800d9d0:	08010154 	.word	0x08010154

0800d9d4 <__d2b>:
 800d9d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9d8:	4689      	mov	r9, r1
 800d9da:	2101      	movs	r1, #1
 800d9dc:	ec57 6b10 	vmov	r6, r7, d0
 800d9e0:	4690      	mov	r8, r2
 800d9e2:	f7ff fcd5 	bl	800d390 <_Balloc>
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	b930      	cbnz	r0, 800d9f8 <__d2b+0x24>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	4b25      	ldr	r3, [pc, #148]	; (800da84 <__d2b+0xb0>)
 800d9ee:	4826      	ldr	r0, [pc, #152]	; (800da88 <__d2b+0xb4>)
 800d9f0:	f240 310a 	movw	r1, #778	; 0x30a
 800d9f4:	f000 fa70 	bl	800ded8 <__assert_func>
 800d9f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d9fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da00:	bb35      	cbnz	r5, 800da50 <__d2b+0x7c>
 800da02:	2e00      	cmp	r6, #0
 800da04:	9301      	str	r3, [sp, #4]
 800da06:	d028      	beq.n	800da5a <__d2b+0x86>
 800da08:	4668      	mov	r0, sp
 800da0a:	9600      	str	r6, [sp, #0]
 800da0c:	f7ff fd8c 	bl	800d528 <__lo0bits>
 800da10:	9900      	ldr	r1, [sp, #0]
 800da12:	b300      	cbz	r0, 800da56 <__d2b+0x82>
 800da14:	9a01      	ldr	r2, [sp, #4]
 800da16:	f1c0 0320 	rsb	r3, r0, #32
 800da1a:	fa02 f303 	lsl.w	r3, r2, r3
 800da1e:	430b      	orrs	r3, r1
 800da20:	40c2      	lsrs	r2, r0
 800da22:	6163      	str	r3, [r4, #20]
 800da24:	9201      	str	r2, [sp, #4]
 800da26:	9b01      	ldr	r3, [sp, #4]
 800da28:	61a3      	str	r3, [r4, #24]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	bf14      	ite	ne
 800da2e:	2202      	movne	r2, #2
 800da30:	2201      	moveq	r2, #1
 800da32:	6122      	str	r2, [r4, #16]
 800da34:	b1d5      	cbz	r5, 800da6c <__d2b+0x98>
 800da36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da3a:	4405      	add	r5, r0
 800da3c:	f8c9 5000 	str.w	r5, [r9]
 800da40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da44:	f8c8 0000 	str.w	r0, [r8]
 800da48:	4620      	mov	r0, r4
 800da4a:	b003      	add	sp, #12
 800da4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da54:	e7d5      	b.n	800da02 <__d2b+0x2e>
 800da56:	6161      	str	r1, [r4, #20]
 800da58:	e7e5      	b.n	800da26 <__d2b+0x52>
 800da5a:	a801      	add	r0, sp, #4
 800da5c:	f7ff fd64 	bl	800d528 <__lo0bits>
 800da60:	9b01      	ldr	r3, [sp, #4]
 800da62:	6163      	str	r3, [r4, #20]
 800da64:	2201      	movs	r2, #1
 800da66:	6122      	str	r2, [r4, #16]
 800da68:	3020      	adds	r0, #32
 800da6a:	e7e3      	b.n	800da34 <__d2b+0x60>
 800da6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da74:	f8c9 0000 	str.w	r0, [r9]
 800da78:	6918      	ldr	r0, [r3, #16]
 800da7a:	f7ff fd35 	bl	800d4e8 <__hi0bits>
 800da7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da82:	e7df      	b.n	800da44 <__d2b+0x70>
 800da84:	08010143 	.word	0x08010143
 800da88:	08010154 	.word	0x08010154

0800da8c <_calloc_r>:
 800da8c:	b513      	push	{r0, r1, r4, lr}
 800da8e:	434a      	muls	r2, r1
 800da90:	4611      	mov	r1, r2
 800da92:	9201      	str	r2, [sp, #4]
 800da94:	f000 f85a 	bl	800db4c <_malloc_r>
 800da98:	4604      	mov	r4, r0
 800da9a:	b118      	cbz	r0, 800daa4 <_calloc_r+0x18>
 800da9c:	9a01      	ldr	r2, [sp, #4]
 800da9e:	2100      	movs	r1, #0
 800daa0:	f7fe f960 	bl	800bd64 <memset>
 800daa4:	4620      	mov	r0, r4
 800daa6:	b002      	add	sp, #8
 800daa8:	bd10      	pop	{r4, pc}
	...

0800daac <_free_r>:
 800daac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800daae:	2900      	cmp	r1, #0
 800dab0:	d048      	beq.n	800db44 <_free_r+0x98>
 800dab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dab6:	9001      	str	r0, [sp, #4]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f1a1 0404 	sub.w	r4, r1, #4
 800dabe:	bfb8      	it	lt
 800dac0:	18e4      	addlt	r4, r4, r3
 800dac2:	f000 fa65 	bl	800df90 <__malloc_lock>
 800dac6:	4a20      	ldr	r2, [pc, #128]	; (800db48 <_free_r+0x9c>)
 800dac8:	9801      	ldr	r0, [sp, #4]
 800daca:	6813      	ldr	r3, [r2, #0]
 800dacc:	4615      	mov	r5, r2
 800dace:	b933      	cbnz	r3, 800dade <_free_r+0x32>
 800dad0:	6063      	str	r3, [r4, #4]
 800dad2:	6014      	str	r4, [r2, #0]
 800dad4:	b003      	add	sp, #12
 800dad6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dada:	f000 ba5f 	b.w	800df9c <__malloc_unlock>
 800dade:	42a3      	cmp	r3, r4
 800dae0:	d90b      	bls.n	800dafa <_free_r+0x4e>
 800dae2:	6821      	ldr	r1, [r4, #0]
 800dae4:	1862      	adds	r2, r4, r1
 800dae6:	4293      	cmp	r3, r2
 800dae8:	bf04      	itt	eq
 800daea:	681a      	ldreq	r2, [r3, #0]
 800daec:	685b      	ldreq	r3, [r3, #4]
 800daee:	6063      	str	r3, [r4, #4]
 800daf0:	bf04      	itt	eq
 800daf2:	1852      	addeq	r2, r2, r1
 800daf4:	6022      	streq	r2, [r4, #0]
 800daf6:	602c      	str	r4, [r5, #0]
 800daf8:	e7ec      	b.n	800dad4 <_free_r+0x28>
 800dafa:	461a      	mov	r2, r3
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	b10b      	cbz	r3, 800db04 <_free_r+0x58>
 800db00:	42a3      	cmp	r3, r4
 800db02:	d9fa      	bls.n	800dafa <_free_r+0x4e>
 800db04:	6811      	ldr	r1, [r2, #0]
 800db06:	1855      	adds	r5, r2, r1
 800db08:	42a5      	cmp	r5, r4
 800db0a:	d10b      	bne.n	800db24 <_free_r+0x78>
 800db0c:	6824      	ldr	r4, [r4, #0]
 800db0e:	4421      	add	r1, r4
 800db10:	1854      	adds	r4, r2, r1
 800db12:	42a3      	cmp	r3, r4
 800db14:	6011      	str	r1, [r2, #0]
 800db16:	d1dd      	bne.n	800dad4 <_free_r+0x28>
 800db18:	681c      	ldr	r4, [r3, #0]
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	6053      	str	r3, [r2, #4]
 800db1e:	4421      	add	r1, r4
 800db20:	6011      	str	r1, [r2, #0]
 800db22:	e7d7      	b.n	800dad4 <_free_r+0x28>
 800db24:	d902      	bls.n	800db2c <_free_r+0x80>
 800db26:	230c      	movs	r3, #12
 800db28:	6003      	str	r3, [r0, #0]
 800db2a:	e7d3      	b.n	800dad4 <_free_r+0x28>
 800db2c:	6825      	ldr	r5, [r4, #0]
 800db2e:	1961      	adds	r1, r4, r5
 800db30:	428b      	cmp	r3, r1
 800db32:	bf04      	itt	eq
 800db34:	6819      	ldreq	r1, [r3, #0]
 800db36:	685b      	ldreq	r3, [r3, #4]
 800db38:	6063      	str	r3, [r4, #4]
 800db3a:	bf04      	itt	eq
 800db3c:	1949      	addeq	r1, r1, r5
 800db3e:	6021      	streq	r1, [r4, #0]
 800db40:	6054      	str	r4, [r2, #4]
 800db42:	e7c7      	b.n	800dad4 <_free_r+0x28>
 800db44:	b003      	add	sp, #12
 800db46:	bd30      	pop	{r4, r5, pc}
 800db48:	20004fb4 	.word	0x20004fb4

0800db4c <_malloc_r>:
 800db4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4e:	1ccd      	adds	r5, r1, #3
 800db50:	f025 0503 	bic.w	r5, r5, #3
 800db54:	3508      	adds	r5, #8
 800db56:	2d0c      	cmp	r5, #12
 800db58:	bf38      	it	cc
 800db5a:	250c      	movcc	r5, #12
 800db5c:	2d00      	cmp	r5, #0
 800db5e:	4606      	mov	r6, r0
 800db60:	db01      	blt.n	800db66 <_malloc_r+0x1a>
 800db62:	42a9      	cmp	r1, r5
 800db64:	d903      	bls.n	800db6e <_malloc_r+0x22>
 800db66:	230c      	movs	r3, #12
 800db68:	6033      	str	r3, [r6, #0]
 800db6a:	2000      	movs	r0, #0
 800db6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db6e:	f000 fa0f 	bl	800df90 <__malloc_lock>
 800db72:	4921      	ldr	r1, [pc, #132]	; (800dbf8 <_malloc_r+0xac>)
 800db74:	680a      	ldr	r2, [r1, #0]
 800db76:	4614      	mov	r4, r2
 800db78:	b99c      	cbnz	r4, 800dba2 <_malloc_r+0x56>
 800db7a:	4f20      	ldr	r7, [pc, #128]	; (800dbfc <_malloc_r+0xb0>)
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	b923      	cbnz	r3, 800db8a <_malloc_r+0x3e>
 800db80:	4621      	mov	r1, r4
 800db82:	4630      	mov	r0, r6
 800db84:	f000 f998 	bl	800deb8 <_sbrk_r>
 800db88:	6038      	str	r0, [r7, #0]
 800db8a:	4629      	mov	r1, r5
 800db8c:	4630      	mov	r0, r6
 800db8e:	f000 f993 	bl	800deb8 <_sbrk_r>
 800db92:	1c43      	adds	r3, r0, #1
 800db94:	d123      	bne.n	800dbde <_malloc_r+0x92>
 800db96:	230c      	movs	r3, #12
 800db98:	6033      	str	r3, [r6, #0]
 800db9a:	4630      	mov	r0, r6
 800db9c:	f000 f9fe 	bl	800df9c <__malloc_unlock>
 800dba0:	e7e3      	b.n	800db6a <_malloc_r+0x1e>
 800dba2:	6823      	ldr	r3, [r4, #0]
 800dba4:	1b5b      	subs	r3, r3, r5
 800dba6:	d417      	bmi.n	800dbd8 <_malloc_r+0x8c>
 800dba8:	2b0b      	cmp	r3, #11
 800dbaa:	d903      	bls.n	800dbb4 <_malloc_r+0x68>
 800dbac:	6023      	str	r3, [r4, #0]
 800dbae:	441c      	add	r4, r3
 800dbb0:	6025      	str	r5, [r4, #0]
 800dbb2:	e004      	b.n	800dbbe <_malloc_r+0x72>
 800dbb4:	6863      	ldr	r3, [r4, #4]
 800dbb6:	42a2      	cmp	r2, r4
 800dbb8:	bf0c      	ite	eq
 800dbba:	600b      	streq	r3, [r1, #0]
 800dbbc:	6053      	strne	r3, [r2, #4]
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	f000 f9ec 	bl	800df9c <__malloc_unlock>
 800dbc4:	f104 000b 	add.w	r0, r4, #11
 800dbc8:	1d23      	adds	r3, r4, #4
 800dbca:	f020 0007 	bic.w	r0, r0, #7
 800dbce:	1ac2      	subs	r2, r0, r3
 800dbd0:	d0cc      	beq.n	800db6c <_malloc_r+0x20>
 800dbd2:	1a1b      	subs	r3, r3, r0
 800dbd4:	50a3      	str	r3, [r4, r2]
 800dbd6:	e7c9      	b.n	800db6c <_malloc_r+0x20>
 800dbd8:	4622      	mov	r2, r4
 800dbda:	6864      	ldr	r4, [r4, #4]
 800dbdc:	e7cc      	b.n	800db78 <_malloc_r+0x2c>
 800dbde:	1cc4      	adds	r4, r0, #3
 800dbe0:	f024 0403 	bic.w	r4, r4, #3
 800dbe4:	42a0      	cmp	r0, r4
 800dbe6:	d0e3      	beq.n	800dbb0 <_malloc_r+0x64>
 800dbe8:	1a21      	subs	r1, r4, r0
 800dbea:	4630      	mov	r0, r6
 800dbec:	f000 f964 	bl	800deb8 <_sbrk_r>
 800dbf0:	3001      	adds	r0, #1
 800dbf2:	d1dd      	bne.n	800dbb0 <_malloc_r+0x64>
 800dbf4:	e7cf      	b.n	800db96 <_malloc_r+0x4a>
 800dbf6:	bf00      	nop
 800dbf8:	20004fb4 	.word	0x20004fb4
 800dbfc:	20004fb8 	.word	0x20004fb8

0800dc00 <__ssputs_r>:
 800dc00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc04:	688e      	ldr	r6, [r1, #8]
 800dc06:	429e      	cmp	r6, r3
 800dc08:	4682      	mov	sl, r0
 800dc0a:	460c      	mov	r4, r1
 800dc0c:	4690      	mov	r8, r2
 800dc0e:	461f      	mov	r7, r3
 800dc10:	d838      	bhi.n	800dc84 <__ssputs_r+0x84>
 800dc12:	898a      	ldrh	r2, [r1, #12]
 800dc14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc18:	d032      	beq.n	800dc80 <__ssputs_r+0x80>
 800dc1a:	6825      	ldr	r5, [r4, #0]
 800dc1c:	6909      	ldr	r1, [r1, #16]
 800dc1e:	eba5 0901 	sub.w	r9, r5, r1
 800dc22:	6965      	ldr	r5, [r4, #20]
 800dc24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	444b      	add	r3, r9
 800dc30:	106d      	asrs	r5, r5, #1
 800dc32:	429d      	cmp	r5, r3
 800dc34:	bf38      	it	cc
 800dc36:	461d      	movcc	r5, r3
 800dc38:	0553      	lsls	r3, r2, #21
 800dc3a:	d531      	bpl.n	800dca0 <__ssputs_r+0xa0>
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	f7ff ff85 	bl	800db4c <_malloc_r>
 800dc42:	4606      	mov	r6, r0
 800dc44:	b950      	cbnz	r0, 800dc5c <__ssputs_r+0x5c>
 800dc46:	230c      	movs	r3, #12
 800dc48:	f8ca 3000 	str.w	r3, [sl]
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc52:	81a3      	strh	r3, [r4, #12]
 800dc54:	f04f 30ff 	mov.w	r0, #4294967295
 800dc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc5c:	6921      	ldr	r1, [r4, #16]
 800dc5e:	464a      	mov	r2, r9
 800dc60:	f7fe f872 	bl	800bd48 <memcpy>
 800dc64:	89a3      	ldrh	r3, [r4, #12]
 800dc66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc6e:	81a3      	strh	r3, [r4, #12]
 800dc70:	6126      	str	r6, [r4, #16]
 800dc72:	6165      	str	r5, [r4, #20]
 800dc74:	444e      	add	r6, r9
 800dc76:	eba5 0509 	sub.w	r5, r5, r9
 800dc7a:	6026      	str	r6, [r4, #0]
 800dc7c:	60a5      	str	r5, [r4, #8]
 800dc7e:	463e      	mov	r6, r7
 800dc80:	42be      	cmp	r6, r7
 800dc82:	d900      	bls.n	800dc86 <__ssputs_r+0x86>
 800dc84:	463e      	mov	r6, r7
 800dc86:	4632      	mov	r2, r6
 800dc88:	6820      	ldr	r0, [r4, #0]
 800dc8a:	4641      	mov	r1, r8
 800dc8c:	f000 f966 	bl	800df5c <memmove>
 800dc90:	68a3      	ldr	r3, [r4, #8]
 800dc92:	6822      	ldr	r2, [r4, #0]
 800dc94:	1b9b      	subs	r3, r3, r6
 800dc96:	4432      	add	r2, r6
 800dc98:	60a3      	str	r3, [r4, #8]
 800dc9a:	6022      	str	r2, [r4, #0]
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	e7db      	b.n	800dc58 <__ssputs_r+0x58>
 800dca0:	462a      	mov	r2, r5
 800dca2:	f000 f981 	bl	800dfa8 <_realloc_r>
 800dca6:	4606      	mov	r6, r0
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	d1e1      	bne.n	800dc70 <__ssputs_r+0x70>
 800dcac:	6921      	ldr	r1, [r4, #16]
 800dcae:	4650      	mov	r0, sl
 800dcb0:	f7ff fefc 	bl	800daac <_free_r>
 800dcb4:	e7c7      	b.n	800dc46 <__ssputs_r+0x46>
	...

0800dcb8 <_svfiprintf_r>:
 800dcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbc:	4698      	mov	r8, r3
 800dcbe:	898b      	ldrh	r3, [r1, #12]
 800dcc0:	061b      	lsls	r3, r3, #24
 800dcc2:	b09d      	sub	sp, #116	; 0x74
 800dcc4:	4607      	mov	r7, r0
 800dcc6:	460d      	mov	r5, r1
 800dcc8:	4614      	mov	r4, r2
 800dcca:	d50e      	bpl.n	800dcea <_svfiprintf_r+0x32>
 800dccc:	690b      	ldr	r3, [r1, #16]
 800dcce:	b963      	cbnz	r3, 800dcea <_svfiprintf_r+0x32>
 800dcd0:	2140      	movs	r1, #64	; 0x40
 800dcd2:	f7ff ff3b 	bl	800db4c <_malloc_r>
 800dcd6:	6028      	str	r0, [r5, #0]
 800dcd8:	6128      	str	r0, [r5, #16]
 800dcda:	b920      	cbnz	r0, 800dce6 <_svfiprintf_r+0x2e>
 800dcdc:	230c      	movs	r3, #12
 800dcde:	603b      	str	r3, [r7, #0]
 800dce0:	f04f 30ff 	mov.w	r0, #4294967295
 800dce4:	e0d1      	b.n	800de8a <_svfiprintf_r+0x1d2>
 800dce6:	2340      	movs	r3, #64	; 0x40
 800dce8:	616b      	str	r3, [r5, #20]
 800dcea:	2300      	movs	r3, #0
 800dcec:	9309      	str	r3, [sp, #36]	; 0x24
 800dcee:	2320      	movs	r3, #32
 800dcf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcf8:	2330      	movs	r3, #48	; 0x30
 800dcfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dea4 <_svfiprintf_r+0x1ec>
 800dcfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd02:	f04f 0901 	mov.w	r9, #1
 800dd06:	4623      	mov	r3, r4
 800dd08:	469a      	mov	sl, r3
 800dd0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd0e:	b10a      	cbz	r2, 800dd14 <_svfiprintf_r+0x5c>
 800dd10:	2a25      	cmp	r2, #37	; 0x25
 800dd12:	d1f9      	bne.n	800dd08 <_svfiprintf_r+0x50>
 800dd14:	ebba 0b04 	subs.w	fp, sl, r4
 800dd18:	d00b      	beq.n	800dd32 <_svfiprintf_r+0x7a>
 800dd1a:	465b      	mov	r3, fp
 800dd1c:	4622      	mov	r2, r4
 800dd1e:	4629      	mov	r1, r5
 800dd20:	4638      	mov	r0, r7
 800dd22:	f7ff ff6d 	bl	800dc00 <__ssputs_r>
 800dd26:	3001      	adds	r0, #1
 800dd28:	f000 80aa 	beq.w	800de80 <_svfiprintf_r+0x1c8>
 800dd2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd2e:	445a      	add	r2, fp
 800dd30:	9209      	str	r2, [sp, #36]	; 0x24
 800dd32:	f89a 3000 	ldrb.w	r3, [sl]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f000 80a2 	beq.w	800de80 <_svfiprintf_r+0x1c8>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd46:	f10a 0a01 	add.w	sl, sl, #1
 800dd4a:	9304      	str	r3, [sp, #16]
 800dd4c:	9307      	str	r3, [sp, #28]
 800dd4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd52:	931a      	str	r3, [sp, #104]	; 0x68
 800dd54:	4654      	mov	r4, sl
 800dd56:	2205      	movs	r2, #5
 800dd58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd5c:	4851      	ldr	r0, [pc, #324]	; (800dea4 <_svfiprintf_r+0x1ec>)
 800dd5e:	f7f2 fa67 	bl	8000230 <memchr>
 800dd62:	9a04      	ldr	r2, [sp, #16]
 800dd64:	b9d8      	cbnz	r0, 800dd9e <_svfiprintf_r+0xe6>
 800dd66:	06d0      	lsls	r0, r2, #27
 800dd68:	bf44      	itt	mi
 800dd6a:	2320      	movmi	r3, #32
 800dd6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd70:	0711      	lsls	r1, r2, #28
 800dd72:	bf44      	itt	mi
 800dd74:	232b      	movmi	r3, #43	; 0x2b
 800dd76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd7a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd7e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd80:	d015      	beq.n	800ddae <_svfiprintf_r+0xf6>
 800dd82:	9a07      	ldr	r2, [sp, #28]
 800dd84:	4654      	mov	r4, sl
 800dd86:	2000      	movs	r0, #0
 800dd88:	f04f 0c0a 	mov.w	ip, #10
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd92:	3b30      	subs	r3, #48	; 0x30
 800dd94:	2b09      	cmp	r3, #9
 800dd96:	d94e      	bls.n	800de36 <_svfiprintf_r+0x17e>
 800dd98:	b1b0      	cbz	r0, 800ddc8 <_svfiprintf_r+0x110>
 800dd9a:	9207      	str	r2, [sp, #28]
 800dd9c:	e014      	b.n	800ddc8 <_svfiprintf_r+0x110>
 800dd9e:	eba0 0308 	sub.w	r3, r0, r8
 800dda2:	fa09 f303 	lsl.w	r3, r9, r3
 800dda6:	4313      	orrs	r3, r2
 800dda8:	9304      	str	r3, [sp, #16]
 800ddaa:	46a2      	mov	sl, r4
 800ddac:	e7d2      	b.n	800dd54 <_svfiprintf_r+0x9c>
 800ddae:	9b03      	ldr	r3, [sp, #12]
 800ddb0:	1d19      	adds	r1, r3, #4
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	9103      	str	r1, [sp, #12]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	bfbb      	ittet	lt
 800ddba:	425b      	neglt	r3, r3
 800ddbc:	f042 0202 	orrlt.w	r2, r2, #2
 800ddc0:	9307      	strge	r3, [sp, #28]
 800ddc2:	9307      	strlt	r3, [sp, #28]
 800ddc4:	bfb8      	it	lt
 800ddc6:	9204      	strlt	r2, [sp, #16]
 800ddc8:	7823      	ldrb	r3, [r4, #0]
 800ddca:	2b2e      	cmp	r3, #46	; 0x2e
 800ddcc:	d10c      	bne.n	800dde8 <_svfiprintf_r+0x130>
 800ddce:	7863      	ldrb	r3, [r4, #1]
 800ddd0:	2b2a      	cmp	r3, #42	; 0x2a
 800ddd2:	d135      	bne.n	800de40 <_svfiprintf_r+0x188>
 800ddd4:	9b03      	ldr	r3, [sp, #12]
 800ddd6:	1d1a      	adds	r2, r3, #4
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	9203      	str	r2, [sp, #12]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	bfb8      	it	lt
 800dde0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dde4:	3402      	adds	r4, #2
 800dde6:	9305      	str	r3, [sp, #20]
 800dde8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800deb4 <_svfiprintf_r+0x1fc>
 800ddec:	7821      	ldrb	r1, [r4, #0]
 800ddee:	2203      	movs	r2, #3
 800ddf0:	4650      	mov	r0, sl
 800ddf2:	f7f2 fa1d 	bl	8000230 <memchr>
 800ddf6:	b140      	cbz	r0, 800de0a <_svfiprintf_r+0x152>
 800ddf8:	2340      	movs	r3, #64	; 0x40
 800ddfa:	eba0 000a 	sub.w	r0, r0, sl
 800ddfe:	fa03 f000 	lsl.w	r0, r3, r0
 800de02:	9b04      	ldr	r3, [sp, #16]
 800de04:	4303      	orrs	r3, r0
 800de06:	3401      	adds	r4, #1
 800de08:	9304      	str	r3, [sp, #16]
 800de0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de0e:	4826      	ldr	r0, [pc, #152]	; (800dea8 <_svfiprintf_r+0x1f0>)
 800de10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de14:	2206      	movs	r2, #6
 800de16:	f7f2 fa0b 	bl	8000230 <memchr>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d038      	beq.n	800de90 <_svfiprintf_r+0x1d8>
 800de1e:	4b23      	ldr	r3, [pc, #140]	; (800deac <_svfiprintf_r+0x1f4>)
 800de20:	bb1b      	cbnz	r3, 800de6a <_svfiprintf_r+0x1b2>
 800de22:	9b03      	ldr	r3, [sp, #12]
 800de24:	3307      	adds	r3, #7
 800de26:	f023 0307 	bic.w	r3, r3, #7
 800de2a:	3308      	adds	r3, #8
 800de2c:	9303      	str	r3, [sp, #12]
 800de2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de30:	4433      	add	r3, r6
 800de32:	9309      	str	r3, [sp, #36]	; 0x24
 800de34:	e767      	b.n	800dd06 <_svfiprintf_r+0x4e>
 800de36:	fb0c 3202 	mla	r2, ip, r2, r3
 800de3a:	460c      	mov	r4, r1
 800de3c:	2001      	movs	r0, #1
 800de3e:	e7a5      	b.n	800dd8c <_svfiprintf_r+0xd4>
 800de40:	2300      	movs	r3, #0
 800de42:	3401      	adds	r4, #1
 800de44:	9305      	str	r3, [sp, #20]
 800de46:	4619      	mov	r1, r3
 800de48:	f04f 0c0a 	mov.w	ip, #10
 800de4c:	4620      	mov	r0, r4
 800de4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de52:	3a30      	subs	r2, #48	; 0x30
 800de54:	2a09      	cmp	r2, #9
 800de56:	d903      	bls.n	800de60 <_svfiprintf_r+0x1a8>
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d0c5      	beq.n	800dde8 <_svfiprintf_r+0x130>
 800de5c:	9105      	str	r1, [sp, #20]
 800de5e:	e7c3      	b.n	800dde8 <_svfiprintf_r+0x130>
 800de60:	fb0c 2101 	mla	r1, ip, r1, r2
 800de64:	4604      	mov	r4, r0
 800de66:	2301      	movs	r3, #1
 800de68:	e7f0      	b.n	800de4c <_svfiprintf_r+0x194>
 800de6a:	ab03      	add	r3, sp, #12
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	462a      	mov	r2, r5
 800de70:	4b0f      	ldr	r3, [pc, #60]	; (800deb0 <_svfiprintf_r+0x1f8>)
 800de72:	a904      	add	r1, sp, #16
 800de74:	4638      	mov	r0, r7
 800de76:	f7fe f81d 	bl	800beb4 <_printf_float>
 800de7a:	1c42      	adds	r2, r0, #1
 800de7c:	4606      	mov	r6, r0
 800de7e:	d1d6      	bne.n	800de2e <_svfiprintf_r+0x176>
 800de80:	89ab      	ldrh	r3, [r5, #12]
 800de82:	065b      	lsls	r3, r3, #25
 800de84:	f53f af2c 	bmi.w	800dce0 <_svfiprintf_r+0x28>
 800de88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de8a:	b01d      	add	sp, #116	; 0x74
 800de8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de90:	ab03      	add	r3, sp, #12
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	462a      	mov	r2, r5
 800de96:	4b06      	ldr	r3, [pc, #24]	; (800deb0 <_svfiprintf_r+0x1f8>)
 800de98:	a904      	add	r1, sp, #16
 800de9a:	4638      	mov	r0, r7
 800de9c:	f7fe faae 	bl	800c3fc <_printf_i>
 800dea0:	e7eb      	b.n	800de7a <_svfiprintf_r+0x1c2>
 800dea2:	bf00      	nop
 800dea4:	080102b4 	.word	0x080102b4
 800dea8:	080102be 	.word	0x080102be
 800deac:	0800beb5 	.word	0x0800beb5
 800deb0:	0800dc01 	.word	0x0800dc01
 800deb4:	080102ba 	.word	0x080102ba

0800deb8 <_sbrk_r>:
 800deb8:	b538      	push	{r3, r4, r5, lr}
 800deba:	4d06      	ldr	r5, [pc, #24]	; (800ded4 <_sbrk_r+0x1c>)
 800debc:	2300      	movs	r3, #0
 800debe:	4604      	mov	r4, r0
 800dec0:	4608      	mov	r0, r1
 800dec2:	602b      	str	r3, [r5, #0]
 800dec4:	f7f3 fde4 	bl	8001a90 <_sbrk>
 800dec8:	1c43      	adds	r3, r0, #1
 800deca:	d102      	bne.n	800ded2 <_sbrk_r+0x1a>
 800decc:	682b      	ldr	r3, [r5, #0]
 800dece:	b103      	cbz	r3, 800ded2 <_sbrk_r+0x1a>
 800ded0:	6023      	str	r3, [r4, #0]
 800ded2:	bd38      	pop	{r3, r4, r5, pc}
 800ded4:	20005290 	.word	0x20005290

0800ded8 <__assert_func>:
 800ded8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800deda:	4614      	mov	r4, r2
 800dedc:	461a      	mov	r2, r3
 800dede:	4b09      	ldr	r3, [pc, #36]	; (800df04 <__assert_func+0x2c>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4605      	mov	r5, r0
 800dee4:	68d8      	ldr	r0, [r3, #12]
 800dee6:	b14c      	cbz	r4, 800defc <__assert_func+0x24>
 800dee8:	4b07      	ldr	r3, [pc, #28]	; (800df08 <__assert_func+0x30>)
 800deea:	9100      	str	r1, [sp, #0]
 800deec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800def0:	4906      	ldr	r1, [pc, #24]	; (800df0c <__assert_func+0x34>)
 800def2:	462b      	mov	r3, r5
 800def4:	f000 f80e 	bl	800df14 <fiprintf>
 800def8:	f000 faa4 	bl	800e444 <abort>
 800defc:	4b04      	ldr	r3, [pc, #16]	; (800df10 <__assert_func+0x38>)
 800defe:	461c      	mov	r4, r3
 800df00:	e7f3      	b.n	800deea <__assert_func+0x12>
 800df02:	bf00      	nop
 800df04:	20000034 	.word	0x20000034
 800df08:	080102c5 	.word	0x080102c5
 800df0c:	080102d2 	.word	0x080102d2
 800df10:	08010300 	.word	0x08010300

0800df14 <fiprintf>:
 800df14:	b40e      	push	{r1, r2, r3}
 800df16:	b503      	push	{r0, r1, lr}
 800df18:	4601      	mov	r1, r0
 800df1a:	ab03      	add	r3, sp, #12
 800df1c:	4805      	ldr	r0, [pc, #20]	; (800df34 <fiprintf+0x20>)
 800df1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800df22:	6800      	ldr	r0, [r0, #0]
 800df24:	9301      	str	r3, [sp, #4]
 800df26:	f000 f88f 	bl	800e048 <_vfiprintf_r>
 800df2a:	b002      	add	sp, #8
 800df2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800df30:	b003      	add	sp, #12
 800df32:	4770      	bx	lr
 800df34:	20000034 	.word	0x20000034

0800df38 <__ascii_mbtowc>:
 800df38:	b082      	sub	sp, #8
 800df3a:	b901      	cbnz	r1, 800df3e <__ascii_mbtowc+0x6>
 800df3c:	a901      	add	r1, sp, #4
 800df3e:	b142      	cbz	r2, 800df52 <__ascii_mbtowc+0x1a>
 800df40:	b14b      	cbz	r3, 800df56 <__ascii_mbtowc+0x1e>
 800df42:	7813      	ldrb	r3, [r2, #0]
 800df44:	600b      	str	r3, [r1, #0]
 800df46:	7812      	ldrb	r2, [r2, #0]
 800df48:	1e10      	subs	r0, r2, #0
 800df4a:	bf18      	it	ne
 800df4c:	2001      	movne	r0, #1
 800df4e:	b002      	add	sp, #8
 800df50:	4770      	bx	lr
 800df52:	4610      	mov	r0, r2
 800df54:	e7fb      	b.n	800df4e <__ascii_mbtowc+0x16>
 800df56:	f06f 0001 	mvn.w	r0, #1
 800df5a:	e7f8      	b.n	800df4e <__ascii_mbtowc+0x16>

0800df5c <memmove>:
 800df5c:	4288      	cmp	r0, r1
 800df5e:	b510      	push	{r4, lr}
 800df60:	eb01 0402 	add.w	r4, r1, r2
 800df64:	d902      	bls.n	800df6c <memmove+0x10>
 800df66:	4284      	cmp	r4, r0
 800df68:	4623      	mov	r3, r4
 800df6a:	d807      	bhi.n	800df7c <memmove+0x20>
 800df6c:	1e43      	subs	r3, r0, #1
 800df6e:	42a1      	cmp	r1, r4
 800df70:	d008      	beq.n	800df84 <memmove+0x28>
 800df72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df7a:	e7f8      	b.n	800df6e <memmove+0x12>
 800df7c:	4402      	add	r2, r0
 800df7e:	4601      	mov	r1, r0
 800df80:	428a      	cmp	r2, r1
 800df82:	d100      	bne.n	800df86 <memmove+0x2a>
 800df84:	bd10      	pop	{r4, pc}
 800df86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df8e:	e7f7      	b.n	800df80 <memmove+0x24>

0800df90 <__malloc_lock>:
 800df90:	4801      	ldr	r0, [pc, #4]	; (800df98 <__malloc_lock+0x8>)
 800df92:	f000 bc17 	b.w	800e7c4 <__retarget_lock_acquire_recursive>
 800df96:	bf00      	nop
 800df98:	20005298 	.word	0x20005298

0800df9c <__malloc_unlock>:
 800df9c:	4801      	ldr	r0, [pc, #4]	; (800dfa4 <__malloc_unlock+0x8>)
 800df9e:	f000 bc12 	b.w	800e7c6 <__retarget_lock_release_recursive>
 800dfa2:	bf00      	nop
 800dfa4:	20005298 	.word	0x20005298

0800dfa8 <_realloc_r>:
 800dfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfaa:	4607      	mov	r7, r0
 800dfac:	4614      	mov	r4, r2
 800dfae:	460e      	mov	r6, r1
 800dfb0:	b921      	cbnz	r1, 800dfbc <_realloc_r+0x14>
 800dfb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dfb6:	4611      	mov	r1, r2
 800dfb8:	f7ff bdc8 	b.w	800db4c <_malloc_r>
 800dfbc:	b922      	cbnz	r2, 800dfc8 <_realloc_r+0x20>
 800dfbe:	f7ff fd75 	bl	800daac <_free_r>
 800dfc2:	4625      	mov	r5, r4
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfc8:	f000 fc62 	bl	800e890 <_malloc_usable_size_r>
 800dfcc:	42a0      	cmp	r0, r4
 800dfce:	d20f      	bcs.n	800dff0 <_realloc_r+0x48>
 800dfd0:	4621      	mov	r1, r4
 800dfd2:	4638      	mov	r0, r7
 800dfd4:	f7ff fdba 	bl	800db4c <_malloc_r>
 800dfd8:	4605      	mov	r5, r0
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	d0f2      	beq.n	800dfc4 <_realloc_r+0x1c>
 800dfde:	4631      	mov	r1, r6
 800dfe0:	4622      	mov	r2, r4
 800dfe2:	f7fd feb1 	bl	800bd48 <memcpy>
 800dfe6:	4631      	mov	r1, r6
 800dfe8:	4638      	mov	r0, r7
 800dfea:	f7ff fd5f 	bl	800daac <_free_r>
 800dfee:	e7e9      	b.n	800dfc4 <_realloc_r+0x1c>
 800dff0:	4635      	mov	r5, r6
 800dff2:	e7e7      	b.n	800dfc4 <_realloc_r+0x1c>

0800dff4 <__sfputc_r>:
 800dff4:	6893      	ldr	r3, [r2, #8]
 800dff6:	3b01      	subs	r3, #1
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	b410      	push	{r4}
 800dffc:	6093      	str	r3, [r2, #8]
 800dffe:	da08      	bge.n	800e012 <__sfputc_r+0x1e>
 800e000:	6994      	ldr	r4, [r2, #24]
 800e002:	42a3      	cmp	r3, r4
 800e004:	db01      	blt.n	800e00a <__sfputc_r+0x16>
 800e006:	290a      	cmp	r1, #10
 800e008:	d103      	bne.n	800e012 <__sfputc_r+0x1e>
 800e00a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e00e:	f000 b94b 	b.w	800e2a8 <__swbuf_r>
 800e012:	6813      	ldr	r3, [r2, #0]
 800e014:	1c58      	adds	r0, r3, #1
 800e016:	6010      	str	r0, [r2, #0]
 800e018:	7019      	strb	r1, [r3, #0]
 800e01a:	4608      	mov	r0, r1
 800e01c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e020:	4770      	bx	lr

0800e022 <__sfputs_r>:
 800e022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e024:	4606      	mov	r6, r0
 800e026:	460f      	mov	r7, r1
 800e028:	4614      	mov	r4, r2
 800e02a:	18d5      	adds	r5, r2, r3
 800e02c:	42ac      	cmp	r4, r5
 800e02e:	d101      	bne.n	800e034 <__sfputs_r+0x12>
 800e030:	2000      	movs	r0, #0
 800e032:	e007      	b.n	800e044 <__sfputs_r+0x22>
 800e034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e038:	463a      	mov	r2, r7
 800e03a:	4630      	mov	r0, r6
 800e03c:	f7ff ffda 	bl	800dff4 <__sfputc_r>
 800e040:	1c43      	adds	r3, r0, #1
 800e042:	d1f3      	bne.n	800e02c <__sfputs_r+0xa>
 800e044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e048 <_vfiprintf_r>:
 800e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04c:	460d      	mov	r5, r1
 800e04e:	b09d      	sub	sp, #116	; 0x74
 800e050:	4614      	mov	r4, r2
 800e052:	4698      	mov	r8, r3
 800e054:	4606      	mov	r6, r0
 800e056:	b118      	cbz	r0, 800e060 <_vfiprintf_r+0x18>
 800e058:	6983      	ldr	r3, [r0, #24]
 800e05a:	b90b      	cbnz	r3, 800e060 <_vfiprintf_r+0x18>
 800e05c:	f000 fb14 	bl	800e688 <__sinit>
 800e060:	4b89      	ldr	r3, [pc, #548]	; (800e288 <_vfiprintf_r+0x240>)
 800e062:	429d      	cmp	r5, r3
 800e064:	d11b      	bne.n	800e09e <_vfiprintf_r+0x56>
 800e066:	6875      	ldr	r5, [r6, #4]
 800e068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e06a:	07d9      	lsls	r1, r3, #31
 800e06c:	d405      	bmi.n	800e07a <_vfiprintf_r+0x32>
 800e06e:	89ab      	ldrh	r3, [r5, #12]
 800e070:	059a      	lsls	r2, r3, #22
 800e072:	d402      	bmi.n	800e07a <_vfiprintf_r+0x32>
 800e074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e076:	f000 fba5 	bl	800e7c4 <__retarget_lock_acquire_recursive>
 800e07a:	89ab      	ldrh	r3, [r5, #12]
 800e07c:	071b      	lsls	r3, r3, #28
 800e07e:	d501      	bpl.n	800e084 <_vfiprintf_r+0x3c>
 800e080:	692b      	ldr	r3, [r5, #16]
 800e082:	b9eb      	cbnz	r3, 800e0c0 <_vfiprintf_r+0x78>
 800e084:	4629      	mov	r1, r5
 800e086:	4630      	mov	r0, r6
 800e088:	f000 f96e 	bl	800e368 <__swsetup_r>
 800e08c:	b1c0      	cbz	r0, 800e0c0 <_vfiprintf_r+0x78>
 800e08e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e090:	07dc      	lsls	r4, r3, #31
 800e092:	d50e      	bpl.n	800e0b2 <_vfiprintf_r+0x6a>
 800e094:	f04f 30ff 	mov.w	r0, #4294967295
 800e098:	b01d      	add	sp, #116	; 0x74
 800e09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e09e:	4b7b      	ldr	r3, [pc, #492]	; (800e28c <_vfiprintf_r+0x244>)
 800e0a0:	429d      	cmp	r5, r3
 800e0a2:	d101      	bne.n	800e0a8 <_vfiprintf_r+0x60>
 800e0a4:	68b5      	ldr	r5, [r6, #8]
 800e0a6:	e7df      	b.n	800e068 <_vfiprintf_r+0x20>
 800e0a8:	4b79      	ldr	r3, [pc, #484]	; (800e290 <_vfiprintf_r+0x248>)
 800e0aa:	429d      	cmp	r5, r3
 800e0ac:	bf08      	it	eq
 800e0ae:	68f5      	ldreq	r5, [r6, #12]
 800e0b0:	e7da      	b.n	800e068 <_vfiprintf_r+0x20>
 800e0b2:	89ab      	ldrh	r3, [r5, #12]
 800e0b4:	0598      	lsls	r0, r3, #22
 800e0b6:	d4ed      	bmi.n	800e094 <_vfiprintf_r+0x4c>
 800e0b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0ba:	f000 fb84 	bl	800e7c6 <__retarget_lock_release_recursive>
 800e0be:	e7e9      	b.n	800e094 <_vfiprintf_r+0x4c>
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0c4:	2320      	movs	r3, #32
 800e0c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0ce:	2330      	movs	r3, #48	; 0x30
 800e0d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e294 <_vfiprintf_r+0x24c>
 800e0d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0d8:	f04f 0901 	mov.w	r9, #1
 800e0dc:	4623      	mov	r3, r4
 800e0de:	469a      	mov	sl, r3
 800e0e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0e4:	b10a      	cbz	r2, 800e0ea <_vfiprintf_r+0xa2>
 800e0e6:	2a25      	cmp	r2, #37	; 0x25
 800e0e8:	d1f9      	bne.n	800e0de <_vfiprintf_r+0x96>
 800e0ea:	ebba 0b04 	subs.w	fp, sl, r4
 800e0ee:	d00b      	beq.n	800e108 <_vfiprintf_r+0xc0>
 800e0f0:	465b      	mov	r3, fp
 800e0f2:	4622      	mov	r2, r4
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	f7ff ff93 	bl	800e022 <__sfputs_r>
 800e0fc:	3001      	adds	r0, #1
 800e0fe:	f000 80aa 	beq.w	800e256 <_vfiprintf_r+0x20e>
 800e102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e104:	445a      	add	r2, fp
 800e106:	9209      	str	r2, [sp, #36]	; 0x24
 800e108:	f89a 3000 	ldrb.w	r3, [sl]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f000 80a2 	beq.w	800e256 <_vfiprintf_r+0x20e>
 800e112:	2300      	movs	r3, #0
 800e114:	f04f 32ff 	mov.w	r2, #4294967295
 800e118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e11c:	f10a 0a01 	add.w	sl, sl, #1
 800e120:	9304      	str	r3, [sp, #16]
 800e122:	9307      	str	r3, [sp, #28]
 800e124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e128:	931a      	str	r3, [sp, #104]	; 0x68
 800e12a:	4654      	mov	r4, sl
 800e12c:	2205      	movs	r2, #5
 800e12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e132:	4858      	ldr	r0, [pc, #352]	; (800e294 <_vfiprintf_r+0x24c>)
 800e134:	f7f2 f87c 	bl	8000230 <memchr>
 800e138:	9a04      	ldr	r2, [sp, #16]
 800e13a:	b9d8      	cbnz	r0, 800e174 <_vfiprintf_r+0x12c>
 800e13c:	06d1      	lsls	r1, r2, #27
 800e13e:	bf44      	itt	mi
 800e140:	2320      	movmi	r3, #32
 800e142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e146:	0713      	lsls	r3, r2, #28
 800e148:	bf44      	itt	mi
 800e14a:	232b      	movmi	r3, #43	; 0x2b
 800e14c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e150:	f89a 3000 	ldrb.w	r3, [sl]
 800e154:	2b2a      	cmp	r3, #42	; 0x2a
 800e156:	d015      	beq.n	800e184 <_vfiprintf_r+0x13c>
 800e158:	9a07      	ldr	r2, [sp, #28]
 800e15a:	4654      	mov	r4, sl
 800e15c:	2000      	movs	r0, #0
 800e15e:	f04f 0c0a 	mov.w	ip, #10
 800e162:	4621      	mov	r1, r4
 800e164:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e168:	3b30      	subs	r3, #48	; 0x30
 800e16a:	2b09      	cmp	r3, #9
 800e16c:	d94e      	bls.n	800e20c <_vfiprintf_r+0x1c4>
 800e16e:	b1b0      	cbz	r0, 800e19e <_vfiprintf_r+0x156>
 800e170:	9207      	str	r2, [sp, #28]
 800e172:	e014      	b.n	800e19e <_vfiprintf_r+0x156>
 800e174:	eba0 0308 	sub.w	r3, r0, r8
 800e178:	fa09 f303 	lsl.w	r3, r9, r3
 800e17c:	4313      	orrs	r3, r2
 800e17e:	9304      	str	r3, [sp, #16]
 800e180:	46a2      	mov	sl, r4
 800e182:	e7d2      	b.n	800e12a <_vfiprintf_r+0xe2>
 800e184:	9b03      	ldr	r3, [sp, #12]
 800e186:	1d19      	adds	r1, r3, #4
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	9103      	str	r1, [sp, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	bfbb      	ittet	lt
 800e190:	425b      	neglt	r3, r3
 800e192:	f042 0202 	orrlt.w	r2, r2, #2
 800e196:	9307      	strge	r3, [sp, #28]
 800e198:	9307      	strlt	r3, [sp, #28]
 800e19a:	bfb8      	it	lt
 800e19c:	9204      	strlt	r2, [sp, #16]
 800e19e:	7823      	ldrb	r3, [r4, #0]
 800e1a0:	2b2e      	cmp	r3, #46	; 0x2e
 800e1a2:	d10c      	bne.n	800e1be <_vfiprintf_r+0x176>
 800e1a4:	7863      	ldrb	r3, [r4, #1]
 800e1a6:	2b2a      	cmp	r3, #42	; 0x2a
 800e1a8:	d135      	bne.n	800e216 <_vfiprintf_r+0x1ce>
 800e1aa:	9b03      	ldr	r3, [sp, #12]
 800e1ac:	1d1a      	adds	r2, r3, #4
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	9203      	str	r2, [sp, #12]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	bfb8      	it	lt
 800e1b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1ba:	3402      	adds	r4, #2
 800e1bc:	9305      	str	r3, [sp, #20]
 800e1be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e2a4 <_vfiprintf_r+0x25c>
 800e1c2:	7821      	ldrb	r1, [r4, #0]
 800e1c4:	2203      	movs	r2, #3
 800e1c6:	4650      	mov	r0, sl
 800e1c8:	f7f2 f832 	bl	8000230 <memchr>
 800e1cc:	b140      	cbz	r0, 800e1e0 <_vfiprintf_r+0x198>
 800e1ce:	2340      	movs	r3, #64	; 0x40
 800e1d0:	eba0 000a 	sub.w	r0, r0, sl
 800e1d4:	fa03 f000 	lsl.w	r0, r3, r0
 800e1d8:	9b04      	ldr	r3, [sp, #16]
 800e1da:	4303      	orrs	r3, r0
 800e1dc:	3401      	adds	r4, #1
 800e1de:	9304      	str	r3, [sp, #16]
 800e1e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1e4:	482c      	ldr	r0, [pc, #176]	; (800e298 <_vfiprintf_r+0x250>)
 800e1e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1ea:	2206      	movs	r2, #6
 800e1ec:	f7f2 f820 	bl	8000230 <memchr>
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	d03f      	beq.n	800e274 <_vfiprintf_r+0x22c>
 800e1f4:	4b29      	ldr	r3, [pc, #164]	; (800e29c <_vfiprintf_r+0x254>)
 800e1f6:	bb1b      	cbnz	r3, 800e240 <_vfiprintf_r+0x1f8>
 800e1f8:	9b03      	ldr	r3, [sp, #12]
 800e1fa:	3307      	adds	r3, #7
 800e1fc:	f023 0307 	bic.w	r3, r3, #7
 800e200:	3308      	adds	r3, #8
 800e202:	9303      	str	r3, [sp, #12]
 800e204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e206:	443b      	add	r3, r7
 800e208:	9309      	str	r3, [sp, #36]	; 0x24
 800e20a:	e767      	b.n	800e0dc <_vfiprintf_r+0x94>
 800e20c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e210:	460c      	mov	r4, r1
 800e212:	2001      	movs	r0, #1
 800e214:	e7a5      	b.n	800e162 <_vfiprintf_r+0x11a>
 800e216:	2300      	movs	r3, #0
 800e218:	3401      	adds	r4, #1
 800e21a:	9305      	str	r3, [sp, #20]
 800e21c:	4619      	mov	r1, r3
 800e21e:	f04f 0c0a 	mov.w	ip, #10
 800e222:	4620      	mov	r0, r4
 800e224:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e228:	3a30      	subs	r2, #48	; 0x30
 800e22a:	2a09      	cmp	r2, #9
 800e22c:	d903      	bls.n	800e236 <_vfiprintf_r+0x1ee>
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d0c5      	beq.n	800e1be <_vfiprintf_r+0x176>
 800e232:	9105      	str	r1, [sp, #20]
 800e234:	e7c3      	b.n	800e1be <_vfiprintf_r+0x176>
 800e236:	fb0c 2101 	mla	r1, ip, r1, r2
 800e23a:	4604      	mov	r4, r0
 800e23c:	2301      	movs	r3, #1
 800e23e:	e7f0      	b.n	800e222 <_vfiprintf_r+0x1da>
 800e240:	ab03      	add	r3, sp, #12
 800e242:	9300      	str	r3, [sp, #0]
 800e244:	462a      	mov	r2, r5
 800e246:	4b16      	ldr	r3, [pc, #88]	; (800e2a0 <_vfiprintf_r+0x258>)
 800e248:	a904      	add	r1, sp, #16
 800e24a:	4630      	mov	r0, r6
 800e24c:	f7fd fe32 	bl	800beb4 <_printf_float>
 800e250:	4607      	mov	r7, r0
 800e252:	1c78      	adds	r0, r7, #1
 800e254:	d1d6      	bne.n	800e204 <_vfiprintf_r+0x1bc>
 800e256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e258:	07d9      	lsls	r1, r3, #31
 800e25a:	d405      	bmi.n	800e268 <_vfiprintf_r+0x220>
 800e25c:	89ab      	ldrh	r3, [r5, #12]
 800e25e:	059a      	lsls	r2, r3, #22
 800e260:	d402      	bmi.n	800e268 <_vfiprintf_r+0x220>
 800e262:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e264:	f000 faaf 	bl	800e7c6 <__retarget_lock_release_recursive>
 800e268:	89ab      	ldrh	r3, [r5, #12]
 800e26a:	065b      	lsls	r3, r3, #25
 800e26c:	f53f af12 	bmi.w	800e094 <_vfiprintf_r+0x4c>
 800e270:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e272:	e711      	b.n	800e098 <_vfiprintf_r+0x50>
 800e274:	ab03      	add	r3, sp, #12
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	462a      	mov	r2, r5
 800e27a:	4b09      	ldr	r3, [pc, #36]	; (800e2a0 <_vfiprintf_r+0x258>)
 800e27c:	a904      	add	r1, sp, #16
 800e27e:	4630      	mov	r0, r6
 800e280:	f7fe f8bc 	bl	800c3fc <_printf_i>
 800e284:	e7e4      	b.n	800e250 <_vfiprintf_r+0x208>
 800e286:	bf00      	nop
 800e288:	0801042c 	.word	0x0801042c
 800e28c:	0801044c 	.word	0x0801044c
 800e290:	0801040c 	.word	0x0801040c
 800e294:	080102b4 	.word	0x080102b4
 800e298:	080102be 	.word	0x080102be
 800e29c:	0800beb5 	.word	0x0800beb5
 800e2a0:	0800e023 	.word	0x0800e023
 800e2a4:	080102ba 	.word	0x080102ba

0800e2a8 <__swbuf_r>:
 800e2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2aa:	460e      	mov	r6, r1
 800e2ac:	4614      	mov	r4, r2
 800e2ae:	4605      	mov	r5, r0
 800e2b0:	b118      	cbz	r0, 800e2ba <__swbuf_r+0x12>
 800e2b2:	6983      	ldr	r3, [r0, #24]
 800e2b4:	b90b      	cbnz	r3, 800e2ba <__swbuf_r+0x12>
 800e2b6:	f000 f9e7 	bl	800e688 <__sinit>
 800e2ba:	4b21      	ldr	r3, [pc, #132]	; (800e340 <__swbuf_r+0x98>)
 800e2bc:	429c      	cmp	r4, r3
 800e2be:	d12b      	bne.n	800e318 <__swbuf_r+0x70>
 800e2c0:	686c      	ldr	r4, [r5, #4]
 800e2c2:	69a3      	ldr	r3, [r4, #24]
 800e2c4:	60a3      	str	r3, [r4, #8]
 800e2c6:	89a3      	ldrh	r3, [r4, #12]
 800e2c8:	071a      	lsls	r2, r3, #28
 800e2ca:	d52f      	bpl.n	800e32c <__swbuf_r+0x84>
 800e2cc:	6923      	ldr	r3, [r4, #16]
 800e2ce:	b36b      	cbz	r3, 800e32c <__swbuf_r+0x84>
 800e2d0:	6923      	ldr	r3, [r4, #16]
 800e2d2:	6820      	ldr	r0, [r4, #0]
 800e2d4:	1ac0      	subs	r0, r0, r3
 800e2d6:	6963      	ldr	r3, [r4, #20]
 800e2d8:	b2f6      	uxtb	r6, r6
 800e2da:	4283      	cmp	r3, r0
 800e2dc:	4637      	mov	r7, r6
 800e2de:	dc04      	bgt.n	800e2ea <__swbuf_r+0x42>
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f000 f93c 	bl	800e560 <_fflush_r>
 800e2e8:	bb30      	cbnz	r0, 800e338 <__swbuf_r+0x90>
 800e2ea:	68a3      	ldr	r3, [r4, #8]
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	60a3      	str	r3, [r4, #8]
 800e2f0:	6823      	ldr	r3, [r4, #0]
 800e2f2:	1c5a      	adds	r2, r3, #1
 800e2f4:	6022      	str	r2, [r4, #0]
 800e2f6:	701e      	strb	r6, [r3, #0]
 800e2f8:	6963      	ldr	r3, [r4, #20]
 800e2fa:	3001      	adds	r0, #1
 800e2fc:	4283      	cmp	r3, r0
 800e2fe:	d004      	beq.n	800e30a <__swbuf_r+0x62>
 800e300:	89a3      	ldrh	r3, [r4, #12]
 800e302:	07db      	lsls	r3, r3, #31
 800e304:	d506      	bpl.n	800e314 <__swbuf_r+0x6c>
 800e306:	2e0a      	cmp	r6, #10
 800e308:	d104      	bne.n	800e314 <__swbuf_r+0x6c>
 800e30a:	4621      	mov	r1, r4
 800e30c:	4628      	mov	r0, r5
 800e30e:	f000 f927 	bl	800e560 <_fflush_r>
 800e312:	b988      	cbnz	r0, 800e338 <__swbuf_r+0x90>
 800e314:	4638      	mov	r0, r7
 800e316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e318:	4b0a      	ldr	r3, [pc, #40]	; (800e344 <__swbuf_r+0x9c>)
 800e31a:	429c      	cmp	r4, r3
 800e31c:	d101      	bne.n	800e322 <__swbuf_r+0x7a>
 800e31e:	68ac      	ldr	r4, [r5, #8]
 800e320:	e7cf      	b.n	800e2c2 <__swbuf_r+0x1a>
 800e322:	4b09      	ldr	r3, [pc, #36]	; (800e348 <__swbuf_r+0xa0>)
 800e324:	429c      	cmp	r4, r3
 800e326:	bf08      	it	eq
 800e328:	68ec      	ldreq	r4, [r5, #12]
 800e32a:	e7ca      	b.n	800e2c2 <__swbuf_r+0x1a>
 800e32c:	4621      	mov	r1, r4
 800e32e:	4628      	mov	r0, r5
 800e330:	f000 f81a 	bl	800e368 <__swsetup_r>
 800e334:	2800      	cmp	r0, #0
 800e336:	d0cb      	beq.n	800e2d0 <__swbuf_r+0x28>
 800e338:	f04f 37ff 	mov.w	r7, #4294967295
 800e33c:	e7ea      	b.n	800e314 <__swbuf_r+0x6c>
 800e33e:	bf00      	nop
 800e340:	0801042c 	.word	0x0801042c
 800e344:	0801044c 	.word	0x0801044c
 800e348:	0801040c 	.word	0x0801040c

0800e34c <__ascii_wctomb>:
 800e34c:	b149      	cbz	r1, 800e362 <__ascii_wctomb+0x16>
 800e34e:	2aff      	cmp	r2, #255	; 0xff
 800e350:	bf85      	ittet	hi
 800e352:	238a      	movhi	r3, #138	; 0x8a
 800e354:	6003      	strhi	r3, [r0, #0]
 800e356:	700a      	strbls	r2, [r1, #0]
 800e358:	f04f 30ff 	movhi.w	r0, #4294967295
 800e35c:	bf98      	it	ls
 800e35e:	2001      	movls	r0, #1
 800e360:	4770      	bx	lr
 800e362:	4608      	mov	r0, r1
 800e364:	4770      	bx	lr
	...

0800e368 <__swsetup_r>:
 800e368:	4b32      	ldr	r3, [pc, #200]	; (800e434 <__swsetup_r+0xcc>)
 800e36a:	b570      	push	{r4, r5, r6, lr}
 800e36c:	681d      	ldr	r5, [r3, #0]
 800e36e:	4606      	mov	r6, r0
 800e370:	460c      	mov	r4, r1
 800e372:	b125      	cbz	r5, 800e37e <__swsetup_r+0x16>
 800e374:	69ab      	ldr	r3, [r5, #24]
 800e376:	b913      	cbnz	r3, 800e37e <__swsetup_r+0x16>
 800e378:	4628      	mov	r0, r5
 800e37a:	f000 f985 	bl	800e688 <__sinit>
 800e37e:	4b2e      	ldr	r3, [pc, #184]	; (800e438 <__swsetup_r+0xd0>)
 800e380:	429c      	cmp	r4, r3
 800e382:	d10f      	bne.n	800e3a4 <__swsetup_r+0x3c>
 800e384:	686c      	ldr	r4, [r5, #4]
 800e386:	89a3      	ldrh	r3, [r4, #12]
 800e388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e38c:	0719      	lsls	r1, r3, #28
 800e38e:	d42c      	bmi.n	800e3ea <__swsetup_r+0x82>
 800e390:	06dd      	lsls	r5, r3, #27
 800e392:	d411      	bmi.n	800e3b8 <__swsetup_r+0x50>
 800e394:	2309      	movs	r3, #9
 800e396:	6033      	str	r3, [r6, #0]
 800e398:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e39c:	81a3      	strh	r3, [r4, #12]
 800e39e:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a2:	e03e      	b.n	800e422 <__swsetup_r+0xba>
 800e3a4:	4b25      	ldr	r3, [pc, #148]	; (800e43c <__swsetup_r+0xd4>)
 800e3a6:	429c      	cmp	r4, r3
 800e3a8:	d101      	bne.n	800e3ae <__swsetup_r+0x46>
 800e3aa:	68ac      	ldr	r4, [r5, #8]
 800e3ac:	e7eb      	b.n	800e386 <__swsetup_r+0x1e>
 800e3ae:	4b24      	ldr	r3, [pc, #144]	; (800e440 <__swsetup_r+0xd8>)
 800e3b0:	429c      	cmp	r4, r3
 800e3b2:	bf08      	it	eq
 800e3b4:	68ec      	ldreq	r4, [r5, #12]
 800e3b6:	e7e6      	b.n	800e386 <__swsetup_r+0x1e>
 800e3b8:	0758      	lsls	r0, r3, #29
 800e3ba:	d512      	bpl.n	800e3e2 <__swsetup_r+0x7a>
 800e3bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3be:	b141      	cbz	r1, 800e3d2 <__swsetup_r+0x6a>
 800e3c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3c4:	4299      	cmp	r1, r3
 800e3c6:	d002      	beq.n	800e3ce <__swsetup_r+0x66>
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	f7ff fb6f 	bl	800daac <_free_r>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	6363      	str	r3, [r4, #52]	; 0x34
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3d8:	81a3      	strh	r3, [r4, #12]
 800e3da:	2300      	movs	r3, #0
 800e3dc:	6063      	str	r3, [r4, #4]
 800e3de:	6923      	ldr	r3, [r4, #16]
 800e3e0:	6023      	str	r3, [r4, #0]
 800e3e2:	89a3      	ldrh	r3, [r4, #12]
 800e3e4:	f043 0308 	orr.w	r3, r3, #8
 800e3e8:	81a3      	strh	r3, [r4, #12]
 800e3ea:	6923      	ldr	r3, [r4, #16]
 800e3ec:	b94b      	cbnz	r3, 800e402 <__swsetup_r+0x9a>
 800e3ee:	89a3      	ldrh	r3, [r4, #12]
 800e3f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3f8:	d003      	beq.n	800e402 <__swsetup_r+0x9a>
 800e3fa:	4621      	mov	r1, r4
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	f000 fa07 	bl	800e810 <__smakebuf_r>
 800e402:	89a0      	ldrh	r0, [r4, #12]
 800e404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e408:	f010 0301 	ands.w	r3, r0, #1
 800e40c:	d00a      	beq.n	800e424 <__swsetup_r+0xbc>
 800e40e:	2300      	movs	r3, #0
 800e410:	60a3      	str	r3, [r4, #8]
 800e412:	6963      	ldr	r3, [r4, #20]
 800e414:	425b      	negs	r3, r3
 800e416:	61a3      	str	r3, [r4, #24]
 800e418:	6923      	ldr	r3, [r4, #16]
 800e41a:	b943      	cbnz	r3, 800e42e <__swsetup_r+0xc6>
 800e41c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e420:	d1ba      	bne.n	800e398 <__swsetup_r+0x30>
 800e422:	bd70      	pop	{r4, r5, r6, pc}
 800e424:	0781      	lsls	r1, r0, #30
 800e426:	bf58      	it	pl
 800e428:	6963      	ldrpl	r3, [r4, #20]
 800e42a:	60a3      	str	r3, [r4, #8]
 800e42c:	e7f4      	b.n	800e418 <__swsetup_r+0xb0>
 800e42e:	2000      	movs	r0, #0
 800e430:	e7f7      	b.n	800e422 <__swsetup_r+0xba>
 800e432:	bf00      	nop
 800e434:	20000034 	.word	0x20000034
 800e438:	0801042c 	.word	0x0801042c
 800e43c:	0801044c 	.word	0x0801044c
 800e440:	0801040c 	.word	0x0801040c

0800e444 <abort>:
 800e444:	b508      	push	{r3, lr}
 800e446:	2006      	movs	r0, #6
 800e448:	f000 fa52 	bl	800e8f0 <raise>
 800e44c:	2001      	movs	r0, #1
 800e44e:	f7f3 faa7 	bl	80019a0 <_exit>
	...

0800e454 <__sflush_r>:
 800e454:	898a      	ldrh	r2, [r1, #12]
 800e456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e45a:	4605      	mov	r5, r0
 800e45c:	0710      	lsls	r0, r2, #28
 800e45e:	460c      	mov	r4, r1
 800e460:	d458      	bmi.n	800e514 <__sflush_r+0xc0>
 800e462:	684b      	ldr	r3, [r1, #4]
 800e464:	2b00      	cmp	r3, #0
 800e466:	dc05      	bgt.n	800e474 <__sflush_r+0x20>
 800e468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	dc02      	bgt.n	800e474 <__sflush_r+0x20>
 800e46e:	2000      	movs	r0, #0
 800e470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e476:	2e00      	cmp	r6, #0
 800e478:	d0f9      	beq.n	800e46e <__sflush_r+0x1a>
 800e47a:	2300      	movs	r3, #0
 800e47c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e480:	682f      	ldr	r7, [r5, #0]
 800e482:	602b      	str	r3, [r5, #0]
 800e484:	d032      	beq.n	800e4ec <__sflush_r+0x98>
 800e486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e488:	89a3      	ldrh	r3, [r4, #12]
 800e48a:	075a      	lsls	r2, r3, #29
 800e48c:	d505      	bpl.n	800e49a <__sflush_r+0x46>
 800e48e:	6863      	ldr	r3, [r4, #4]
 800e490:	1ac0      	subs	r0, r0, r3
 800e492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e494:	b10b      	cbz	r3, 800e49a <__sflush_r+0x46>
 800e496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e498:	1ac0      	subs	r0, r0, r3
 800e49a:	2300      	movs	r3, #0
 800e49c:	4602      	mov	r2, r0
 800e49e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4a0:	6a21      	ldr	r1, [r4, #32]
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	47b0      	blx	r6
 800e4a6:	1c43      	adds	r3, r0, #1
 800e4a8:	89a3      	ldrh	r3, [r4, #12]
 800e4aa:	d106      	bne.n	800e4ba <__sflush_r+0x66>
 800e4ac:	6829      	ldr	r1, [r5, #0]
 800e4ae:	291d      	cmp	r1, #29
 800e4b0:	d82c      	bhi.n	800e50c <__sflush_r+0xb8>
 800e4b2:	4a2a      	ldr	r2, [pc, #168]	; (800e55c <__sflush_r+0x108>)
 800e4b4:	40ca      	lsrs	r2, r1
 800e4b6:	07d6      	lsls	r6, r2, #31
 800e4b8:	d528      	bpl.n	800e50c <__sflush_r+0xb8>
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	6062      	str	r2, [r4, #4]
 800e4be:	04d9      	lsls	r1, r3, #19
 800e4c0:	6922      	ldr	r2, [r4, #16]
 800e4c2:	6022      	str	r2, [r4, #0]
 800e4c4:	d504      	bpl.n	800e4d0 <__sflush_r+0x7c>
 800e4c6:	1c42      	adds	r2, r0, #1
 800e4c8:	d101      	bne.n	800e4ce <__sflush_r+0x7a>
 800e4ca:	682b      	ldr	r3, [r5, #0]
 800e4cc:	b903      	cbnz	r3, 800e4d0 <__sflush_r+0x7c>
 800e4ce:	6560      	str	r0, [r4, #84]	; 0x54
 800e4d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4d2:	602f      	str	r7, [r5, #0]
 800e4d4:	2900      	cmp	r1, #0
 800e4d6:	d0ca      	beq.n	800e46e <__sflush_r+0x1a>
 800e4d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4dc:	4299      	cmp	r1, r3
 800e4de:	d002      	beq.n	800e4e6 <__sflush_r+0x92>
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	f7ff fae3 	bl	800daac <_free_r>
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	6360      	str	r0, [r4, #52]	; 0x34
 800e4ea:	e7c1      	b.n	800e470 <__sflush_r+0x1c>
 800e4ec:	6a21      	ldr	r1, [r4, #32]
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	47b0      	blx	r6
 800e4f4:	1c41      	adds	r1, r0, #1
 800e4f6:	d1c7      	bne.n	800e488 <__sflush_r+0x34>
 800e4f8:	682b      	ldr	r3, [r5, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d0c4      	beq.n	800e488 <__sflush_r+0x34>
 800e4fe:	2b1d      	cmp	r3, #29
 800e500:	d001      	beq.n	800e506 <__sflush_r+0xb2>
 800e502:	2b16      	cmp	r3, #22
 800e504:	d101      	bne.n	800e50a <__sflush_r+0xb6>
 800e506:	602f      	str	r7, [r5, #0]
 800e508:	e7b1      	b.n	800e46e <__sflush_r+0x1a>
 800e50a:	89a3      	ldrh	r3, [r4, #12]
 800e50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e510:	81a3      	strh	r3, [r4, #12]
 800e512:	e7ad      	b.n	800e470 <__sflush_r+0x1c>
 800e514:	690f      	ldr	r7, [r1, #16]
 800e516:	2f00      	cmp	r7, #0
 800e518:	d0a9      	beq.n	800e46e <__sflush_r+0x1a>
 800e51a:	0793      	lsls	r3, r2, #30
 800e51c:	680e      	ldr	r6, [r1, #0]
 800e51e:	bf08      	it	eq
 800e520:	694b      	ldreq	r3, [r1, #20]
 800e522:	600f      	str	r7, [r1, #0]
 800e524:	bf18      	it	ne
 800e526:	2300      	movne	r3, #0
 800e528:	eba6 0807 	sub.w	r8, r6, r7
 800e52c:	608b      	str	r3, [r1, #8]
 800e52e:	f1b8 0f00 	cmp.w	r8, #0
 800e532:	dd9c      	ble.n	800e46e <__sflush_r+0x1a>
 800e534:	6a21      	ldr	r1, [r4, #32]
 800e536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e538:	4643      	mov	r3, r8
 800e53a:	463a      	mov	r2, r7
 800e53c:	4628      	mov	r0, r5
 800e53e:	47b0      	blx	r6
 800e540:	2800      	cmp	r0, #0
 800e542:	dc06      	bgt.n	800e552 <__sflush_r+0xfe>
 800e544:	89a3      	ldrh	r3, [r4, #12]
 800e546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e54a:	81a3      	strh	r3, [r4, #12]
 800e54c:	f04f 30ff 	mov.w	r0, #4294967295
 800e550:	e78e      	b.n	800e470 <__sflush_r+0x1c>
 800e552:	4407      	add	r7, r0
 800e554:	eba8 0800 	sub.w	r8, r8, r0
 800e558:	e7e9      	b.n	800e52e <__sflush_r+0xda>
 800e55a:	bf00      	nop
 800e55c:	20400001 	.word	0x20400001

0800e560 <_fflush_r>:
 800e560:	b538      	push	{r3, r4, r5, lr}
 800e562:	690b      	ldr	r3, [r1, #16]
 800e564:	4605      	mov	r5, r0
 800e566:	460c      	mov	r4, r1
 800e568:	b913      	cbnz	r3, 800e570 <_fflush_r+0x10>
 800e56a:	2500      	movs	r5, #0
 800e56c:	4628      	mov	r0, r5
 800e56e:	bd38      	pop	{r3, r4, r5, pc}
 800e570:	b118      	cbz	r0, 800e57a <_fflush_r+0x1a>
 800e572:	6983      	ldr	r3, [r0, #24]
 800e574:	b90b      	cbnz	r3, 800e57a <_fflush_r+0x1a>
 800e576:	f000 f887 	bl	800e688 <__sinit>
 800e57a:	4b14      	ldr	r3, [pc, #80]	; (800e5cc <_fflush_r+0x6c>)
 800e57c:	429c      	cmp	r4, r3
 800e57e:	d11b      	bne.n	800e5b8 <_fflush_r+0x58>
 800e580:	686c      	ldr	r4, [r5, #4]
 800e582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d0ef      	beq.n	800e56a <_fflush_r+0xa>
 800e58a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e58c:	07d0      	lsls	r0, r2, #31
 800e58e:	d404      	bmi.n	800e59a <_fflush_r+0x3a>
 800e590:	0599      	lsls	r1, r3, #22
 800e592:	d402      	bmi.n	800e59a <_fflush_r+0x3a>
 800e594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e596:	f000 f915 	bl	800e7c4 <__retarget_lock_acquire_recursive>
 800e59a:	4628      	mov	r0, r5
 800e59c:	4621      	mov	r1, r4
 800e59e:	f7ff ff59 	bl	800e454 <__sflush_r>
 800e5a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5a4:	07da      	lsls	r2, r3, #31
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	d4e0      	bmi.n	800e56c <_fflush_r+0xc>
 800e5aa:	89a3      	ldrh	r3, [r4, #12]
 800e5ac:	059b      	lsls	r3, r3, #22
 800e5ae:	d4dd      	bmi.n	800e56c <_fflush_r+0xc>
 800e5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5b2:	f000 f908 	bl	800e7c6 <__retarget_lock_release_recursive>
 800e5b6:	e7d9      	b.n	800e56c <_fflush_r+0xc>
 800e5b8:	4b05      	ldr	r3, [pc, #20]	; (800e5d0 <_fflush_r+0x70>)
 800e5ba:	429c      	cmp	r4, r3
 800e5bc:	d101      	bne.n	800e5c2 <_fflush_r+0x62>
 800e5be:	68ac      	ldr	r4, [r5, #8]
 800e5c0:	e7df      	b.n	800e582 <_fflush_r+0x22>
 800e5c2:	4b04      	ldr	r3, [pc, #16]	; (800e5d4 <_fflush_r+0x74>)
 800e5c4:	429c      	cmp	r4, r3
 800e5c6:	bf08      	it	eq
 800e5c8:	68ec      	ldreq	r4, [r5, #12]
 800e5ca:	e7da      	b.n	800e582 <_fflush_r+0x22>
 800e5cc:	0801042c 	.word	0x0801042c
 800e5d0:	0801044c 	.word	0x0801044c
 800e5d4:	0801040c 	.word	0x0801040c

0800e5d8 <std>:
 800e5d8:	2300      	movs	r3, #0
 800e5da:	b510      	push	{r4, lr}
 800e5dc:	4604      	mov	r4, r0
 800e5de:	e9c0 3300 	strd	r3, r3, [r0]
 800e5e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5e6:	6083      	str	r3, [r0, #8]
 800e5e8:	8181      	strh	r1, [r0, #12]
 800e5ea:	6643      	str	r3, [r0, #100]	; 0x64
 800e5ec:	81c2      	strh	r2, [r0, #14]
 800e5ee:	6183      	str	r3, [r0, #24]
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	2208      	movs	r2, #8
 800e5f4:	305c      	adds	r0, #92	; 0x5c
 800e5f6:	f7fd fbb5 	bl	800bd64 <memset>
 800e5fa:	4b05      	ldr	r3, [pc, #20]	; (800e610 <std+0x38>)
 800e5fc:	6263      	str	r3, [r4, #36]	; 0x24
 800e5fe:	4b05      	ldr	r3, [pc, #20]	; (800e614 <std+0x3c>)
 800e600:	62a3      	str	r3, [r4, #40]	; 0x28
 800e602:	4b05      	ldr	r3, [pc, #20]	; (800e618 <std+0x40>)
 800e604:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e606:	4b05      	ldr	r3, [pc, #20]	; (800e61c <std+0x44>)
 800e608:	6224      	str	r4, [r4, #32]
 800e60a:	6323      	str	r3, [r4, #48]	; 0x30
 800e60c:	bd10      	pop	{r4, pc}
 800e60e:	bf00      	nop
 800e610:	0800e929 	.word	0x0800e929
 800e614:	0800e94b 	.word	0x0800e94b
 800e618:	0800e983 	.word	0x0800e983
 800e61c:	0800e9a7 	.word	0x0800e9a7

0800e620 <_cleanup_r>:
 800e620:	4901      	ldr	r1, [pc, #4]	; (800e628 <_cleanup_r+0x8>)
 800e622:	f000 b8af 	b.w	800e784 <_fwalk_reent>
 800e626:	bf00      	nop
 800e628:	0800e561 	.word	0x0800e561

0800e62c <__sfmoreglue>:
 800e62c:	b570      	push	{r4, r5, r6, lr}
 800e62e:	1e4a      	subs	r2, r1, #1
 800e630:	2568      	movs	r5, #104	; 0x68
 800e632:	4355      	muls	r5, r2
 800e634:	460e      	mov	r6, r1
 800e636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e63a:	f7ff fa87 	bl	800db4c <_malloc_r>
 800e63e:	4604      	mov	r4, r0
 800e640:	b140      	cbz	r0, 800e654 <__sfmoreglue+0x28>
 800e642:	2100      	movs	r1, #0
 800e644:	e9c0 1600 	strd	r1, r6, [r0]
 800e648:	300c      	adds	r0, #12
 800e64a:	60a0      	str	r0, [r4, #8]
 800e64c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e650:	f7fd fb88 	bl	800bd64 <memset>
 800e654:	4620      	mov	r0, r4
 800e656:	bd70      	pop	{r4, r5, r6, pc}

0800e658 <__sfp_lock_acquire>:
 800e658:	4801      	ldr	r0, [pc, #4]	; (800e660 <__sfp_lock_acquire+0x8>)
 800e65a:	f000 b8b3 	b.w	800e7c4 <__retarget_lock_acquire_recursive>
 800e65e:	bf00      	nop
 800e660:	2000529c 	.word	0x2000529c

0800e664 <__sfp_lock_release>:
 800e664:	4801      	ldr	r0, [pc, #4]	; (800e66c <__sfp_lock_release+0x8>)
 800e666:	f000 b8ae 	b.w	800e7c6 <__retarget_lock_release_recursive>
 800e66a:	bf00      	nop
 800e66c:	2000529c 	.word	0x2000529c

0800e670 <__sinit_lock_acquire>:
 800e670:	4801      	ldr	r0, [pc, #4]	; (800e678 <__sinit_lock_acquire+0x8>)
 800e672:	f000 b8a7 	b.w	800e7c4 <__retarget_lock_acquire_recursive>
 800e676:	bf00      	nop
 800e678:	20005297 	.word	0x20005297

0800e67c <__sinit_lock_release>:
 800e67c:	4801      	ldr	r0, [pc, #4]	; (800e684 <__sinit_lock_release+0x8>)
 800e67e:	f000 b8a2 	b.w	800e7c6 <__retarget_lock_release_recursive>
 800e682:	bf00      	nop
 800e684:	20005297 	.word	0x20005297

0800e688 <__sinit>:
 800e688:	b510      	push	{r4, lr}
 800e68a:	4604      	mov	r4, r0
 800e68c:	f7ff fff0 	bl	800e670 <__sinit_lock_acquire>
 800e690:	69a3      	ldr	r3, [r4, #24]
 800e692:	b11b      	cbz	r3, 800e69c <__sinit+0x14>
 800e694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e698:	f7ff bff0 	b.w	800e67c <__sinit_lock_release>
 800e69c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e6a0:	6523      	str	r3, [r4, #80]	; 0x50
 800e6a2:	4b13      	ldr	r3, [pc, #76]	; (800e6f0 <__sinit+0x68>)
 800e6a4:	4a13      	ldr	r2, [pc, #76]	; (800e6f4 <__sinit+0x6c>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e6aa:	42a3      	cmp	r3, r4
 800e6ac:	bf04      	itt	eq
 800e6ae:	2301      	moveq	r3, #1
 800e6b0:	61a3      	streq	r3, [r4, #24]
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	f000 f820 	bl	800e6f8 <__sfp>
 800e6b8:	6060      	str	r0, [r4, #4]
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f000 f81c 	bl	800e6f8 <__sfp>
 800e6c0:	60a0      	str	r0, [r4, #8]
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	f000 f818 	bl	800e6f8 <__sfp>
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	60e0      	str	r0, [r4, #12]
 800e6cc:	2104      	movs	r1, #4
 800e6ce:	6860      	ldr	r0, [r4, #4]
 800e6d0:	f7ff ff82 	bl	800e5d8 <std>
 800e6d4:	68a0      	ldr	r0, [r4, #8]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	2109      	movs	r1, #9
 800e6da:	f7ff ff7d 	bl	800e5d8 <std>
 800e6de:	68e0      	ldr	r0, [r4, #12]
 800e6e0:	2202      	movs	r2, #2
 800e6e2:	2112      	movs	r1, #18
 800e6e4:	f7ff ff78 	bl	800e5d8 <std>
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	61a3      	str	r3, [r4, #24]
 800e6ec:	e7d2      	b.n	800e694 <__sinit+0xc>
 800e6ee:	bf00      	nop
 800e6f0:	08010088 	.word	0x08010088
 800e6f4:	0800e621 	.word	0x0800e621

0800e6f8 <__sfp>:
 800e6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6fa:	4607      	mov	r7, r0
 800e6fc:	f7ff ffac 	bl	800e658 <__sfp_lock_acquire>
 800e700:	4b1e      	ldr	r3, [pc, #120]	; (800e77c <__sfp+0x84>)
 800e702:	681e      	ldr	r6, [r3, #0]
 800e704:	69b3      	ldr	r3, [r6, #24]
 800e706:	b913      	cbnz	r3, 800e70e <__sfp+0x16>
 800e708:	4630      	mov	r0, r6
 800e70a:	f7ff ffbd 	bl	800e688 <__sinit>
 800e70e:	3648      	adds	r6, #72	; 0x48
 800e710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e714:	3b01      	subs	r3, #1
 800e716:	d503      	bpl.n	800e720 <__sfp+0x28>
 800e718:	6833      	ldr	r3, [r6, #0]
 800e71a:	b30b      	cbz	r3, 800e760 <__sfp+0x68>
 800e71c:	6836      	ldr	r6, [r6, #0]
 800e71e:	e7f7      	b.n	800e710 <__sfp+0x18>
 800e720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e724:	b9d5      	cbnz	r5, 800e75c <__sfp+0x64>
 800e726:	4b16      	ldr	r3, [pc, #88]	; (800e780 <__sfp+0x88>)
 800e728:	60e3      	str	r3, [r4, #12]
 800e72a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e72e:	6665      	str	r5, [r4, #100]	; 0x64
 800e730:	f000 f847 	bl	800e7c2 <__retarget_lock_init_recursive>
 800e734:	f7ff ff96 	bl	800e664 <__sfp_lock_release>
 800e738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e73c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e740:	6025      	str	r5, [r4, #0]
 800e742:	61a5      	str	r5, [r4, #24]
 800e744:	2208      	movs	r2, #8
 800e746:	4629      	mov	r1, r5
 800e748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e74c:	f7fd fb0a 	bl	800bd64 <memset>
 800e750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e758:	4620      	mov	r0, r4
 800e75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e75c:	3468      	adds	r4, #104	; 0x68
 800e75e:	e7d9      	b.n	800e714 <__sfp+0x1c>
 800e760:	2104      	movs	r1, #4
 800e762:	4638      	mov	r0, r7
 800e764:	f7ff ff62 	bl	800e62c <__sfmoreglue>
 800e768:	4604      	mov	r4, r0
 800e76a:	6030      	str	r0, [r6, #0]
 800e76c:	2800      	cmp	r0, #0
 800e76e:	d1d5      	bne.n	800e71c <__sfp+0x24>
 800e770:	f7ff ff78 	bl	800e664 <__sfp_lock_release>
 800e774:	230c      	movs	r3, #12
 800e776:	603b      	str	r3, [r7, #0]
 800e778:	e7ee      	b.n	800e758 <__sfp+0x60>
 800e77a:	bf00      	nop
 800e77c:	08010088 	.word	0x08010088
 800e780:	ffff0001 	.word	0xffff0001

0800e784 <_fwalk_reent>:
 800e784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e788:	4606      	mov	r6, r0
 800e78a:	4688      	mov	r8, r1
 800e78c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e790:	2700      	movs	r7, #0
 800e792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e796:	f1b9 0901 	subs.w	r9, r9, #1
 800e79a:	d505      	bpl.n	800e7a8 <_fwalk_reent+0x24>
 800e79c:	6824      	ldr	r4, [r4, #0]
 800e79e:	2c00      	cmp	r4, #0
 800e7a0:	d1f7      	bne.n	800e792 <_fwalk_reent+0xe>
 800e7a2:	4638      	mov	r0, r7
 800e7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7a8:	89ab      	ldrh	r3, [r5, #12]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d907      	bls.n	800e7be <_fwalk_reent+0x3a>
 800e7ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	d003      	beq.n	800e7be <_fwalk_reent+0x3a>
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	4630      	mov	r0, r6
 800e7ba:	47c0      	blx	r8
 800e7bc:	4307      	orrs	r7, r0
 800e7be:	3568      	adds	r5, #104	; 0x68
 800e7c0:	e7e9      	b.n	800e796 <_fwalk_reent+0x12>

0800e7c2 <__retarget_lock_init_recursive>:
 800e7c2:	4770      	bx	lr

0800e7c4 <__retarget_lock_acquire_recursive>:
 800e7c4:	4770      	bx	lr

0800e7c6 <__retarget_lock_release_recursive>:
 800e7c6:	4770      	bx	lr

0800e7c8 <__swhatbuf_r>:
 800e7c8:	b570      	push	{r4, r5, r6, lr}
 800e7ca:	460e      	mov	r6, r1
 800e7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7d0:	2900      	cmp	r1, #0
 800e7d2:	b096      	sub	sp, #88	; 0x58
 800e7d4:	4614      	mov	r4, r2
 800e7d6:	461d      	mov	r5, r3
 800e7d8:	da07      	bge.n	800e7ea <__swhatbuf_r+0x22>
 800e7da:	2300      	movs	r3, #0
 800e7dc:	602b      	str	r3, [r5, #0]
 800e7de:	89b3      	ldrh	r3, [r6, #12]
 800e7e0:	061a      	lsls	r2, r3, #24
 800e7e2:	d410      	bmi.n	800e806 <__swhatbuf_r+0x3e>
 800e7e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7e8:	e00e      	b.n	800e808 <__swhatbuf_r+0x40>
 800e7ea:	466a      	mov	r2, sp
 800e7ec:	f000 f902 	bl	800e9f4 <_fstat_r>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	dbf2      	blt.n	800e7da <__swhatbuf_r+0x12>
 800e7f4:	9a01      	ldr	r2, [sp, #4]
 800e7f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7fe:	425a      	negs	r2, r3
 800e800:	415a      	adcs	r2, r3
 800e802:	602a      	str	r2, [r5, #0]
 800e804:	e7ee      	b.n	800e7e4 <__swhatbuf_r+0x1c>
 800e806:	2340      	movs	r3, #64	; 0x40
 800e808:	2000      	movs	r0, #0
 800e80a:	6023      	str	r3, [r4, #0]
 800e80c:	b016      	add	sp, #88	; 0x58
 800e80e:	bd70      	pop	{r4, r5, r6, pc}

0800e810 <__smakebuf_r>:
 800e810:	898b      	ldrh	r3, [r1, #12]
 800e812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e814:	079d      	lsls	r5, r3, #30
 800e816:	4606      	mov	r6, r0
 800e818:	460c      	mov	r4, r1
 800e81a:	d507      	bpl.n	800e82c <__smakebuf_r+0x1c>
 800e81c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e820:	6023      	str	r3, [r4, #0]
 800e822:	6123      	str	r3, [r4, #16]
 800e824:	2301      	movs	r3, #1
 800e826:	6163      	str	r3, [r4, #20]
 800e828:	b002      	add	sp, #8
 800e82a:	bd70      	pop	{r4, r5, r6, pc}
 800e82c:	ab01      	add	r3, sp, #4
 800e82e:	466a      	mov	r2, sp
 800e830:	f7ff ffca 	bl	800e7c8 <__swhatbuf_r>
 800e834:	9900      	ldr	r1, [sp, #0]
 800e836:	4605      	mov	r5, r0
 800e838:	4630      	mov	r0, r6
 800e83a:	f7ff f987 	bl	800db4c <_malloc_r>
 800e83e:	b948      	cbnz	r0, 800e854 <__smakebuf_r+0x44>
 800e840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e844:	059a      	lsls	r2, r3, #22
 800e846:	d4ef      	bmi.n	800e828 <__smakebuf_r+0x18>
 800e848:	f023 0303 	bic.w	r3, r3, #3
 800e84c:	f043 0302 	orr.w	r3, r3, #2
 800e850:	81a3      	strh	r3, [r4, #12]
 800e852:	e7e3      	b.n	800e81c <__smakebuf_r+0xc>
 800e854:	4b0d      	ldr	r3, [pc, #52]	; (800e88c <__smakebuf_r+0x7c>)
 800e856:	62b3      	str	r3, [r6, #40]	; 0x28
 800e858:	89a3      	ldrh	r3, [r4, #12]
 800e85a:	6020      	str	r0, [r4, #0]
 800e85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e860:	81a3      	strh	r3, [r4, #12]
 800e862:	9b00      	ldr	r3, [sp, #0]
 800e864:	6163      	str	r3, [r4, #20]
 800e866:	9b01      	ldr	r3, [sp, #4]
 800e868:	6120      	str	r0, [r4, #16]
 800e86a:	b15b      	cbz	r3, 800e884 <__smakebuf_r+0x74>
 800e86c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e870:	4630      	mov	r0, r6
 800e872:	f000 f8d1 	bl	800ea18 <_isatty_r>
 800e876:	b128      	cbz	r0, 800e884 <__smakebuf_r+0x74>
 800e878:	89a3      	ldrh	r3, [r4, #12]
 800e87a:	f023 0303 	bic.w	r3, r3, #3
 800e87e:	f043 0301 	orr.w	r3, r3, #1
 800e882:	81a3      	strh	r3, [r4, #12]
 800e884:	89a0      	ldrh	r0, [r4, #12]
 800e886:	4305      	orrs	r5, r0
 800e888:	81a5      	strh	r5, [r4, #12]
 800e88a:	e7cd      	b.n	800e828 <__smakebuf_r+0x18>
 800e88c:	0800e621 	.word	0x0800e621

0800e890 <_malloc_usable_size_r>:
 800e890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e894:	1f18      	subs	r0, r3, #4
 800e896:	2b00      	cmp	r3, #0
 800e898:	bfbc      	itt	lt
 800e89a:	580b      	ldrlt	r3, [r1, r0]
 800e89c:	18c0      	addlt	r0, r0, r3
 800e89e:	4770      	bx	lr

0800e8a0 <_raise_r>:
 800e8a0:	291f      	cmp	r1, #31
 800e8a2:	b538      	push	{r3, r4, r5, lr}
 800e8a4:	4604      	mov	r4, r0
 800e8a6:	460d      	mov	r5, r1
 800e8a8:	d904      	bls.n	800e8b4 <_raise_r+0x14>
 800e8aa:	2316      	movs	r3, #22
 800e8ac:	6003      	str	r3, [r0, #0]
 800e8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b2:	bd38      	pop	{r3, r4, r5, pc}
 800e8b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e8b6:	b112      	cbz	r2, 800e8be <_raise_r+0x1e>
 800e8b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8bc:	b94b      	cbnz	r3, 800e8d2 <_raise_r+0x32>
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f000 f830 	bl	800e924 <_getpid_r>
 800e8c4:	462a      	mov	r2, r5
 800e8c6:	4601      	mov	r1, r0
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8ce:	f000 b817 	b.w	800e900 <_kill_r>
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d00a      	beq.n	800e8ec <_raise_r+0x4c>
 800e8d6:	1c59      	adds	r1, r3, #1
 800e8d8:	d103      	bne.n	800e8e2 <_raise_r+0x42>
 800e8da:	2316      	movs	r3, #22
 800e8dc:	6003      	str	r3, [r0, #0]
 800e8de:	2001      	movs	r0, #1
 800e8e0:	e7e7      	b.n	800e8b2 <_raise_r+0x12>
 800e8e2:	2400      	movs	r4, #0
 800e8e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	4798      	blx	r3
 800e8ec:	2000      	movs	r0, #0
 800e8ee:	e7e0      	b.n	800e8b2 <_raise_r+0x12>

0800e8f0 <raise>:
 800e8f0:	4b02      	ldr	r3, [pc, #8]	; (800e8fc <raise+0xc>)
 800e8f2:	4601      	mov	r1, r0
 800e8f4:	6818      	ldr	r0, [r3, #0]
 800e8f6:	f7ff bfd3 	b.w	800e8a0 <_raise_r>
 800e8fa:	bf00      	nop
 800e8fc:	20000034 	.word	0x20000034

0800e900 <_kill_r>:
 800e900:	b538      	push	{r3, r4, r5, lr}
 800e902:	4d07      	ldr	r5, [pc, #28]	; (800e920 <_kill_r+0x20>)
 800e904:	2300      	movs	r3, #0
 800e906:	4604      	mov	r4, r0
 800e908:	4608      	mov	r0, r1
 800e90a:	4611      	mov	r1, r2
 800e90c:	602b      	str	r3, [r5, #0]
 800e90e:	f7f3 f837 	bl	8001980 <_kill>
 800e912:	1c43      	adds	r3, r0, #1
 800e914:	d102      	bne.n	800e91c <_kill_r+0x1c>
 800e916:	682b      	ldr	r3, [r5, #0]
 800e918:	b103      	cbz	r3, 800e91c <_kill_r+0x1c>
 800e91a:	6023      	str	r3, [r4, #0]
 800e91c:	bd38      	pop	{r3, r4, r5, pc}
 800e91e:	bf00      	nop
 800e920:	20005290 	.word	0x20005290

0800e924 <_getpid_r>:
 800e924:	f7f3 b824 	b.w	8001970 <_getpid>

0800e928 <__sread>:
 800e928:	b510      	push	{r4, lr}
 800e92a:	460c      	mov	r4, r1
 800e92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e930:	f000 f894 	bl	800ea5c <_read_r>
 800e934:	2800      	cmp	r0, #0
 800e936:	bfab      	itete	ge
 800e938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e93a:	89a3      	ldrhlt	r3, [r4, #12]
 800e93c:	181b      	addge	r3, r3, r0
 800e93e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e942:	bfac      	ite	ge
 800e944:	6563      	strge	r3, [r4, #84]	; 0x54
 800e946:	81a3      	strhlt	r3, [r4, #12]
 800e948:	bd10      	pop	{r4, pc}

0800e94a <__swrite>:
 800e94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e94e:	461f      	mov	r7, r3
 800e950:	898b      	ldrh	r3, [r1, #12]
 800e952:	05db      	lsls	r3, r3, #23
 800e954:	4605      	mov	r5, r0
 800e956:	460c      	mov	r4, r1
 800e958:	4616      	mov	r6, r2
 800e95a:	d505      	bpl.n	800e968 <__swrite+0x1e>
 800e95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e960:	2302      	movs	r3, #2
 800e962:	2200      	movs	r2, #0
 800e964:	f000 f868 	bl	800ea38 <_lseek_r>
 800e968:	89a3      	ldrh	r3, [r4, #12]
 800e96a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e96e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e972:	81a3      	strh	r3, [r4, #12]
 800e974:	4632      	mov	r2, r6
 800e976:	463b      	mov	r3, r7
 800e978:	4628      	mov	r0, r5
 800e97a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e97e:	f000 b817 	b.w	800e9b0 <_write_r>

0800e982 <__sseek>:
 800e982:	b510      	push	{r4, lr}
 800e984:	460c      	mov	r4, r1
 800e986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e98a:	f000 f855 	bl	800ea38 <_lseek_r>
 800e98e:	1c43      	adds	r3, r0, #1
 800e990:	89a3      	ldrh	r3, [r4, #12]
 800e992:	bf15      	itete	ne
 800e994:	6560      	strne	r0, [r4, #84]	; 0x54
 800e996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e99a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e99e:	81a3      	strheq	r3, [r4, #12]
 800e9a0:	bf18      	it	ne
 800e9a2:	81a3      	strhne	r3, [r4, #12]
 800e9a4:	bd10      	pop	{r4, pc}

0800e9a6 <__sclose>:
 800e9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9aa:	f000 b813 	b.w	800e9d4 <_close_r>
	...

0800e9b0 <_write_r>:
 800e9b0:	b538      	push	{r3, r4, r5, lr}
 800e9b2:	4d07      	ldr	r5, [pc, #28]	; (800e9d0 <_write_r+0x20>)
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	4608      	mov	r0, r1
 800e9b8:	4611      	mov	r1, r2
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	602a      	str	r2, [r5, #0]
 800e9be:	461a      	mov	r2, r3
 800e9c0:	f7f3 f815 	bl	80019ee <_write>
 800e9c4:	1c43      	adds	r3, r0, #1
 800e9c6:	d102      	bne.n	800e9ce <_write_r+0x1e>
 800e9c8:	682b      	ldr	r3, [r5, #0]
 800e9ca:	b103      	cbz	r3, 800e9ce <_write_r+0x1e>
 800e9cc:	6023      	str	r3, [r4, #0]
 800e9ce:	bd38      	pop	{r3, r4, r5, pc}
 800e9d0:	20005290 	.word	0x20005290

0800e9d4 <_close_r>:
 800e9d4:	b538      	push	{r3, r4, r5, lr}
 800e9d6:	4d06      	ldr	r5, [pc, #24]	; (800e9f0 <_close_r+0x1c>)
 800e9d8:	2300      	movs	r3, #0
 800e9da:	4604      	mov	r4, r0
 800e9dc:	4608      	mov	r0, r1
 800e9de:	602b      	str	r3, [r5, #0]
 800e9e0:	f7f3 f821 	bl	8001a26 <_close>
 800e9e4:	1c43      	adds	r3, r0, #1
 800e9e6:	d102      	bne.n	800e9ee <_close_r+0x1a>
 800e9e8:	682b      	ldr	r3, [r5, #0]
 800e9ea:	b103      	cbz	r3, 800e9ee <_close_r+0x1a>
 800e9ec:	6023      	str	r3, [r4, #0]
 800e9ee:	bd38      	pop	{r3, r4, r5, pc}
 800e9f0:	20005290 	.word	0x20005290

0800e9f4 <_fstat_r>:
 800e9f4:	b538      	push	{r3, r4, r5, lr}
 800e9f6:	4d07      	ldr	r5, [pc, #28]	; (800ea14 <_fstat_r+0x20>)
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	4604      	mov	r4, r0
 800e9fc:	4608      	mov	r0, r1
 800e9fe:	4611      	mov	r1, r2
 800ea00:	602b      	str	r3, [r5, #0]
 800ea02:	f7f3 f81c 	bl	8001a3e <_fstat>
 800ea06:	1c43      	adds	r3, r0, #1
 800ea08:	d102      	bne.n	800ea10 <_fstat_r+0x1c>
 800ea0a:	682b      	ldr	r3, [r5, #0]
 800ea0c:	b103      	cbz	r3, 800ea10 <_fstat_r+0x1c>
 800ea0e:	6023      	str	r3, [r4, #0]
 800ea10:	bd38      	pop	{r3, r4, r5, pc}
 800ea12:	bf00      	nop
 800ea14:	20005290 	.word	0x20005290

0800ea18 <_isatty_r>:
 800ea18:	b538      	push	{r3, r4, r5, lr}
 800ea1a:	4d06      	ldr	r5, [pc, #24]	; (800ea34 <_isatty_r+0x1c>)
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	4604      	mov	r4, r0
 800ea20:	4608      	mov	r0, r1
 800ea22:	602b      	str	r3, [r5, #0]
 800ea24:	f7f3 f81b 	bl	8001a5e <_isatty>
 800ea28:	1c43      	adds	r3, r0, #1
 800ea2a:	d102      	bne.n	800ea32 <_isatty_r+0x1a>
 800ea2c:	682b      	ldr	r3, [r5, #0]
 800ea2e:	b103      	cbz	r3, 800ea32 <_isatty_r+0x1a>
 800ea30:	6023      	str	r3, [r4, #0]
 800ea32:	bd38      	pop	{r3, r4, r5, pc}
 800ea34:	20005290 	.word	0x20005290

0800ea38 <_lseek_r>:
 800ea38:	b538      	push	{r3, r4, r5, lr}
 800ea3a:	4d07      	ldr	r5, [pc, #28]	; (800ea58 <_lseek_r+0x20>)
 800ea3c:	4604      	mov	r4, r0
 800ea3e:	4608      	mov	r0, r1
 800ea40:	4611      	mov	r1, r2
 800ea42:	2200      	movs	r2, #0
 800ea44:	602a      	str	r2, [r5, #0]
 800ea46:	461a      	mov	r2, r3
 800ea48:	f7f3 f814 	bl	8001a74 <_lseek>
 800ea4c:	1c43      	adds	r3, r0, #1
 800ea4e:	d102      	bne.n	800ea56 <_lseek_r+0x1e>
 800ea50:	682b      	ldr	r3, [r5, #0]
 800ea52:	b103      	cbz	r3, 800ea56 <_lseek_r+0x1e>
 800ea54:	6023      	str	r3, [r4, #0]
 800ea56:	bd38      	pop	{r3, r4, r5, pc}
 800ea58:	20005290 	.word	0x20005290

0800ea5c <_read_r>:
 800ea5c:	b538      	push	{r3, r4, r5, lr}
 800ea5e:	4d07      	ldr	r5, [pc, #28]	; (800ea7c <_read_r+0x20>)
 800ea60:	4604      	mov	r4, r0
 800ea62:	4608      	mov	r0, r1
 800ea64:	4611      	mov	r1, r2
 800ea66:	2200      	movs	r2, #0
 800ea68:	602a      	str	r2, [r5, #0]
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	f7f2 ffa2 	bl	80019b4 <_read>
 800ea70:	1c43      	adds	r3, r0, #1
 800ea72:	d102      	bne.n	800ea7a <_read_r+0x1e>
 800ea74:	682b      	ldr	r3, [r5, #0]
 800ea76:	b103      	cbz	r3, 800ea7a <_read_r+0x1e>
 800ea78:	6023      	str	r3, [r4, #0]
 800ea7a:	bd38      	pop	{r3, r4, r5, pc}
 800ea7c:	20005290 	.word	0x20005290

0800ea80 <log>:
 800ea80:	b538      	push	{r3, r4, r5, lr}
 800ea82:	ed2d 8b02 	vpush	{d8}
 800ea86:	ec55 4b10 	vmov	r4, r5, d0
 800ea8a:	f000 f8f1 	bl	800ec70 <__ieee754_log>
 800ea8e:	4b1e      	ldr	r3, [pc, #120]	; (800eb08 <log+0x88>)
 800ea90:	eeb0 8a40 	vmov.f32	s16, s0
 800ea94:	eef0 8a60 	vmov.f32	s17, s1
 800ea98:	f993 3000 	ldrsb.w	r3, [r3]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	d01a      	beq.n	800ead6 <log+0x56>
 800eaa0:	4622      	mov	r2, r4
 800eaa2:	462b      	mov	r3, r5
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	4629      	mov	r1, r5
 800eaa8:	f7f2 f868 	bl	8000b7c <__aeabi_dcmpun>
 800eaac:	b998      	cbnz	r0, 800ead6 <log+0x56>
 800eaae:	2200      	movs	r2, #0
 800eab0:	2300      	movs	r3, #0
 800eab2:	4620      	mov	r0, r4
 800eab4:	4629      	mov	r1, r5
 800eab6:	f7f2 f857 	bl	8000b68 <__aeabi_dcmpgt>
 800eaba:	b960      	cbnz	r0, 800ead6 <log+0x56>
 800eabc:	2200      	movs	r2, #0
 800eabe:	2300      	movs	r3, #0
 800eac0:	4620      	mov	r0, r4
 800eac2:	4629      	mov	r1, r5
 800eac4:	f7f2 f828 	bl	8000b18 <__aeabi_dcmpeq>
 800eac8:	b160      	cbz	r0, 800eae4 <log+0x64>
 800eaca:	f7fd f913 	bl	800bcf4 <__errno>
 800eace:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800eb00 <log+0x80>
 800ead2:	2322      	movs	r3, #34	; 0x22
 800ead4:	6003      	str	r3, [r0, #0]
 800ead6:	eeb0 0a48 	vmov.f32	s0, s16
 800eada:	eef0 0a68 	vmov.f32	s1, s17
 800eade:	ecbd 8b02 	vpop	{d8}
 800eae2:	bd38      	pop	{r3, r4, r5, pc}
 800eae4:	f7fd f906 	bl	800bcf4 <__errno>
 800eae8:	ecbd 8b02 	vpop	{d8}
 800eaec:	2321      	movs	r3, #33	; 0x21
 800eaee:	6003      	str	r3, [r0, #0]
 800eaf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaf4:	4805      	ldr	r0, [pc, #20]	; (800eb0c <log+0x8c>)
 800eaf6:	f001 b863 	b.w	800fbc0 <nan>
 800eafa:	bf00      	nop
 800eafc:	f3af 8000 	nop.w
 800eb00:	00000000 	.word	0x00000000
 800eb04:	fff00000 	.word	0xfff00000
 800eb08:	20000204 	.word	0x20000204
 800eb0c:	08010300 	.word	0x08010300

0800eb10 <pow>:
 800eb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb14:	ec59 8b10 	vmov	r8, r9, d0
 800eb18:	ec57 6b11 	vmov	r6, r7, d1
 800eb1c:	f000 fa64 	bl	800efe8 <__ieee754_pow>
 800eb20:	4b4e      	ldr	r3, [pc, #312]	; (800ec5c <pow+0x14c>)
 800eb22:	f993 3000 	ldrsb.w	r3, [r3]
 800eb26:	3301      	adds	r3, #1
 800eb28:	ec55 4b10 	vmov	r4, r5, d0
 800eb2c:	d015      	beq.n	800eb5a <pow+0x4a>
 800eb2e:	4632      	mov	r2, r6
 800eb30:	463b      	mov	r3, r7
 800eb32:	4630      	mov	r0, r6
 800eb34:	4639      	mov	r1, r7
 800eb36:	f7f2 f821 	bl	8000b7c <__aeabi_dcmpun>
 800eb3a:	b970      	cbnz	r0, 800eb5a <pow+0x4a>
 800eb3c:	4642      	mov	r2, r8
 800eb3e:	464b      	mov	r3, r9
 800eb40:	4640      	mov	r0, r8
 800eb42:	4649      	mov	r1, r9
 800eb44:	f7f2 f81a 	bl	8000b7c <__aeabi_dcmpun>
 800eb48:	2200      	movs	r2, #0
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	b148      	cbz	r0, 800eb62 <pow+0x52>
 800eb4e:	4630      	mov	r0, r6
 800eb50:	4639      	mov	r1, r7
 800eb52:	f7f1 ffe1 	bl	8000b18 <__aeabi_dcmpeq>
 800eb56:	2800      	cmp	r0, #0
 800eb58:	d17d      	bne.n	800ec56 <pow+0x146>
 800eb5a:	ec45 4b10 	vmov	d0, r4, r5
 800eb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb62:	4640      	mov	r0, r8
 800eb64:	4649      	mov	r1, r9
 800eb66:	f7f1 ffd7 	bl	8000b18 <__aeabi_dcmpeq>
 800eb6a:	b1e0      	cbz	r0, 800eba6 <pow+0x96>
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	2300      	movs	r3, #0
 800eb70:	4630      	mov	r0, r6
 800eb72:	4639      	mov	r1, r7
 800eb74:	f7f1 ffd0 	bl	8000b18 <__aeabi_dcmpeq>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d16c      	bne.n	800ec56 <pow+0x146>
 800eb7c:	ec47 6b10 	vmov	d0, r6, r7
 800eb80:	f001 f811 	bl	800fba6 <finite>
 800eb84:	2800      	cmp	r0, #0
 800eb86:	d0e8      	beq.n	800eb5a <pow+0x4a>
 800eb88:	2200      	movs	r2, #0
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	4639      	mov	r1, r7
 800eb90:	f7f1 ffcc 	bl	8000b2c <__aeabi_dcmplt>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	d0e0      	beq.n	800eb5a <pow+0x4a>
 800eb98:	f7fd f8ac 	bl	800bcf4 <__errno>
 800eb9c:	2321      	movs	r3, #33	; 0x21
 800eb9e:	6003      	str	r3, [r0, #0]
 800eba0:	2400      	movs	r4, #0
 800eba2:	4d2f      	ldr	r5, [pc, #188]	; (800ec60 <pow+0x150>)
 800eba4:	e7d9      	b.n	800eb5a <pow+0x4a>
 800eba6:	ec45 4b10 	vmov	d0, r4, r5
 800ebaa:	f000 fffc 	bl	800fba6 <finite>
 800ebae:	bbb8      	cbnz	r0, 800ec20 <pow+0x110>
 800ebb0:	ec49 8b10 	vmov	d0, r8, r9
 800ebb4:	f000 fff7 	bl	800fba6 <finite>
 800ebb8:	b390      	cbz	r0, 800ec20 <pow+0x110>
 800ebba:	ec47 6b10 	vmov	d0, r6, r7
 800ebbe:	f000 fff2 	bl	800fba6 <finite>
 800ebc2:	b368      	cbz	r0, 800ec20 <pow+0x110>
 800ebc4:	4622      	mov	r2, r4
 800ebc6:	462b      	mov	r3, r5
 800ebc8:	4620      	mov	r0, r4
 800ebca:	4629      	mov	r1, r5
 800ebcc:	f7f1 ffd6 	bl	8000b7c <__aeabi_dcmpun>
 800ebd0:	b160      	cbz	r0, 800ebec <pow+0xdc>
 800ebd2:	f7fd f88f 	bl	800bcf4 <__errno>
 800ebd6:	2321      	movs	r3, #33	; 0x21
 800ebd8:	6003      	str	r3, [r0, #0]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	2300      	movs	r3, #0
 800ebde:	4610      	mov	r0, r2
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	f7f1 fe5b 	bl	800089c <__aeabi_ddiv>
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	460d      	mov	r5, r1
 800ebea:	e7b6      	b.n	800eb5a <pow+0x4a>
 800ebec:	f7fd f882 	bl	800bcf4 <__errno>
 800ebf0:	2322      	movs	r3, #34	; 0x22
 800ebf2:	6003      	str	r3, [r0, #0]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	4640      	mov	r0, r8
 800ebfa:	4649      	mov	r1, r9
 800ebfc:	f7f1 ff96 	bl	8000b2c <__aeabi_dcmplt>
 800ec00:	2400      	movs	r4, #0
 800ec02:	b158      	cbz	r0, 800ec1c <pow+0x10c>
 800ec04:	ec47 6b10 	vmov	d0, r6, r7
 800ec08:	f000 ffe2 	bl	800fbd0 <rint>
 800ec0c:	4632      	mov	r2, r6
 800ec0e:	ec51 0b10 	vmov	r0, r1, d0
 800ec12:	463b      	mov	r3, r7
 800ec14:	f7f1 ff80 	bl	8000b18 <__aeabi_dcmpeq>
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	d0c2      	beq.n	800eba2 <pow+0x92>
 800ec1c:	4d11      	ldr	r5, [pc, #68]	; (800ec64 <pow+0x154>)
 800ec1e:	e79c      	b.n	800eb5a <pow+0x4a>
 800ec20:	2200      	movs	r2, #0
 800ec22:	2300      	movs	r3, #0
 800ec24:	4620      	mov	r0, r4
 800ec26:	4629      	mov	r1, r5
 800ec28:	f7f1 ff76 	bl	8000b18 <__aeabi_dcmpeq>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d094      	beq.n	800eb5a <pow+0x4a>
 800ec30:	ec49 8b10 	vmov	d0, r8, r9
 800ec34:	f000 ffb7 	bl	800fba6 <finite>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	d08e      	beq.n	800eb5a <pow+0x4a>
 800ec3c:	ec47 6b10 	vmov	d0, r6, r7
 800ec40:	f000 ffb1 	bl	800fba6 <finite>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	d088      	beq.n	800eb5a <pow+0x4a>
 800ec48:	f7fd f854 	bl	800bcf4 <__errno>
 800ec4c:	2322      	movs	r3, #34	; 0x22
 800ec4e:	6003      	str	r3, [r0, #0]
 800ec50:	2400      	movs	r4, #0
 800ec52:	2500      	movs	r5, #0
 800ec54:	e781      	b.n	800eb5a <pow+0x4a>
 800ec56:	4d04      	ldr	r5, [pc, #16]	; (800ec68 <pow+0x158>)
 800ec58:	2400      	movs	r4, #0
 800ec5a:	e77e      	b.n	800eb5a <pow+0x4a>
 800ec5c:	20000204 	.word	0x20000204
 800ec60:	fff00000 	.word	0xfff00000
 800ec64:	7ff00000 	.word	0x7ff00000
 800ec68:	3ff00000 	.word	0x3ff00000
 800ec6c:	00000000 	.word	0x00000000

0800ec70 <__ieee754_log>:
 800ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	ec51 0b10 	vmov	r0, r1, d0
 800ec78:	ed2d 8b04 	vpush	{d8-d9}
 800ec7c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ec80:	b083      	sub	sp, #12
 800ec82:	460d      	mov	r5, r1
 800ec84:	da29      	bge.n	800ecda <__ieee754_log+0x6a>
 800ec86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec8a:	4303      	orrs	r3, r0
 800ec8c:	ee10 2a10 	vmov	r2, s0
 800ec90:	d10c      	bne.n	800ecac <__ieee754_log+0x3c>
 800ec92:	49cf      	ldr	r1, [pc, #828]	; (800efd0 <__ieee754_log+0x360>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	2300      	movs	r3, #0
 800ec98:	2000      	movs	r0, #0
 800ec9a:	f7f1 fdff 	bl	800089c <__aeabi_ddiv>
 800ec9e:	ec41 0b10 	vmov	d0, r0, r1
 800eca2:	b003      	add	sp, #12
 800eca4:	ecbd 8b04 	vpop	{d8-d9}
 800eca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecac:	2900      	cmp	r1, #0
 800ecae:	da05      	bge.n	800ecbc <__ieee754_log+0x4c>
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	f7f1 fb11 	bl	80002d8 <__aeabi_dsub>
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	2300      	movs	r3, #0
 800ecba:	e7ee      	b.n	800ec9a <__ieee754_log+0x2a>
 800ecbc:	4bc5      	ldr	r3, [pc, #788]	; (800efd4 <__ieee754_log+0x364>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f7f1 fcc2 	bl	8000648 <__aeabi_dmul>
 800ecc4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ecc8:	460d      	mov	r5, r1
 800ecca:	4ac3      	ldr	r2, [pc, #780]	; (800efd8 <__ieee754_log+0x368>)
 800eccc:	4295      	cmp	r5, r2
 800ecce:	dd06      	ble.n	800ecde <__ieee754_log+0x6e>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	f7f1 fb02 	bl	80002dc <__adddf3>
 800ecd8:	e7e1      	b.n	800ec9e <__ieee754_log+0x2e>
 800ecda:	2300      	movs	r3, #0
 800ecdc:	e7f5      	b.n	800ecca <__ieee754_log+0x5a>
 800ecde:	152c      	asrs	r4, r5, #20
 800ece0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ece4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ece8:	441c      	add	r4, r3
 800ecea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ecee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ecf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ecf6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ecfa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ecfe:	ea42 0105 	orr.w	r1, r2, r5
 800ed02:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ed06:	2200      	movs	r2, #0
 800ed08:	4bb4      	ldr	r3, [pc, #720]	; (800efdc <__ieee754_log+0x36c>)
 800ed0a:	f7f1 fae5 	bl	80002d8 <__aeabi_dsub>
 800ed0e:	1cab      	adds	r3, r5, #2
 800ed10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed14:	2b02      	cmp	r3, #2
 800ed16:	4682      	mov	sl, r0
 800ed18:	468b      	mov	fp, r1
 800ed1a:	f04f 0200 	mov.w	r2, #0
 800ed1e:	dc53      	bgt.n	800edc8 <__ieee754_log+0x158>
 800ed20:	2300      	movs	r3, #0
 800ed22:	f7f1 fef9 	bl	8000b18 <__aeabi_dcmpeq>
 800ed26:	b1d0      	cbz	r0, 800ed5e <__ieee754_log+0xee>
 800ed28:	2c00      	cmp	r4, #0
 800ed2a:	f000 8122 	beq.w	800ef72 <__ieee754_log+0x302>
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f7f1 fc20 	bl	8000574 <__aeabi_i2d>
 800ed34:	a390      	add	r3, pc, #576	; (adr r3, 800ef78 <__ieee754_log+0x308>)
 800ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3a:	4606      	mov	r6, r0
 800ed3c:	460f      	mov	r7, r1
 800ed3e:	f7f1 fc83 	bl	8000648 <__aeabi_dmul>
 800ed42:	a38f      	add	r3, pc, #572	; (adr r3, 800ef80 <__ieee754_log+0x310>)
 800ed44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed48:	4604      	mov	r4, r0
 800ed4a:	460d      	mov	r5, r1
 800ed4c:	4630      	mov	r0, r6
 800ed4e:	4639      	mov	r1, r7
 800ed50:	f7f1 fc7a 	bl	8000648 <__aeabi_dmul>
 800ed54:	4602      	mov	r2, r0
 800ed56:	460b      	mov	r3, r1
 800ed58:	4620      	mov	r0, r4
 800ed5a:	4629      	mov	r1, r5
 800ed5c:	e7ba      	b.n	800ecd4 <__ieee754_log+0x64>
 800ed5e:	a38a      	add	r3, pc, #552	; (adr r3, 800ef88 <__ieee754_log+0x318>)
 800ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed64:	4650      	mov	r0, sl
 800ed66:	4659      	mov	r1, fp
 800ed68:	f7f1 fc6e 	bl	8000648 <__aeabi_dmul>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	460b      	mov	r3, r1
 800ed70:	2000      	movs	r0, #0
 800ed72:	499b      	ldr	r1, [pc, #620]	; (800efe0 <__ieee754_log+0x370>)
 800ed74:	f7f1 fab0 	bl	80002d8 <__aeabi_dsub>
 800ed78:	4652      	mov	r2, sl
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	460f      	mov	r7, r1
 800ed7e:	465b      	mov	r3, fp
 800ed80:	4650      	mov	r0, sl
 800ed82:	4659      	mov	r1, fp
 800ed84:	f7f1 fc60 	bl	8000648 <__aeabi_dmul>
 800ed88:	4602      	mov	r2, r0
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	4639      	mov	r1, r7
 800ed90:	f7f1 fc5a 	bl	8000648 <__aeabi_dmul>
 800ed94:	4606      	mov	r6, r0
 800ed96:	460f      	mov	r7, r1
 800ed98:	b914      	cbnz	r4, 800eda0 <__ieee754_log+0x130>
 800ed9a:	4632      	mov	r2, r6
 800ed9c:	463b      	mov	r3, r7
 800ed9e:	e0a2      	b.n	800eee6 <__ieee754_log+0x276>
 800eda0:	4620      	mov	r0, r4
 800eda2:	f7f1 fbe7 	bl	8000574 <__aeabi_i2d>
 800eda6:	a374      	add	r3, pc, #464	; (adr r3, 800ef78 <__ieee754_log+0x308>)
 800eda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edac:	4680      	mov	r8, r0
 800edae:	4689      	mov	r9, r1
 800edb0:	f7f1 fc4a 	bl	8000648 <__aeabi_dmul>
 800edb4:	a372      	add	r3, pc, #456	; (adr r3, 800ef80 <__ieee754_log+0x310>)
 800edb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edba:	4604      	mov	r4, r0
 800edbc:	460d      	mov	r5, r1
 800edbe:	4640      	mov	r0, r8
 800edc0:	4649      	mov	r1, r9
 800edc2:	f7f1 fc41 	bl	8000648 <__aeabi_dmul>
 800edc6:	e0a7      	b.n	800ef18 <__ieee754_log+0x2a8>
 800edc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800edcc:	f7f1 fa86 	bl	80002dc <__adddf3>
 800edd0:	4602      	mov	r2, r0
 800edd2:	460b      	mov	r3, r1
 800edd4:	4650      	mov	r0, sl
 800edd6:	4659      	mov	r1, fp
 800edd8:	f7f1 fd60 	bl	800089c <__aeabi_ddiv>
 800eddc:	ec41 0b18 	vmov	d8, r0, r1
 800ede0:	4620      	mov	r0, r4
 800ede2:	f7f1 fbc7 	bl	8000574 <__aeabi_i2d>
 800ede6:	ec53 2b18 	vmov	r2, r3, d8
 800edea:	ec41 0b19 	vmov	d9, r0, r1
 800edee:	ec51 0b18 	vmov	r0, r1, d8
 800edf2:	f7f1 fc29 	bl	8000648 <__aeabi_dmul>
 800edf6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800edfa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800edfe:	9301      	str	r3, [sp, #4]
 800ee00:	4602      	mov	r2, r0
 800ee02:	460b      	mov	r3, r1
 800ee04:	4680      	mov	r8, r0
 800ee06:	4689      	mov	r9, r1
 800ee08:	f7f1 fc1e 	bl	8000648 <__aeabi_dmul>
 800ee0c:	a360      	add	r3, pc, #384	; (adr r3, 800ef90 <__ieee754_log+0x320>)
 800ee0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee12:	4606      	mov	r6, r0
 800ee14:	460f      	mov	r7, r1
 800ee16:	f7f1 fc17 	bl	8000648 <__aeabi_dmul>
 800ee1a:	a35f      	add	r3, pc, #380	; (adr r3, 800ef98 <__ieee754_log+0x328>)
 800ee1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee20:	f7f1 fa5c 	bl	80002dc <__adddf3>
 800ee24:	4632      	mov	r2, r6
 800ee26:	463b      	mov	r3, r7
 800ee28:	f7f1 fc0e 	bl	8000648 <__aeabi_dmul>
 800ee2c:	a35c      	add	r3, pc, #368	; (adr r3, 800efa0 <__ieee754_log+0x330>)
 800ee2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee32:	f7f1 fa53 	bl	80002dc <__adddf3>
 800ee36:	4632      	mov	r2, r6
 800ee38:	463b      	mov	r3, r7
 800ee3a:	f7f1 fc05 	bl	8000648 <__aeabi_dmul>
 800ee3e:	a35a      	add	r3, pc, #360	; (adr r3, 800efa8 <__ieee754_log+0x338>)
 800ee40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee44:	f7f1 fa4a 	bl	80002dc <__adddf3>
 800ee48:	4642      	mov	r2, r8
 800ee4a:	464b      	mov	r3, r9
 800ee4c:	f7f1 fbfc 	bl	8000648 <__aeabi_dmul>
 800ee50:	a357      	add	r3, pc, #348	; (adr r3, 800efb0 <__ieee754_log+0x340>)
 800ee52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee56:	4680      	mov	r8, r0
 800ee58:	4689      	mov	r9, r1
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	4639      	mov	r1, r7
 800ee5e:	f7f1 fbf3 	bl	8000648 <__aeabi_dmul>
 800ee62:	a355      	add	r3, pc, #340	; (adr r3, 800efb8 <__ieee754_log+0x348>)
 800ee64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee68:	f7f1 fa38 	bl	80002dc <__adddf3>
 800ee6c:	4632      	mov	r2, r6
 800ee6e:	463b      	mov	r3, r7
 800ee70:	f7f1 fbea 	bl	8000648 <__aeabi_dmul>
 800ee74:	a352      	add	r3, pc, #328	; (adr r3, 800efc0 <__ieee754_log+0x350>)
 800ee76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7a:	f7f1 fa2f 	bl	80002dc <__adddf3>
 800ee7e:	4632      	mov	r2, r6
 800ee80:	463b      	mov	r3, r7
 800ee82:	f7f1 fbe1 	bl	8000648 <__aeabi_dmul>
 800ee86:	460b      	mov	r3, r1
 800ee88:	4602      	mov	r2, r0
 800ee8a:	4649      	mov	r1, r9
 800ee8c:	4640      	mov	r0, r8
 800ee8e:	f7f1 fa25 	bl	80002dc <__adddf3>
 800ee92:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ee96:	9b01      	ldr	r3, [sp, #4]
 800ee98:	3551      	adds	r5, #81	; 0x51
 800ee9a:	431d      	orrs	r5, r3
 800ee9c:	2d00      	cmp	r5, #0
 800ee9e:	4680      	mov	r8, r0
 800eea0:	4689      	mov	r9, r1
 800eea2:	dd48      	ble.n	800ef36 <__ieee754_log+0x2c6>
 800eea4:	4b4e      	ldr	r3, [pc, #312]	; (800efe0 <__ieee754_log+0x370>)
 800eea6:	2200      	movs	r2, #0
 800eea8:	4650      	mov	r0, sl
 800eeaa:	4659      	mov	r1, fp
 800eeac:	f7f1 fbcc 	bl	8000648 <__aeabi_dmul>
 800eeb0:	4652      	mov	r2, sl
 800eeb2:	465b      	mov	r3, fp
 800eeb4:	f7f1 fbc8 	bl	8000648 <__aeabi_dmul>
 800eeb8:	4602      	mov	r2, r0
 800eeba:	460b      	mov	r3, r1
 800eebc:	4606      	mov	r6, r0
 800eebe:	460f      	mov	r7, r1
 800eec0:	4640      	mov	r0, r8
 800eec2:	4649      	mov	r1, r9
 800eec4:	f7f1 fa0a 	bl	80002dc <__adddf3>
 800eec8:	ec53 2b18 	vmov	r2, r3, d8
 800eecc:	f7f1 fbbc 	bl	8000648 <__aeabi_dmul>
 800eed0:	4680      	mov	r8, r0
 800eed2:	4689      	mov	r9, r1
 800eed4:	b964      	cbnz	r4, 800eef0 <__ieee754_log+0x280>
 800eed6:	4602      	mov	r2, r0
 800eed8:	460b      	mov	r3, r1
 800eeda:	4630      	mov	r0, r6
 800eedc:	4639      	mov	r1, r7
 800eede:	f7f1 f9fb 	bl	80002d8 <__aeabi_dsub>
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	4650      	mov	r0, sl
 800eee8:	4659      	mov	r1, fp
 800eeea:	f7f1 f9f5 	bl	80002d8 <__aeabi_dsub>
 800eeee:	e6d6      	b.n	800ec9e <__ieee754_log+0x2e>
 800eef0:	a321      	add	r3, pc, #132	; (adr r3, 800ef78 <__ieee754_log+0x308>)
 800eef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef6:	ec51 0b19 	vmov	r0, r1, d9
 800eefa:	f7f1 fba5 	bl	8000648 <__aeabi_dmul>
 800eefe:	a320      	add	r3, pc, #128	; (adr r3, 800ef80 <__ieee754_log+0x310>)
 800ef00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef04:	4604      	mov	r4, r0
 800ef06:	460d      	mov	r5, r1
 800ef08:	ec51 0b19 	vmov	r0, r1, d9
 800ef0c:	f7f1 fb9c 	bl	8000648 <__aeabi_dmul>
 800ef10:	4642      	mov	r2, r8
 800ef12:	464b      	mov	r3, r9
 800ef14:	f7f1 f9e2 	bl	80002dc <__adddf3>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	4639      	mov	r1, r7
 800ef20:	f7f1 f9da 	bl	80002d8 <__aeabi_dsub>
 800ef24:	4652      	mov	r2, sl
 800ef26:	465b      	mov	r3, fp
 800ef28:	f7f1 f9d6 	bl	80002d8 <__aeabi_dsub>
 800ef2c:	4602      	mov	r2, r0
 800ef2e:	460b      	mov	r3, r1
 800ef30:	4620      	mov	r0, r4
 800ef32:	4629      	mov	r1, r5
 800ef34:	e7d9      	b.n	800eeea <__ieee754_log+0x27a>
 800ef36:	4602      	mov	r2, r0
 800ef38:	460b      	mov	r3, r1
 800ef3a:	4650      	mov	r0, sl
 800ef3c:	4659      	mov	r1, fp
 800ef3e:	f7f1 f9cb 	bl	80002d8 <__aeabi_dsub>
 800ef42:	ec53 2b18 	vmov	r2, r3, d8
 800ef46:	f7f1 fb7f 	bl	8000648 <__aeabi_dmul>
 800ef4a:	4606      	mov	r6, r0
 800ef4c:	460f      	mov	r7, r1
 800ef4e:	2c00      	cmp	r4, #0
 800ef50:	f43f af23 	beq.w	800ed9a <__ieee754_log+0x12a>
 800ef54:	a308      	add	r3, pc, #32	; (adr r3, 800ef78 <__ieee754_log+0x308>)
 800ef56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5a:	ec51 0b19 	vmov	r0, r1, d9
 800ef5e:	f7f1 fb73 	bl	8000648 <__aeabi_dmul>
 800ef62:	a307      	add	r3, pc, #28	; (adr r3, 800ef80 <__ieee754_log+0x310>)
 800ef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef68:	4604      	mov	r4, r0
 800ef6a:	460d      	mov	r5, r1
 800ef6c:	ec51 0b19 	vmov	r0, r1, d9
 800ef70:	e727      	b.n	800edc2 <__ieee754_log+0x152>
 800ef72:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800efc8 <__ieee754_log+0x358>
 800ef76:	e694      	b.n	800eca2 <__ieee754_log+0x32>
 800ef78:	fee00000 	.word	0xfee00000
 800ef7c:	3fe62e42 	.word	0x3fe62e42
 800ef80:	35793c76 	.word	0x35793c76
 800ef84:	3dea39ef 	.word	0x3dea39ef
 800ef88:	55555555 	.word	0x55555555
 800ef8c:	3fd55555 	.word	0x3fd55555
 800ef90:	df3e5244 	.word	0xdf3e5244
 800ef94:	3fc2f112 	.word	0x3fc2f112
 800ef98:	96cb03de 	.word	0x96cb03de
 800ef9c:	3fc74664 	.word	0x3fc74664
 800efa0:	94229359 	.word	0x94229359
 800efa4:	3fd24924 	.word	0x3fd24924
 800efa8:	55555593 	.word	0x55555593
 800efac:	3fe55555 	.word	0x3fe55555
 800efb0:	d078c69f 	.word	0xd078c69f
 800efb4:	3fc39a09 	.word	0x3fc39a09
 800efb8:	1d8e78af 	.word	0x1d8e78af
 800efbc:	3fcc71c5 	.word	0x3fcc71c5
 800efc0:	9997fa04 	.word	0x9997fa04
 800efc4:	3fd99999 	.word	0x3fd99999
	...
 800efd0:	c3500000 	.word	0xc3500000
 800efd4:	43500000 	.word	0x43500000
 800efd8:	7fefffff 	.word	0x7fefffff
 800efdc:	3ff00000 	.word	0x3ff00000
 800efe0:	3fe00000 	.word	0x3fe00000
 800efe4:	00000000 	.word	0x00000000

0800efe8 <__ieee754_pow>:
 800efe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efec:	ed2d 8b06 	vpush	{d8-d10}
 800eff0:	b08d      	sub	sp, #52	; 0x34
 800eff2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800eff6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800effa:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800effe:	ea56 0100 	orrs.w	r1, r6, r0
 800f002:	ec53 2b10 	vmov	r2, r3, d0
 800f006:	f000 84d1 	beq.w	800f9ac <__ieee754_pow+0x9c4>
 800f00a:	497f      	ldr	r1, [pc, #508]	; (800f208 <__ieee754_pow+0x220>)
 800f00c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800f010:	428c      	cmp	r4, r1
 800f012:	ee10 8a10 	vmov	r8, s0
 800f016:	4699      	mov	r9, r3
 800f018:	dc09      	bgt.n	800f02e <__ieee754_pow+0x46>
 800f01a:	d103      	bne.n	800f024 <__ieee754_pow+0x3c>
 800f01c:	b97a      	cbnz	r2, 800f03e <__ieee754_pow+0x56>
 800f01e:	42a6      	cmp	r6, r4
 800f020:	dd02      	ble.n	800f028 <__ieee754_pow+0x40>
 800f022:	e00c      	b.n	800f03e <__ieee754_pow+0x56>
 800f024:	428e      	cmp	r6, r1
 800f026:	dc02      	bgt.n	800f02e <__ieee754_pow+0x46>
 800f028:	428e      	cmp	r6, r1
 800f02a:	d110      	bne.n	800f04e <__ieee754_pow+0x66>
 800f02c:	b178      	cbz	r0, 800f04e <__ieee754_pow+0x66>
 800f02e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f032:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f036:	ea54 0308 	orrs.w	r3, r4, r8
 800f03a:	f000 84b7 	beq.w	800f9ac <__ieee754_pow+0x9c4>
 800f03e:	4873      	ldr	r0, [pc, #460]	; (800f20c <__ieee754_pow+0x224>)
 800f040:	b00d      	add	sp, #52	; 0x34
 800f042:	ecbd 8b06 	vpop	{d8-d10}
 800f046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f04a:	f000 bdb9 	b.w	800fbc0 <nan>
 800f04e:	f1b9 0f00 	cmp.w	r9, #0
 800f052:	da36      	bge.n	800f0c2 <__ieee754_pow+0xda>
 800f054:	496e      	ldr	r1, [pc, #440]	; (800f210 <__ieee754_pow+0x228>)
 800f056:	428e      	cmp	r6, r1
 800f058:	dc51      	bgt.n	800f0fe <__ieee754_pow+0x116>
 800f05a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800f05e:	428e      	cmp	r6, r1
 800f060:	f340 84af 	ble.w	800f9c2 <__ieee754_pow+0x9da>
 800f064:	1531      	asrs	r1, r6, #20
 800f066:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f06a:	2914      	cmp	r1, #20
 800f06c:	dd0f      	ble.n	800f08e <__ieee754_pow+0xa6>
 800f06e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800f072:	fa20 fc01 	lsr.w	ip, r0, r1
 800f076:	fa0c f101 	lsl.w	r1, ip, r1
 800f07a:	4281      	cmp	r1, r0
 800f07c:	f040 84a1 	bne.w	800f9c2 <__ieee754_pow+0x9da>
 800f080:	f00c 0c01 	and.w	ip, ip, #1
 800f084:	f1cc 0102 	rsb	r1, ip, #2
 800f088:	9100      	str	r1, [sp, #0]
 800f08a:	b180      	cbz	r0, 800f0ae <__ieee754_pow+0xc6>
 800f08c:	e059      	b.n	800f142 <__ieee754_pow+0x15a>
 800f08e:	2800      	cmp	r0, #0
 800f090:	d155      	bne.n	800f13e <__ieee754_pow+0x156>
 800f092:	f1c1 0114 	rsb	r1, r1, #20
 800f096:	fa46 fc01 	asr.w	ip, r6, r1
 800f09a:	fa0c f101 	lsl.w	r1, ip, r1
 800f09e:	42b1      	cmp	r1, r6
 800f0a0:	f040 848c 	bne.w	800f9bc <__ieee754_pow+0x9d4>
 800f0a4:	f00c 0c01 	and.w	ip, ip, #1
 800f0a8:	f1cc 0102 	rsb	r1, ip, #2
 800f0ac:	9100      	str	r1, [sp, #0]
 800f0ae:	4959      	ldr	r1, [pc, #356]	; (800f214 <__ieee754_pow+0x22c>)
 800f0b0:	428e      	cmp	r6, r1
 800f0b2:	d12d      	bne.n	800f110 <__ieee754_pow+0x128>
 800f0b4:	2f00      	cmp	r7, #0
 800f0b6:	da79      	bge.n	800f1ac <__ieee754_pow+0x1c4>
 800f0b8:	4956      	ldr	r1, [pc, #344]	; (800f214 <__ieee754_pow+0x22c>)
 800f0ba:	2000      	movs	r0, #0
 800f0bc:	f7f1 fbee 	bl	800089c <__aeabi_ddiv>
 800f0c0:	e016      	b.n	800f0f0 <__ieee754_pow+0x108>
 800f0c2:	2100      	movs	r1, #0
 800f0c4:	9100      	str	r1, [sp, #0]
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	d13b      	bne.n	800f142 <__ieee754_pow+0x15a>
 800f0ca:	494f      	ldr	r1, [pc, #316]	; (800f208 <__ieee754_pow+0x220>)
 800f0cc:	428e      	cmp	r6, r1
 800f0ce:	d1ee      	bne.n	800f0ae <__ieee754_pow+0xc6>
 800f0d0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f0d4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f0d8:	ea53 0308 	orrs.w	r3, r3, r8
 800f0dc:	f000 8466 	beq.w	800f9ac <__ieee754_pow+0x9c4>
 800f0e0:	4b4d      	ldr	r3, [pc, #308]	; (800f218 <__ieee754_pow+0x230>)
 800f0e2:	429c      	cmp	r4, r3
 800f0e4:	dd0d      	ble.n	800f102 <__ieee754_pow+0x11a>
 800f0e6:	2f00      	cmp	r7, #0
 800f0e8:	f280 8464 	bge.w	800f9b4 <__ieee754_pow+0x9cc>
 800f0ec:	2000      	movs	r0, #0
 800f0ee:	2100      	movs	r1, #0
 800f0f0:	ec41 0b10 	vmov	d0, r0, r1
 800f0f4:	b00d      	add	sp, #52	; 0x34
 800f0f6:	ecbd 8b06 	vpop	{d8-d10}
 800f0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0fe:	2102      	movs	r1, #2
 800f100:	e7e0      	b.n	800f0c4 <__ieee754_pow+0xdc>
 800f102:	2f00      	cmp	r7, #0
 800f104:	daf2      	bge.n	800f0ec <__ieee754_pow+0x104>
 800f106:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800f10a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f10e:	e7ef      	b.n	800f0f0 <__ieee754_pow+0x108>
 800f110:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800f114:	d104      	bne.n	800f120 <__ieee754_pow+0x138>
 800f116:	4610      	mov	r0, r2
 800f118:	4619      	mov	r1, r3
 800f11a:	f7f1 fa95 	bl	8000648 <__aeabi_dmul>
 800f11e:	e7e7      	b.n	800f0f0 <__ieee754_pow+0x108>
 800f120:	493e      	ldr	r1, [pc, #248]	; (800f21c <__ieee754_pow+0x234>)
 800f122:	428f      	cmp	r7, r1
 800f124:	d10d      	bne.n	800f142 <__ieee754_pow+0x15a>
 800f126:	f1b9 0f00 	cmp.w	r9, #0
 800f12a:	db0a      	blt.n	800f142 <__ieee754_pow+0x15a>
 800f12c:	ec43 2b10 	vmov	d0, r2, r3
 800f130:	b00d      	add	sp, #52	; 0x34
 800f132:	ecbd 8b06 	vpop	{d8-d10}
 800f136:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f13a:	f000 bc77 	b.w	800fa2c <__ieee754_sqrt>
 800f13e:	2100      	movs	r1, #0
 800f140:	9100      	str	r1, [sp, #0]
 800f142:	ec43 2b10 	vmov	d0, r2, r3
 800f146:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f14a:	f000 fd23 	bl	800fb94 <fabs>
 800f14e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f152:	ec51 0b10 	vmov	r0, r1, d0
 800f156:	f1b8 0f00 	cmp.w	r8, #0
 800f15a:	d12a      	bne.n	800f1b2 <__ieee754_pow+0x1ca>
 800f15c:	b12c      	cbz	r4, 800f16a <__ieee754_pow+0x182>
 800f15e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800f214 <__ieee754_pow+0x22c>
 800f162:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800f166:	45e6      	cmp	lr, ip
 800f168:	d123      	bne.n	800f1b2 <__ieee754_pow+0x1ca>
 800f16a:	2f00      	cmp	r7, #0
 800f16c:	da05      	bge.n	800f17a <__ieee754_pow+0x192>
 800f16e:	4602      	mov	r2, r0
 800f170:	460b      	mov	r3, r1
 800f172:	2000      	movs	r0, #0
 800f174:	4927      	ldr	r1, [pc, #156]	; (800f214 <__ieee754_pow+0x22c>)
 800f176:	f7f1 fb91 	bl	800089c <__aeabi_ddiv>
 800f17a:	f1b9 0f00 	cmp.w	r9, #0
 800f17e:	dab7      	bge.n	800f0f0 <__ieee754_pow+0x108>
 800f180:	9b00      	ldr	r3, [sp, #0]
 800f182:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f186:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f18a:	4323      	orrs	r3, r4
 800f18c:	d108      	bne.n	800f1a0 <__ieee754_pow+0x1b8>
 800f18e:	4602      	mov	r2, r0
 800f190:	460b      	mov	r3, r1
 800f192:	4610      	mov	r0, r2
 800f194:	4619      	mov	r1, r3
 800f196:	f7f1 f89f 	bl	80002d8 <__aeabi_dsub>
 800f19a:	4602      	mov	r2, r0
 800f19c:	460b      	mov	r3, r1
 800f19e:	e78d      	b.n	800f0bc <__ieee754_pow+0xd4>
 800f1a0:	9b00      	ldr	r3, [sp, #0]
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d1a4      	bne.n	800f0f0 <__ieee754_pow+0x108>
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1ac:	4610      	mov	r0, r2
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	e79e      	b.n	800f0f0 <__ieee754_pow+0x108>
 800f1b2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800f1b6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800f1ba:	950a      	str	r5, [sp, #40]	; 0x28
 800f1bc:	9d00      	ldr	r5, [sp, #0]
 800f1be:	46ac      	mov	ip, r5
 800f1c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f1c2:	ea5c 0505 	orrs.w	r5, ip, r5
 800f1c6:	d0e4      	beq.n	800f192 <__ieee754_pow+0x1aa>
 800f1c8:	4b15      	ldr	r3, [pc, #84]	; (800f220 <__ieee754_pow+0x238>)
 800f1ca:	429e      	cmp	r6, r3
 800f1cc:	f340 80fc 	ble.w	800f3c8 <__ieee754_pow+0x3e0>
 800f1d0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f1d4:	429e      	cmp	r6, r3
 800f1d6:	4b10      	ldr	r3, [pc, #64]	; (800f218 <__ieee754_pow+0x230>)
 800f1d8:	dd07      	ble.n	800f1ea <__ieee754_pow+0x202>
 800f1da:	429c      	cmp	r4, r3
 800f1dc:	dc0a      	bgt.n	800f1f4 <__ieee754_pow+0x20c>
 800f1de:	2f00      	cmp	r7, #0
 800f1e0:	da84      	bge.n	800f0ec <__ieee754_pow+0x104>
 800f1e2:	a307      	add	r3, pc, #28	; (adr r3, 800f200 <__ieee754_pow+0x218>)
 800f1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e8:	e795      	b.n	800f116 <__ieee754_pow+0x12e>
 800f1ea:	429c      	cmp	r4, r3
 800f1ec:	dbf7      	blt.n	800f1de <__ieee754_pow+0x1f6>
 800f1ee:	4b09      	ldr	r3, [pc, #36]	; (800f214 <__ieee754_pow+0x22c>)
 800f1f0:	429c      	cmp	r4, r3
 800f1f2:	dd17      	ble.n	800f224 <__ieee754_pow+0x23c>
 800f1f4:	2f00      	cmp	r7, #0
 800f1f6:	dcf4      	bgt.n	800f1e2 <__ieee754_pow+0x1fa>
 800f1f8:	e778      	b.n	800f0ec <__ieee754_pow+0x104>
 800f1fa:	bf00      	nop
 800f1fc:	f3af 8000 	nop.w
 800f200:	8800759c 	.word	0x8800759c
 800f204:	7e37e43c 	.word	0x7e37e43c
 800f208:	7ff00000 	.word	0x7ff00000
 800f20c:	08010300 	.word	0x08010300
 800f210:	433fffff 	.word	0x433fffff
 800f214:	3ff00000 	.word	0x3ff00000
 800f218:	3fefffff 	.word	0x3fefffff
 800f21c:	3fe00000 	.word	0x3fe00000
 800f220:	41e00000 	.word	0x41e00000
 800f224:	4b64      	ldr	r3, [pc, #400]	; (800f3b8 <__ieee754_pow+0x3d0>)
 800f226:	2200      	movs	r2, #0
 800f228:	f7f1 f856 	bl	80002d8 <__aeabi_dsub>
 800f22c:	a356      	add	r3, pc, #344	; (adr r3, 800f388 <__ieee754_pow+0x3a0>)
 800f22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f232:	4604      	mov	r4, r0
 800f234:	460d      	mov	r5, r1
 800f236:	f7f1 fa07 	bl	8000648 <__aeabi_dmul>
 800f23a:	a355      	add	r3, pc, #340	; (adr r3, 800f390 <__ieee754_pow+0x3a8>)
 800f23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f240:	4606      	mov	r6, r0
 800f242:	460f      	mov	r7, r1
 800f244:	4620      	mov	r0, r4
 800f246:	4629      	mov	r1, r5
 800f248:	f7f1 f9fe 	bl	8000648 <__aeabi_dmul>
 800f24c:	4b5b      	ldr	r3, [pc, #364]	; (800f3bc <__ieee754_pow+0x3d4>)
 800f24e:	4682      	mov	sl, r0
 800f250:	468b      	mov	fp, r1
 800f252:	2200      	movs	r2, #0
 800f254:	4620      	mov	r0, r4
 800f256:	4629      	mov	r1, r5
 800f258:	f7f1 f9f6 	bl	8000648 <__aeabi_dmul>
 800f25c:	4602      	mov	r2, r0
 800f25e:	460b      	mov	r3, r1
 800f260:	a14d      	add	r1, pc, #308	; (adr r1, 800f398 <__ieee754_pow+0x3b0>)
 800f262:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f266:	f7f1 f837 	bl	80002d8 <__aeabi_dsub>
 800f26a:	4622      	mov	r2, r4
 800f26c:	462b      	mov	r3, r5
 800f26e:	f7f1 f9eb 	bl	8000648 <__aeabi_dmul>
 800f272:	4602      	mov	r2, r0
 800f274:	460b      	mov	r3, r1
 800f276:	2000      	movs	r0, #0
 800f278:	4951      	ldr	r1, [pc, #324]	; (800f3c0 <__ieee754_pow+0x3d8>)
 800f27a:	f7f1 f82d 	bl	80002d8 <__aeabi_dsub>
 800f27e:	4622      	mov	r2, r4
 800f280:	4680      	mov	r8, r0
 800f282:	4689      	mov	r9, r1
 800f284:	462b      	mov	r3, r5
 800f286:	4620      	mov	r0, r4
 800f288:	4629      	mov	r1, r5
 800f28a:	f7f1 f9dd 	bl	8000648 <__aeabi_dmul>
 800f28e:	4602      	mov	r2, r0
 800f290:	460b      	mov	r3, r1
 800f292:	4640      	mov	r0, r8
 800f294:	4649      	mov	r1, r9
 800f296:	f7f1 f9d7 	bl	8000648 <__aeabi_dmul>
 800f29a:	a341      	add	r3, pc, #260	; (adr r3, 800f3a0 <__ieee754_pow+0x3b8>)
 800f29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a0:	f7f1 f9d2 	bl	8000648 <__aeabi_dmul>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	460b      	mov	r3, r1
 800f2a8:	4650      	mov	r0, sl
 800f2aa:	4659      	mov	r1, fp
 800f2ac:	f7f1 f814 	bl	80002d8 <__aeabi_dsub>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	4680      	mov	r8, r0
 800f2b6:	4689      	mov	r9, r1
 800f2b8:	4630      	mov	r0, r6
 800f2ba:	4639      	mov	r1, r7
 800f2bc:	f7f1 f80e 	bl	80002dc <__adddf3>
 800f2c0:	2400      	movs	r4, #0
 800f2c2:	4632      	mov	r2, r6
 800f2c4:	463b      	mov	r3, r7
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	460d      	mov	r5, r1
 800f2ca:	f7f1 f805 	bl	80002d8 <__aeabi_dsub>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	4640      	mov	r0, r8
 800f2d4:	4649      	mov	r1, r9
 800f2d6:	f7f0 ffff 	bl	80002d8 <__aeabi_dsub>
 800f2da:	9b00      	ldr	r3, [sp, #0]
 800f2dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	4313      	orrs	r3, r2
 800f2e2:	4682      	mov	sl, r0
 800f2e4:	468b      	mov	fp, r1
 800f2e6:	f040 81f1 	bne.w	800f6cc <__ieee754_pow+0x6e4>
 800f2ea:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800f3a8 <__ieee754_pow+0x3c0>
 800f2ee:	eeb0 8a47 	vmov.f32	s16, s14
 800f2f2:	eef0 8a67 	vmov.f32	s17, s15
 800f2f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f2fa:	2600      	movs	r6, #0
 800f2fc:	4632      	mov	r2, r6
 800f2fe:	463b      	mov	r3, r7
 800f300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f304:	f7f0 ffe8 	bl	80002d8 <__aeabi_dsub>
 800f308:	4622      	mov	r2, r4
 800f30a:	462b      	mov	r3, r5
 800f30c:	f7f1 f99c 	bl	8000648 <__aeabi_dmul>
 800f310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f314:	4680      	mov	r8, r0
 800f316:	4689      	mov	r9, r1
 800f318:	4650      	mov	r0, sl
 800f31a:	4659      	mov	r1, fp
 800f31c:	f7f1 f994 	bl	8000648 <__aeabi_dmul>
 800f320:	4602      	mov	r2, r0
 800f322:	460b      	mov	r3, r1
 800f324:	4640      	mov	r0, r8
 800f326:	4649      	mov	r1, r9
 800f328:	f7f0 ffd8 	bl	80002dc <__adddf3>
 800f32c:	4632      	mov	r2, r6
 800f32e:	463b      	mov	r3, r7
 800f330:	4680      	mov	r8, r0
 800f332:	4689      	mov	r9, r1
 800f334:	4620      	mov	r0, r4
 800f336:	4629      	mov	r1, r5
 800f338:	f7f1 f986 	bl	8000648 <__aeabi_dmul>
 800f33c:	460b      	mov	r3, r1
 800f33e:	4604      	mov	r4, r0
 800f340:	460d      	mov	r5, r1
 800f342:	4602      	mov	r2, r0
 800f344:	4649      	mov	r1, r9
 800f346:	4640      	mov	r0, r8
 800f348:	f7f0 ffc8 	bl	80002dc <__adddf3>
 800f34c:	4b1d      	ldr	r3, [pc, #116]	; (800f3c4 <__ieee754_pow+0x3dc>)
 800f34e:	4299      	cmp	r1, r3
 800f350:	ec45 4b19 	vmov	d9, r4, r5
 800f354:	4606      	mov	r6, r0
 800f356:	460f      	mov	r7, r1
 800f358:	468b      	mov	fp, r1
 800f35a:	f340 82fe 	ble.w	800f95a <__ieee754_pow+0x972>
 800f35e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f362:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f366:	4303      	orrs	r3, r0
 800f368:	f000 81f0 	beq.w	800f74c <__ieee754_pow+0x764>
 800f36c:	a310      	add	r3, pc, #64	; (adr r3, 800f3b0 <__ieee754_pow+0x3c8>)
 800f36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f372:	ec51 0b18 	vmov	r0, r1, d8
 800f376:	f7f1 f967 	bl	8000648 <__aeabi_dmul>
 800f37a:	a30d      	add	r3, pc, #52	; (adr r3, 800f3b0 <__ieee754_pow+0x3c8>)
 800f37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f380:	e6cb      	b.n	800f11a <__ieee754_pow+0x132>
 800f382:	bf00      	nop
 800f384:	f3af 8000 	nop.w
 800f388:	60000000 	.word	0x60000000
 800f38c:	3ff71547 	.word	0x3ff71547
 800f390:	f85ddf44 	.word	0xf85ddf44
 800f394:	3e54ae0b 	.word	0x3e54ae0b
 800f398:	55555555 	.word	0x55555555
 800f39c:	3fd55555 	.word	0x3fd55555
 800f3a0:	652b82fe 	.word	0x652b82fe
 800f3a4:	3ff71547 	.word	0x3ff71547
 800f3a8:	00000000 	.word	0x00000000
 800f3ac:	bff00000 	.word	0xbff00000
 800f3b0:	8800759c 	.word	0x8800759c
 800f3b4:	7e37e43c 	.word	0x7e37e43c
 800f3b8:	3ff00000 	.word	0x3ff00000
 800f3bc:	3fd00000 	.word	0x3fd00000
 800f3c0:	3fe00000 	.word	0x3fe00000
 800f3c4:	408fffff 	.word	0x408fffff
 800f3c8:	4bd7      	ldr	r3, [pc, #860]	; (800f728 <__ieee754_pow+0x740>)
 800f3ca:	ea03 0309 	and.w	r3, r3, r9
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	b92b      	cbnz	r3, 800f3de <__ieee754_pow+0x3f6>
 800f3d2:	4bd6      	ldr	r3, [pc, #856]	; (800f72c <__ieee754_pow+0x744>)
 800f3d4:	f7f1 f938 	bl	8000648 <__aeabi_dmul>
 800f3d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f3dc:	460c      	mov	r4, r1
 800f3de:	1523      	asrs	r3, r4, #20
 800f3e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f3e4:	4413      	add	r3, r2
 800f3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f3e8:	4bd1      	ldr	r3, [pc, #836]	; (800f730 <__ieee754_pow+0x748>)
 800f3ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f3ee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f3f2:	429c      	cmp	r4, r3
 800f3f4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f3f8:	dd08      	ble.n	800f40c <__ieee754_pow+0x424>
 800f3fa:	4bce      	ldr	r3, [pc, #824]	; (800f734 <__ieee754_pow+0x74c>)
 800f3fc:	429c      	cmp	r4, r3
 800f3fe:	f340 8163 	ble.w	800f6c8 <__ieee754_pow+0x6e0>
 800f402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f404:	3301      	adds	r3, #1
 800f406:	9309      	str	r3, [sp, #36]	; 0x24
 800f408:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f40c:	2400      	movs	r4, #0
 800f40e:	00e3      	lsls	r3, r4, #3
 800f410:	930b      	str	r3, [sp, #44]	; 0x2c
 800f412:	4bc9      	ldr	r3, [pc, #804]	; (800f738 <__ieee754_pow+0x750>)
 800f414:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f418:	ed93 7b00 	vldr	d7, [r3]
 800f41c:	4629      	mov	r1, r5
 800f41e:	ec53 2b17 	vmov	r2, r3, d7
 800f422:	eeb0 8a47 	vmov.f32	s16, s14
 800f426:	eef0 8a67 	vmov.f32	s17, s15
 800f42a:	4682      	mov	sl, r0
 800f42c:	f7f0 ff54 	bl	80002d8 <__aeabi_dsub>
 800f430:	4652      	mov	r2, sl
 800f432:	4606      	mov	r6, r0
 800f434:	460f      	mov	r7, r1
 800f436:	462b      	mov	r3, r5
 800f438:	ec51 0b18 	vmov	r0, r1, d8
 800f43c:	f7f0 ff4e 	bl	80002dc <__adddf3>
 800f440:	4602      	mov	r2, r0
 800f442:	460b      	mov	r3, r1
 800f444:	2000      	movs	r0, #0
 800f446:	49bd      	ldr	r1, [pc, #756]	; (800f73c <__ieee754_pow+0x754>)
 800f448:	f7f1 fa28 	bl	800089c <__aeabi_ddiv>
 800f44c:	ec41 0b19 	vmov	d9, r0, r1
 800f450:	4602      	mov	r2, r0
 800f452:	460b      	mov	r3, r1
 800f454:	4630      	mov	r0, r6
 800f456:	4639      	mov	r1, r7
 800f458:	f7f1 f8f6 	bl	8000648 <__aeabi_dmul>
 800f45c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f460:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f464:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f468:	2300      	movs	r3, #0
 800f46a:	9304      	str	r3, [sp, #16]
 800f46c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f470:	46ab      	mov	fp, r5
 800f472:	106d      	asrs	r5, r5, #1
 800f474:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f478:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f47c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f480:	2200      	movs	r2, #0
 800f482:	4640      	mov	r0, r8
 800f484:	4649      	mov	r1, r9
 800f486:	4614      	mov	r4, r2
 800f488:	461d      	mov	r5, r3
 800f48a:	f7f1 f8dd 	bl	8000648 <__aeabi_dmul>
 800f48e:	4602      	mov	r2, r0
 800f490:	460b      	mov	r3, r1
 800f492:	4630      	mov	r0, r6
 800f494:	4639      	mov	r1, r7
 800f496:	f7f0 ff1f 	bl	80002d8 <__aeabi_dsub>
 800f49a:	ec53 2b18 	vmov	r2, r3, d8
 800f49e:	4606      	mov	r6, r0
 800f4a0:	460f      	mov	r7, r1
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	4629      	mov	r1, r5
 800f4a6:	f7f0 ff17 	bl	80002d8 <__aeabi_dsub>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	4650      	mov	r0, sl
 800f4b0:	4659      	mov	r1, fp
 800f4b2:	f7f0 ff11 	bl	80002d8 <__aeabi_dsub>
 800f4b6:	4642      	mov	r2, r8
 800f4b8:	464b      	mov	r3, r9
 800f4ba:	f7f1 f8c5 	bl	8000648 <__aeabi_dmul>
 800f4be:	4602      	mov	r2, r0
 800f4c0:	460b      	mov	r3, r1
 800f4c2:	4630      	mov	r0, r6
 800f4c4:	4639      	mov	r1, r7
 800f4c6:	f7f0 ff07 	bl	80002d8 <__aeabi_dsub>
 800f4ca:	ec53 2b19 	vmov	r2, r3, d9
 800f4ce:	f7f1 f8bb 	bl	8000648 <__aeabi_dmul>
 800f4d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f4d6:	ec41 0b18 	vmov	d8, r0, r1
 800f4da:	4610      	mov	r0, r2
 800f4dc:	4619      	mov	r1, r3
 800f4de:	f7f1 f8b3 	bl	8000648 <__aeabi_dmul>
 800f4e2:	a37d      	add	r3, pc, #500	; (adr r3, 800f6d8 <__ieee754_pow+0x6f0>)
 800f4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	460d      	mov	r5, r1
 800f4ec:	f7f1 f8ac 	bl	8000648 <__aeabi_dmul>
 800f4f0:	a37b      	add	r3, pc, #492	; (adr r3, 800f6e0 <__ieee754_pow+0x6f8>)
 800f4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f6:	f7f0 fef1 	bl	80002dc <__adddf3>
 800f4fa:	4622      	mov	r2, r4
 800f4fc:	462b      	mov	r3, r5
 800f4fe:	f7f1 f8a3 	bl	8000648 <__aeabi_dmul>
 800f502:	a379      	add	r3, pc, #484	; (adr r3, 800f6e8 <__ieee754_pow+0x700>)
 800f504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f508:	f7f0 fee8 	bl	80002dc <__adddf3>
 800f50c:	4622      	mov	r2, r4
 800f50e:	462b      	mov	r3, r5
 800f510:	f7f1 f89a 	bl	8000648 <__aeabi_dmul>
 800f514:	a376      	add	r3, pc, #472	; (adr r3, 800f6f0 <__ieee754_pow+0x708>)
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	f7f0 fedf 	bl	80002dc <__adddf3>
 800f51e:	4622      	mov	r2, r4
 800f520:	462b      	mov	r3, r5
 800f522:	f7f1 f891 	bl	8000648 <__aeabi_dmul>
 800f526:	a374      	add	r3, pc, #464	; (adr r3, 800f6f8 <__ieee754_pow+0x710>)
 800f528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52c:	f7f0 fed6 	bl	80002dc <__adddf3>
 800f530:	4622      	mov	r2, r4
 800f532:	462b      	mov	r3, r5
 800f534:	f7f1 f888 	bl	8000648 <__aeabi_dmul>
 800f538:	a371      	add	r3, pc, #452	; (adr r3, 800f700 <__ieee754_pow+0x718>)
 800f53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53e:	f7f0 fecd 	bl	80002dc <__adddf3>
 800f542:	4622      	mov	r2, r4
 800f544:	4606      	mov	r6, r0
 800f546:	460f      	mov	r7, r1
 800f548:	462b      	mov	r3, r5
 800f54a:	4620      	mov	r0, r4
 800f54c:	4629      	mov	r1, r5
 800f54e:	f7f1 f87b 	bl	8000648 <__aeabi_dmul>
 800f552:	4602      	mov	r2, r0
 800f554:	460b      	mov	r3, r1
 800f556:	4630      	mov	r0, r6
 800f558:	4639      	mov	r1, r7
 800f55a:	f7f1 f875 	bl	8000648 <__aeabi_dmul>
 800f55e:	4642      	mov	r2, r8
 800f560:	4604      	mov	r4, r0
 800f562:	460d      	mov	r5, r1
 800f564:	464b      	mov	r3, r9
 800f566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f56a:	f7f0 feb7 	bl	80002dc <__adddf3>
 800f56e:	ec53 2b18 	vmov	r2, r3, d8
 800f572:	f7f1 f869 	bl	8000648 <__aeabi_dmul>
 800f576:	4622      	mov	r2, r4
 800f578:	462b      	mov	r3, r5
 800f57a:	f7f0 feaf 	bl	80002dc <__adddf3>
 800f57e:	4642      	mov	r2, r8
 800f580:	4682      	mov	sl, r0
 800f582:	468b      	mov	fp, r1
 800f584:	464b      	mov	r3, r9
 800f586:	4640      	mov	r0, r8
 800f588:	4649      	mov	r1, r9
 800f58a:	f7f1 f85d 	bl	8000648 <__aeabi_dmul>
 800f58e:	4b6c      	ldr	r3, [pc, #432]	; (800f740 <__ieee754_pow+0x758>)
 800f590:	2200      	movs	r2, #0
 800f592:	4606      	mov	r6, r0
 800f594:	460f      	mov	r7, r1
 800f596:	f7f0 fea1 	bl	80002dc <__adddf3>
 800f59a:	4652      	mov	r2, sl
 800f59c:	465b      	mov	r3, fp
 800f59e:	f7f0 fe9d 	bl	80002dc <__adddf3>
 800f5a2:	9c04      	ldr	r4, [sp, #16]
 800f5a4:	460d      	mov	r5, r1
 800f5a6:	4622      	mov	r2, r4
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	4640      	mov	r0, r8
 800f5ac:	4649      	mov	r1, r9
 800f5ae:	f7f1 f84b 	bl	8000648 <__aeabi_dmul>
 800f5b2:	4b63      	ldr	r3, [pc, #396]	; (800f740 <__ieee754_pow+0x758>)
 800f5b4:	4680      	mov	r8, r0
 800f5b6:	4689      	mov	r9, r1
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	4629      	mov	r1, r5
 800f5be:	f7f0 fe8b 	bl	80002d8 <__aeabi_dsub>
 800f5c2:	4632      	mov	r2, r6
 800f5c4:	463b      	mov	r3, r7
 800f5c6:	f7f0 fe87 	bl	80002d8 <__aeabi_dsub>
 800f5ca:	4602      	mov	r2, r0
 800f5cc:	460b      	mov	r3, r1
 800f5ce:	4650      	mov	r0, sl
 800f5d0:	4659      	mov	r1, fp
 800f5d2:	f7f0 fe81 	bl	80002d8 <__aeabi_dsub>
 800f5d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5da:	f7f1 f835 	bl	8000648 <__aeabi_dmul>
 800f5de:	4622      	mov	r2, r4
 800f5e0:	4606      	mov	r6, r0
 800f5e2:	460f      	mov	r7, r1
 800f5e4:	462b      	mov	r3, r5
 800f5e6:	ec51 0b18 	vmov	r0, r1, d8
 800f5ea:	f7f1 f82d 	bl	8000648 <__aeabi_dmul>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	4639      	mov	r1, r7
 800f5f6:	f7f0 fe71 	bl	80002dc <__adddf3>
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	460f      	mov	r7, r1
 800f5fe:	4602      	mov	r2, r0
 800f600:	460b      	mov	r3, r1
 800f602:	4640      	mov	r0, r8
 800f604:	4649      	mov	r1, r9
 800f606:	f7f0 fe69 	bl	80002dc <__adddf3>
 800f60a:	9c04      	ldr	r4, [sp, #16]
 800f60c:	a33e      	add	r3, pc, #248	; (adr r3, 800f708 <__ieee754_pow+0x720>)
 800f60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f612:	4620      	mov	r0, r4
 800f614:	460d      	mov	r5, r1
 800f616:	f7f1 f817 	bl	8000648 <__aeabi_dmul>
 800f61a:	4642      	mov	r2, r8
 800f61c:	ec41 0b18 	vmov	d8, r0, r1
 800f620:	464b      	mov	r3, r9
 800f622:	4620      	mov	r0, r4
 800f624:	4629      	mov	r1, r5
 800f626:	f7f0 fe57 	bl	80002d8 <__aeabi_dsub>
 800f62a:	4602      	mov	r2, r0
 800f62c:	460b      	mov	r3, r1
 800f62e:	4630      	mov	r0, r6
 800f630:	4639      	mov	r1, r7
 800f632:	f7f0 fe51 	bl	80002d8 <__aeabi_dsub>
 800f636:	a336      	add	r3, pc, #216	; (adr r3, 800f710 <__ieee754_pow+0x728>)
 800f638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63c:	f7f1 f804 	bl	8000648 <__aeabi_dmul>
 800f640:	a335      	add	r3, pc, #212	; (adr r3, 800f718 <__ieee754_pow+0x730>)
 800f642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f646:	4606      	mov	r6, r0
 800f648:	460f      	mov	r7, r1
 800f64a:	4620      	mov	r0, r4
 800f64c:	4629      	mov	r1, r5
 800f64e:	f7f0 fffb 	bl	8000648 <__aeabi_dmul>
 800f652:	4602      	mov	r2, r0
 800f654:	460b      	mov	r3, r1
 800f656:	4630      	mov	r0, r6
 800f658:	4639      	mov	r1, r7
 800f65a:	f7f0 fe3f 	bl	80002dc <__adddf3>
 800f65e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f660:	4b38      	ldr	r3, [pc, #224]	; (800f744 <__ieee754_pow+0x75c>)
 800f662:	4413      	add	r3, r2
 800f664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f668:	f7f0 fe38 	bl	80002dc <__adddf3>
 800f66c:	4682      	mov	sl, r0
 800f66e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f670:	468b      	mov	fp, r1
 800f672:	f7f0 ff7f 	bl	8000574 <__aeabi_i2d>
 800f676:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f678:	4b33      	ldr	r3, [pc, #204]	; (800f748 <__ieee754_pow+0x760>)
 800f67a:	4413      	add	r3, r2
 800f67c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f680:	4606      	mov	r6, r0
 800f682:	460f      	mov	r7, r1
 800f684:	4652      	mov	r2, sl
 800f686:	465b      	mov	r3, fp
 800f688:	ec51 0b18 	vmov	r0, r1, d8
 800f68c:	f7f0 fe26 	bl	80002dc <__adddf3>
 800f690:	4642      	mov	r2, r8
 800f692:	464b      	mov	r3, r9
 800f694:	f7f0 fe22 	bl	80002dc <__adddf3>
 800f698:	4632      	mov	r2, r6
 800f69a:	463b      	mov	r3, r7
 800f69c:	f7f0 fe1e 	bl	80002dc <__adddf3>
 800f6a0:	9c04      	ldr	r4, [sp, #16]
 800f6a2:	4632      	mov	r2, r6
 800f6a4:	463b      	mov	r3, r7
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	460d      	mov	r5, r1
 800f6aa:	f7f0 fe15 	bl	80002d8 <__aeabi_dsub>
 800f6ae:	4642      	mov	r2, r8
 800f6b0:	464b      	mov	r3, r9
 800f6b2:	f7f0 fe11 	bl	80002d8 <__aeabi_dsub>
 800f6b6:	ec53 2b18 	vmov	r2, r3, d8
 800f6ba:	f7f0 fe0d 	bl	80002d8 <__aeabi_dsub>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	4650      	mov	r0, sl
 800f6c4:	4659      	mov	r1, fp
 800f6c6:	e606      	b.n	800f2d6 <__ieee754_pow+0x2ee>
 800f6c8:	2401      	movs	r4, #1
 800f6ca:	e6a0      	b.n	800f40e <__ieee754_pow+0x426>
 800f6cc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800f720 <__ieee754_pow+0x738>
 800f6d0:	e60d      	b.n	800f2ee <__ieee754_pow+0x306>
 800f6d2:	bf00      	nop
 800f6d4:	f3af 8000 	nop.w
 800f6d8:	4a454eef 	.word	0x4a454eef
 800f6dc:	3fca7e28 	.word	0x3fca7e28
 800f6e0:	93c9db65 	.word	0x93c9db65
 800f6e4:	3fcd864a 	.word	0x3fcd864a
 800f6e8:	a91d4101 	.word	0xa91d4101
 800f6ec:	3fd17460 	.word	0x3fd17460
 800f6f0:	518f264d 	.word	0x518f264d
 800f6f4:	3fd55555 	.word	0x3fd55555
 800f6f8:	db6fabff 	.word	0xdb6fabff
 800f6fc:	3fdb6db6 	.word	0x3fdb6db6
 800f700:	33333303 	.word	0x33333303
 800f704:	3fe33333 	.word	0x3fe33333
 800f708:	e0000000 	.word	0xe0000000
 800f70c:	3feec709 	.word	0x3feec709
 800f710:	dc3a03fd 	.word	0xdc3a03fd
 800f714:	3feec709 	.word	0x3feec709
 800f718:	145b01f5 	.word	0x145b01f5
 800f71c:	be3e2fe0 	.word	0xbe3e2fe0
 800f720:	00000000 	.word	0x00000000
 800f724:	3ff00000 	.word	0x3ff00000
 800f728:	7ff00000 	.word	0x7ff00000
 800f72c:	43400000 	.word	0x43400000
 800f730:	0003988e 	.word	0x0003988e
 800f734:	000bb679 	.word	0x000bb679
 800f738:	08010470 	.word	0x08010470
 800f73c:	3ff00000 	.word	0x3ff00000
 800f740:	40080000 	.word	0x40080000
 800f744:	08010490 	.word	0x08010490
 800f748:	08010480 	.word	0x08010480
 800f74c:	a3b5      	add	r3, pc, #724	; (adr r3, 800fa24 <__ieee754_pow+0xa3c>)
 800f74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f752:	4640      	mov	r0, r8
 800f754:	4649      	mov	r1, r9
 800f756:	f7f0 fdc1 	bl	80002dc <__adddf3>
 800f75a:	4622      	mov	r2, r4
 800f75c:	ec41 0b1a 	vmov	d10, r0, r1
 800f760:	462b      	mov	r3, r5
 800f762:	4630      	mov	r0, r6
 800f764:	4639      	mov	r1, r7
 800f766:	f7f0 fdb7 	bl	80002d8 <__aeabi_dsub>
 800f76a:	4602      	mov	r2, r0
 800f76c:	460b      	mov	r3, r1
 800f76e:	ec51 0b1a 	vmov	r0, r1, d10
 800f772:	f7f1 f9f9 	bl	8000b68 <__aeabi_dcmpgt>
 800f776:	2800      	cmp	r0, #0
 800f778:	f47f adf8 	bne.w	800f36c <__ieee754_pow+0x384>
 800f77c:	4aa4      	ldr	r2, [pc, #656]	; (800fa10 <__ieee754_pow+0xa28>)
 800f77e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f782:	4293      	cmp	r3, r2
 800f784:	f340 810b 	ble.w	800f99e <__ieee754_pow+0x9b6>
 800f788:	151b      	asrs	r3, r3, #20
 800f78a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f78e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f792:	fa4a f303 	asr.w	r3, sl, r3
 800f796:	445b      	add	r3, fp
 800f798:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f79c:	4e9d      	ldr	r6, [pc, #628]	; (800fa14 <__ieee754_pow+0xa2c>)
 800f79e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f7a2:	4116      	asrs	r6, r2
 800f7a4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f7a8:	2000      	movs	r0, #0
 800f7aa:	ea23 0106 	bic.w	r1, r3, r6
 800f7ae:	f1c2 0214 	rsb	r2, r2, #20
 800f7b2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f7b6:	fa4a fa02 	asr.w	sl, sl, r2
 800f7ba:	f1bb 0f00 	cmp.w	fp, #0
 800f7be:	4602      	mov	r2, r0
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	4629      	mov	r1, r5
 800f7c6:	bfb8      	it	lt
 800f7c8:	f1ca 0a00 	rsblt	sl, sl, #0
 800f7cc:	f7f0 fd84 	bl	80002d8 <__aeabi_dsub>
 800f7d0:	ec41 0b19 	vmov	d9, r0, r1
 800f7d4:	4642      	mov	r2, r8
 800f7d6:	464b      	mov	r3, r9
 800f7d8:	ec51 0b19 	vmov	r0, r1, d9
 800f7dc:	f7f0 fd7e 	bl	80002dc <__adddf3>
 800f7e0:	2400      	movs	r4, #0
 800f7e2:	a379      	add	r3, pc, #484	; (adr r3, 800f9c8 <__ieee754_pow+0x9e0>)
 800f7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	460d      	mov	r5, r1
 800f7ec:	f7f0 ff2c 	bl	8000648 <__aeabi_dmul>
 800f7f0:	ec53 2b19 	vmov	r2, r3, d9
 800f7f4:	4606      	mov	r6, r0
 800f7f6:	460f      	mov	r7, r1
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	f7f0 fd6c 	bl	80002d8 <__aeabi_dsub>
 800f800:	4602      	mov	r2, r0
 800f802:	460b      	mov	r3, r1
 800f804:	4640      	mov	r0, r8
 800f806:	4649      	mov	r1, r9
 800f808:	f7f0 fd66 	bl	80002d8 <__aeabi_dsub>
 800f80c:	a370      	add	r3, pc, #448	; (adr r3, 800f9d0 <__ieee754_pow+0x9e8>)
 800f80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f812:	f7f0 ff19 	bl	8000648 <__aeabi_dmul>
 800f816:	a370      	add	r3, pc, #448	; (adr r3, 800f9d8 <__ieee754_pow+0x9f0>)
 800f818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f81c:	4680      	mov	r8, r0
 800f81e:	4689      	mov	r9, r1
 800f820:	4620      	mov	r0, r4
 800f822:	4629      	mov	r1, r5
 800f824:	f7f0 ff10 	bl	8000648 <__aeabi_dmul>
 800f828:	4602      	mov	r2, r0
 800f82a:	460b      	mov	r3, r1
 800f82c:	4640      	mov	r0, r8
 800f82e:	4649      	mov	r1, r9
 800f830:	f7f0 fd54 	bl	80002dc <__adddf3>
 800f834:	4604      	mov	r4, r0
 800f836:	460d      	mov	r5, r1
 800f838:	4602      	mov	r2, r0
 800f83a:	460b      	mov	r3, r1
 800f83c:	4630      	mov	r0, r6
 800f83e:	4639      	mov	r1, r7
 800f840:	f7f0 fd4c 	bl	80002dc <__adddf3>
 800f844:	4632      	mov	r2, r6
 800f846:	463b      	mov	r3, r7
 800f848:	4680      	mov	r8, r0
 800f84a:	4689      	mov	r9, r1
 800f84c:	f7f0 fd44 	bl	80002d8 <__aeabi_dsub>
 800f850:	4602      	mov	r2, r0
 800f852:	460b      	mov	r3, r1
 800f854:	4620      	mov	r0, r4
 800f856:	4629      	mov	r1, r5
 800f858:	f7f0 fd3e 	bl	80002d8 <__aeabi_dsub>
 800f85c:	4642      	mov	r2, r8
 800f85e:	4606      	mov	r6, r0
 800f860:	460f      	mov	r7, r1
 800f862:	464b      	mov	r3, r9
 800f864:	4640      	mov	r0, r8
 800f866:	4649      	mov	r1, r9
 800f868:	f7f0 feee 	bl	8000648 <__aeabi_dmul>
 800f86c:	a35c      	add	r3, pc, #368	; (adr r3, 800f9e0 <__ieee754_pow+0x9f8>)
 800f86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f872:	4604      	mov	r4, r0
 800f874:	460d      	mov	r5, r1
 800f876:	f7f0 fee7 	bl	8000648 <__aeabi_dmul>
 800f87a:	a35b      	add	r3, pc, #364	; (adr r3, 800f9e8 <__ieee754_pow+0xa00>)
 800f87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f880:	f7f0 fd2a 	bl	80002d8 <__aeabi_dsub>
 800f884:	4622      	mov	r2, r4
 800f886:	462b      	mov	r3, r5
 800f888:	f7f0 fede 	bl	8000648 <__aeabi_dmul>
 800f88c:	a358      	add	r3, pc, #352	; (adr r3, 800f9f0 <__ieee754_pow+0xa08>)
 800f88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f892:	f7f0 fd23 	bl	80002dc <__adddf3>
 800f896:	4622      	mov	r2, r4
 800f898:	462b      	mov	r3, r5
 800f89a:	f7f0 fed5 	bl	8000648 <__aeabi_dmul>
 800f89e:	a356      	add	r3, pc, #344	; (adr r3, 800f9f8 <__ieee754_pow+0xa10>)
 800f8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a4:	f7f0 fd18 	bl	80002d8 <__aeabi_dsub>
 800f8a8:	4622      	mov	r2, r4
 800f8aa:	462b      	mov	r3, r5
 800f8ac:	f7f0 fecc 	bl	8000648 <__aeabi_dmul>
 800f8b0:	a353      	add	r3, pc, #332	; (adr r3, 800fa00 <__ieee754_pow+0xa18>)
 800f8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b6:	f7f0 fd11 	bl	80002dc <__adddf3>
 800f8ba:	4622      	mov	r2, r4
 800f8bc:	462b      	mov	r3, r5
 800f8be:	f7f0 fec3 	bl	8000648 <__aeabi_dmul>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	4640      	mov	r0, r8
 800f8c8:	4649      	mov	r1, r9
 800f8ca:	f7f0 fd05 	bl	80002d8 <__aeabi_dsub>
 800f8ce:	4604      	mov	r4, r0
 800f8d0:	460d      	mov	r5, r1
 800f8d2:	4602      	mov	r2, r0
 800f8d4:	460b      	mov	r3, r1
 800f8d6:	4640      	mov	r0, r8
 800f8d8:	4649      	mov	r1, r9
 800f8da:	f7f0 feb5 	bl	8000648 <__aeabi_dmul>
 800f8de:	2200      	movs	r2, #0
 800f8e0:	ec41 0b19 	vmov	d9, r0, r1
 800f8e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	4629      	mov	r1, r5
 800f8ec:	f7f0 fcf4 	bl	80002d8 <__aeabi_dsub>
 800f8f0:	4602      	mov	r2, r0
 800f8f2:	460b      	mov	r3, r1
 800f8f4:	ec51 0b19 	vmov	r0, r1, d9
 800f8f8:	f7f0 ffd0 	bl	800089c <__aeabi_ddiv>
 800f8fc:	4632      	mov	r2, r6
 800f8fe:	4604      	mov	r4, r0
 800f900:	460d      	mov	r5, r1
 800f902:	463b      	mov	r3, r7
 800f904:	4640      	mov	r0, r8
 800f906:	4649      	mov	r1, r9
 800f908:	f7f0 fe9e 	bl	8000648 <__aeabi_dmul>
 800f90c:	4632      	mov	r2, r6
 800f90e:	463b      	mov	r3, r7
 800f910:	f7f0 fce4 	bl	80002dc <__adddf3>
 800f914:	4602      	mov	r2, r0
 800f916:	460b      	mov	r3, r1
 800f918:	4620      	mov	r0, r4
 800f91a:	4629      	mov	r1, r5
 800f91c:	f7f0 fcdc 	bl	80002d8 <__aeabi_dsub>
 800f920:	4642      	mov	r2, r8
 800f922:	464b      	mov	r3, r9
 800f924:	f7f0 fcd8 	bl	80002d8 <__aeabi_dsub>
 800f928:	460b      	mov	r3, r1
 800f92a:	4602      	mov	r2, r0
 800f92c:	493a      	ldr	r1, [pc, #232]	; (800fa18 <__ieee754_pow+0xa30>)
 800f92e:	2000      	movs	r0, #0
 800f930:	f7f0 fcd2 	bl	80002d8 <__aeabi_dsub>
 800f934:	e9cd 0100 	strd	r0, r1, [sp]
 800f938:	9b01      	ldr	r3, [sp, #4]
 800f93a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f93e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f942:	da2f      	bge.n	800f9a4 <__ieee754_pow+0x9bc>
 800f944:	4650      	mov	r0, sl
 800f946:	ed9d 0b00 	vldr	d0, [sp]
 800f94a:	f000 f9cd 	bl	800fce8 <scalbn>
 800f94e:	ec51 0b10 	vmov	r0, r1, d0
 800f952:	ec53 2b18 	vmov	r2, r3, d8
 800f956:	f7ff bbe0 	b.w	800f11a <__ieee754_pow+0x132>
 800f95a:	4b30      	ldr	r3, [pc, #192]	; (800fa1c <__ieee754_pow+0xa34>)
 800f95c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f960:	429e      	cmp	r6, r3
 800f962:	f77f af0b 	ble.w	800f77c <__ieee754_pow+0x794>
 800f966:	4b2e      	ldr	r3, [pc, #184]	; (800fa20 <__ieee754_pow+0xa38>)
 800f968:	440b      	add	r3, r1
 800f96a:	4303      	orrs	r3, r0
 800f96c:	d00b      	beq.n	800f986 <__ieee754_pow+0x99e>
 800f96e:	a326      	add	r3, pc, #152	; (adr r3, 800fa08 <__ieee754_pow+0xa20>)
 800f970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f974:	ec51 0b18 	vmov	r0, r1, d8
 800f978:	f7f0 fe66 	bl	8000648 <__aeabi_dmul>
 800f97c:	a322      	add	r3, pc, #136	; (adr r3, 800fa08 <__ieee754_pow+0xa20>)
 800f97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f982:	f7ff bbca 	b.w	800f11a <__ieee754_pow+0x132>
 800f986:	4622      	mov	r2, r4
 800f988:	462b      	mov	r3, r5
 800f98a:	f7f0 fca5 	bl	80002d8 <__aeabi_dsub>
 800f98e:	4642      	mov	r2, r8
 800f990:	464b      	mov	r3, r9
 800f992:	f7f1 f8df 	bl	8000b54 <__aeabi_dcmpge>
 800f996:	2800      	cmp	r0, #0
 800f998:	f43f aef0 	beq.w	800f77c <__ieee754_pow+0x794>
 800f99c:	e7e7      	b.n	800f96e <__ieee754_pow+0x986>
 800f99e:	f04f 0a00 	mov.w	sl, #0
 800f9a2:	e717      	b.n	800f7d4 <__ieee754_pow+0x7ec>
 800f9a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	e7d2      	b.n	800f952 <__ieee754_pow+0x96a>
 800f9ac:	491a      	ldr	r1, [pc, #104]	; (800fa18 <__ieee754_pow+0xa30>)
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	f7ff bb9e 	b.w	800f0f0 <__ieee754_pow+0x108>
 800f9b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9b8:	f7ff bb9a 	b.w	800f0f0 <__ieee754_pow+0x108>
 800f9bc:	9000      	str	r0, [sp, #0]
 800f9be:	f7ff bb76 	b.w	800f0ae <__ieee754_pow+0xc6>
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	f7ff bb60 	b.w	800f088 <__ieee754_pow+0xa0>
 800f9c8:	00000000 	.word	0x00000000
 800f9cc:	3fe62e43 	.word	0x3fe62e43
 800f9d0:	fefa39ef 	.word	0xfefa39ef
 800f9d4:	3fe62e42 	.word	0x3fe62e42
 800f9d8:	0ca86c39 	.word	0x0ca86c39
 800f9dc:	be205c61 	.word	0xbe205c61
 800f9e0:	72bea4d0 	.word	0x72bea4d0
 800f9e4:	3e663769 	.word	0x3e663769
 800f9e8:	c5d26bf1 	.word	0xc5d26bf1
 800f9ec:	3ebbbd41 	.word	0x3ebbbd41
 800f9f0:	af25de2c 	.word	0xaf25de2c
 800f9f4:	3f11566a 	.word	0x3f11566a
 800f9f8:	16bebd93 	.word	0x16bebd93
 800f9fc:	3f66c16c 	.word	0x3f66c16c
 800fa00:	5555553e 	.word	0x5555553e
 800fa04:	3fc55555 	.word	0x3fc55555
 800fa08:	c2f8f359 	.word	0xc2f8f359
 800fa0c:	01a56e1f 	.word	0x01a56e1f
 800fa10:	3fe00000 	.word	0x3fe00000
 800fa14:	000fffff 	.word	0x000fffff
 800fa18:	3ff00000 	.word	0x3ff00000
 800fa1c:	4090cbff 	.word	0x4090cbff
 800fa20:	3f6f3400 	.word	0x3f6f3400
 800fa24:	652b82fe 	.word	0x652b82fe
 800fa28:	3c971547 	.word	0x3c971547

0800fa2c <__ieee754_sqrt>:
 800fa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa30:	ec55 4b10 	vmov	r4, r5, d0
 800fa34:	4e56      	ldr	r6, [pc, #344]	; (800fb90 <__ieee754_sqrt+0x164>)
 800fa36:	43ae      	bics	r6, r5
 800fa38:	ee10 0a10 	vmov	r0, s0
 800fa3c:	ee10 3a10 	vmov	r3, s0
 800fa40:	4629      	mov	r1, r5
 800fa42:	462a      	mov	r2, r5
 800fa44:	d110      	bne.n	800fa68 <__ieee754_sqrt+0x3c>
 800fa46:	ee10 2a10 	vmov	r2, s0
 800fa4a:	462b      	mov	r3, r5
 800fa4c:	f7f0 fdfc 	bl	8000648 <__aeabi_dmul>
 800fa50:	4602      	mov	r2, r0
 800fa52:	460b      	mov	r3, r1
 800fa54:	4620      	mov	r0, r4
 800fa56:	4629      	mov	r1, r5
 800fa58:	f7f0 fc40 	bl	80002dc <__adddf3>
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	460d      	mov	r5, r1
 800fa60:	ec45 4b10 	vmov	d0, r4, r5
 800fa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa68:	2d00      	cmp	r5, #0
 800fa6a:	dc10      	bgt.n	800fa8e <__ieee754_sqrt+0x62>
 800fa6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fa70:	4330      	orrs	r0, r6
 800fa72:	d0f5      	beq.n	800fa60 <__ieee754_sqrt+0x34>
 800fa74:	b15d      	cbz	r5, 800fa8e <__ieee754_sqrt+0x62>
 800fa76:	ee10 2a10 	vmov	r2, s0
 800fa7a:	462b      	mov	r3, r5
 800fa7c:	ee10 0a10 	vmov	r0, s0
 800fa80:	f7f0 fc2a 	bl	80002d8 <__aeabi_dsub>
 800fa84:	4602      	mov	r2, r0
 800fa86:	460b      	mov	r3, r1
 800fa88:	f7f0 ff08 	bl	800089c <__aeabi_ddiv>
 800fa8c:	e7e6      	b.n	800fa5c <__ieee754_sqrt+0x30>
 800fa8e:	1509      	asrs	r1, r1, #20
 800fa90:	d076      	beq.n	800fb80 <__ieee754_sqrt+0x154>
 800fa92:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800fa96:	07ce      	lsls	r6, r1, #31
 800fa98:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800fa9c:	bf5e      	ittt	pl
 800fa9e:	0fda      	lsrpl	r2, r3, #31
 800faa0:	005b      	lslpl	r3, r3, #1
 800faa2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800faa6:	0fda      	lsrs	r2, r3, #31
 800faa8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800faac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800fab0:	2000      	movs	r0, #0
 800fab2:	106d      	asrs	r5, r5, #1
 800fab4:	005b      	lsls	r3, r3, #1
 800fab6:	f04f 0e16 	mov.w	lr, #22
 800faba:	4684      	mov	ip, r0
 800fabc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fac0:	eb0c 0401 	add.w	r4, ip, r1
 800fac4:	4294      	cmp	r4, r2
 800fac6:	bfde      	ittt	le
 800fac8:	1b12      	suble	r2, r2, r4
 800faca:	eb04 0c01 	addle.w	ip, r4, r1
 800face:	1840      	addle	r0, r0, r1
 800fad0:	0052      	lsls	r2, r2, #1
 800fad2:	f1be 0e01 	subs.w	lr, lr, #1
 800fad6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800fada:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fade:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fae2:	d1ed      	bne.n	800fac0 <__ieee754_sqrt+0x94>
 800fae4:	4671      	mov	r1, lr
 800fae6:	2720      	movs	r7, #32
 800fae8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800faec:	4562      	cmp	r2, ip
 800faee:	eb04 060e 	add.w	r6, r4, lr
 800faf2:	dc02      	bgt.n	800fafa <__ieee754_sqrt+0xce>
 800faf4:	d113      	bne.n	800fb1e <__ieee754_sqrt+0xf2>
 800faf6:	429e      	cmp	r6, r3
 800faf8:	d811      	bhi.n	800fb1e <__ieee754_sqrt+0xf2>
 800fafa:	2e00      	cmp	r6, #0
 800fafc:	eb06 0e04 	add.w	lr, r6, r4
 800fb00:	da43      	bge.n	800fb8a <__ieee754_sqrt+0x15e>
 800fb02:	f1be 0f00 	cmp.w	lr, #0
 800fb06:	db40      	blt.n	800fb8a <__ieee754_sqrt+0x15e>
 800fb08:	f10c 0801 	add.w	r8, ip, #1
 800fb0c:	eba2 020c 	sub.w	r2, r2, ip
 800fb10:	429e      	cmp	r6, r3
 800fb12:	bf88      	it	hi
 800fb14:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800fb18:	1b9b      	subs	r3, r3, r6
 800fb1a:	4421      	add	r1, r4
 800fb1c:	46c4      	mov	ip, r8
 800fb1e:	0052      	lsls	r2, r2, #1
 800fb20:	3f01      	subs	r7, #1
 800fb22:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800fb26:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fb2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fb2e:	d1dd      	bne.n	800faec <__ieee754_sqrt+0xc0>
 800fb30:	4313      	orrs	r3, r2
 800fb32:	d006      	beq.n	800fb42 <__ieee754_sqrt+0x116>
 800fb34:	1c4c      	adds	r4, r1, #1
 800fb36:	bf13      	iteet	ne
 800fb38:	3101      	addne	r1, #1
 800fb3a:	3001      	addeq	r0, #1
 800fb3c:	4639      	moveq	r1, r7
 800fb3e:	f021 0101 	bicne.w	r1, r1, #1
 800fb42:	1043      	asrs	r3, r0, #1
 800fb44:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fb48:	0849      	lsrs	r1, r1, #1
 800fb4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fb4e:	07c2      	lsls	r2, r0, #31
 800fb50:	bf48      	it	mi
 800fb52:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800fb56:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800fb5a:	460c      	mov	r4, r1
 800fb5c:	463d      	mov	r5, r7
 800fb5e:	e77f      	b.n	800fa60 <__ieee754_sqrt+0x34>
 800fb60:	0ada      	lsrs	r2, r3, #11
 800fb62:	3815      	subs	r0, #21
 800fb64:	055b      	lsls	r3, r3, #21
 800fb66:	2a00      	cmp	r2, #0
 800fb68:	d0fa      	beq.n	800fb60 <__ieee754_sqrt+0x134>
 800fb6a:	02d7      	lsls	r7, r2, #11
 800fb6c:	d50a      	bpl.n	800fb84 <__ieee754_sqrt+0x158>
 800fb6e:	f1c1 0420 	rsb	r4, r1, #32
 800fb72:	fa23 f404 	lsr.w	r4, r3, r4
 800fb76:	1e4d      	subs	r5, r1, #1
 800fb78:	408b      	lsls	r3, r1
 800fb7a:	4322      	orrs	r2, r4
 800fb7c:	1b41      	subs	r1, r0, r5
 800fb7e:	e788      	b.n	800fa92 <__ieee754_sqrt+0x66>
 800fb80:	4608      	mov	r0, r1
 800fb82:	e7f0      	b.n	800fb66 <__ieee754_sqrt+0x13a>
 800fb84:	0052      	lsls	r2, r2, #1
 800fb86:	3101      	adds	r1, #1
 800fb88:	e7ef      	b.n	800fb6a <__ieee754_sqrt+0x13e>
 800fb8a:	46e0      	mov	r8, ip
 800fb8c:	e7be      	b.n	800fb0c <__ieee754_sqrt+0xe0>
 800fb8e:	bf00      	nop
 800fb90:	7ff00000 	.word	0x7ff00000

0800fb94 <fabs>:
 800fb94:	ec51 0b10 	vmov	r0, r1, d0
 800fb98:	ee10 2a10 	vmov	r2, s0
 800fb9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fba0:	ec43 2b10 	vmov	d0, r2, r3
 800fba4:	4770      	bx	lr

0800fba6 <finite>:
 800fba6:	b082      	sub	sp, #8
 800fba8:	ed8d 0b00 	vstr	d0, [sp]
 800fbac:	9801      	ldr	r0, [sp, #4]
 800fbae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800fbb2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fbb6:	0fc0      	lsrs	r0, r0, #31
 800fbb8:	b002      	add	sp, #8
 800fbba:	4770      	bx	lr
 800fbbc:	0000      	movs	r0, r0
	...

0800fbc0 <nan>:
 800fbc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fbc8 <nan+0x8>
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop
 800fbc8:	00000000 	.word	0x00000000
 800fbcc:	7ff80000 	.word	0x7ff80000

0800fbd0 <rint>:
 800fbd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbd2:	ec51 0b10 	vmov	r0, r1, d0
 800fbd6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fbda:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800fbde:	2e13      	cmp	r6, #19
 800fbe0:	ee10 4a10 	vmov	r4, s0
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800fbea:	dc58      	bgt.n	800fc9e <rint+0xce>
 800fbec:	2e00      	cmp	r6, #0
 800fbee:	da2b      	bge.n	800fc48 <rint+0x78>
 800fbf0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800fbf4:	4302      	orrs	r2, r0
 800fbf6:	d023      	beq.n	800fc40 <rint+0x70>
 800fbf8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800fbfc:	4302      	orrs	r2, r0
 800fbfe:	4254      	negs	r4, r2
 800fc00:	4314      	orrs	r4, r2
 800fc02:	0c4b      	lsrs	r3, r1, #17
 800fc04:	0b24      	lsrs	r4, r4, #12
 800fc06:	045b      	lsls	r3, r3, #17
 800fc08:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800fc0c:	ea44 0103 	orr.w	r1, r4, r3
 800fc10:	4b32      	ldr	r3, [pc, #200]	; (800fcdc <rint+0x10c>)
 800fc12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fc16:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	4630      	mov	r0, r6
 800fc20:	4639      	mov	r1, r7
 800fc22:	f7f0 fb5b 	bl	80002dc <__adddf3>
 800fc26:	e9cd 0100 	strd	r0, r1, [sp]
 800fc2a:	463b      	mov	r3, r7
 800fc2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc30:	4632      	mov	r2, r6
 800fc32:	f7f0 fb51 	bl	80002d8 <__aeabi_dsub>
 800fc36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fc3a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800fc3e:	4639      	mov	r1, r7
 800fc40:	ec41 0b10 	vmov	d0, r0, r1
 800fc44:	b003      	add	sp, #12
 800fc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc48:	4a25      	ldr	r2, [pc, #148]	; (800fce0 <rint+0x110>)
 800fc4a:	4132      	asrs	r2, r6
 800fc4c:	ea01 0702 	and.w	r7, r1, r2
 800fc50:	4307      	orrs	r7, r0
 800fc52:	d0f5      	beq.n	800fc40 <rint+0x70>
 800fc54:	0851      	lsrs	r1, r2, #1
 800fc56:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800fc5a:	4314      	orrs	r4, r2
 800fc5c:	d00c      	beq.n	800fc78 <rint+0xa8>
 800fc5e:	ea23 0201 	bic.w	r2, r3, r1
 800fc62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fc66:	2e13      	cmp	r6, #19
 800fc68:	fa43 f606 	asr.w	r6, r3, r6
 800fc6c:	bf0c      	ite	eq
 800fc6e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800fc72:	2400      	movne	r4, #0
 800fc74:	ea42 0306 	orr.w	r3, r2, r6
 800fc78:	4918      	ldr	r1, [pc, #96]	; (800fcdc <rint+0x10c>)
 800fc7a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800fc7e:	4622      	mov	r2, r4
 800fc80:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fc84:	4620      	mov	r0, r4
 800fc86:	4629      	mov	r1, r5
 800fc88:	f7f0 fb28 	bl	80002dc <__adddf3>
 800fc8c:	e9cd 0100 	strd	r0, r1, [sp]
 800fc90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc94:	4622      	mov	r2, r4
 800fc96:	462b      	mov	r3, r5
 800fc98:	f7f0 fb1e 	bl	80002d8 <__aeabi_dsub>
 800fc9c:	e7d0      	b.n	800fc40 <rint+0x70>
 800fc9e:	2e33      	cmp	r6, #51	; 0x33
 800fca0:	dd07      	ble.n	800fcb2 <rint+0xe2>
 800fca2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fca6:	d1cb      	bne.n	800fc40 <rint+0x70>
 800fca8:	ee10 2a10 	vmov	r2, s0
 800fcac:	f7f0 fb16 	bl	80002dc <__adddf3>
 800fcb0:	e7c6      	b.n	800fc40 <rint+0x70>
 800fcb2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800fcb6:	f04f 36ff 	mov.w	r6, #4294967295
 800fcba:	40d6      	lsrs	r6, r2
 800fcbc:	4230      	tst	r0, r6
 800fcbe:	d0bf      	beq.n	800fc40 <rint+0x70>
 800fcc0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800fcc4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800fcc8:	bf1f      	itttt	ne
 800fcca:	ea24 0101 	bicne.w	r1, r4, r1
 800fcce:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800fcd2:	fa44 f202 	asrne.w	r2, r4, r2
 800fcd6:	ea41 0402 	orrne.w	r4, r1, r2
 800fcda:	e7cd      	b.n	800fc78 <rint+0xa8>
 800fcdc:	080104a0 	.word	0x080104a0
 800fce0:	000fffff 	.word	0x000fffff
 800fce4:	00000000 	.word	0x00000000

0800fce8 <scalbn>:
 800fce8:	b570      	push	{r4, r5, r6, lr}
 800fcea:	ec55 4b10 	vmov	r4, r5, d0
 800fcee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fcf2:	4606      	mov	r6, r0
 800fcf4:	462b      	mov	r3, r5
 800fcf6:	b99a      	cbnz	r2, 800fd20 <scalbn+0x38>
 800fcf8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fcfc:	4323      	orrs	r3, r4
 800fcfe:	d036      	beq.n	800fd6e <scalbn+0x86>
 800fd00:	4b39      	ldr	r3, [pc, #228]	; (800fde8 <scalbn+0x100>)
 800fd02:	4629      	mov	r1, r5
 800fd04:	ee10 0a10 	vmov	r0, s0
 800fd08:	2200      	movs	r2, #0
 800fd0a:	f7f0 fc9d 	bl	8000648 <__aeabi_dmul>
 800fd0e:	4b37      	ldr	r3, [pc, #220]	; (800fdec <scalbn+0x104>)
 800fd10:	429e      	cmp	r6, r3
 800fd12:	4604      	mov	r4, r0
 800fd14:	460d      	mov	r5, r1
 800fd16:	da10      	bge.n	800fd3a <scalbn+0x52>
 800fd18:	a32b      	add	r3, pc, #172	; (adr r3, 800fdc8 <scalbn+0xe0>)
 800fd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1e:	e03a      	b.n	800fd96 <scalbn+0xae>
 800fd20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fd24:	428a      	cmp	r2, r1
 800fd26:	d10c      	bne.n	800fd42 <scalbn+0x5a>
 800fd28:	ee10 2a10 	vmov	r2, s0
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	4629      	mov	r1, r5
 800fd30:	f7f0 fad4 	bl	80002dc <__adddf3>
 800fd34:	4604      	mov	r4, r0
 800fd36:	460d      	mov	r5, r1
 800fd38:	e019      	b.n	800fd6e <scalbn+0x86>
 800fd3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fd3e:	460b      	mov	r3, r1
 800fd40:	3a36      	subs	r2, #54	; 0x36
 800fd42:	4432      	add	r2, r6
 800fd44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fd48:	428a      	cmp	r2, r1
 800fd4a:	dd08      	ble.n	800fd5e <scalbn+0x76>
 800fd4c:	2d00      	cmp	r5, #0
 800fd4e:	a120      	add	r1, pc, #128	; (adr r1, 800fdd0 <scalbn+0xe8>)
 800fd50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd54:	da1c      	bge.n	800fd90 <scalbn+0xa8>
 800fd56:	a120      	add	r1, pc, #128	; (adr r1, 800fdd8 <scalbn+0xf0>)
 800fd58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd5c:	e018      	b.n	800fd90 <scalbn+0xa8>
 800fd5e:	2a00      	cmp	r2, #0
 800fd60:	dd08      	ble.n	800fd74 <scalbn+0x8c>
 800fd62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fd6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fd6e:	ec45 4b10 	vmov	d0, r4, r5
 800fd72:	bd70      	pop	{r4, r5, r6, pc}
 800fd74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fd78:	da19      	bge.n	800fdae <scalbn+0xc6>
 800fd7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fd7e:	429e      	cmp	r6, r3
 800fd80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fd84:	dd0a      	ble.n	800fd9c <scalbn+0xb4>
 800fd86:	a112      	add	r1, pc, #72	; (adr r1, 800fdd0 <scalbn+0xe8>)
 800fd88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d1e2      	bne.n	800fd56 <scalbn+0x6e>
 800fd90:	a30f      	add	r3, pc, #60	; (adr r3, 800fdd0 <scalbn+0xe8>)
 800fd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd96:	f7f0 fc57 	bl	8000648 <__aeabi_dmul>
 800fd9a:	e7cb      	b.n	800fd34 <scalbn+0x4c>
 800fd9c:	a10a      	add	r1, pc, #40	; (adr r1, 800fdc8 <scalbn+0xe0>)
 800fd9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d0b8      	beq.n	800fd18 <scalbn+0x30>
 800fda6:	a10e      	add	r1, pc, #56	; (adr r1, 800fde0 <scalbn+0xf8>)
 800fda8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdac:	e7b4      	b.n	800fd18 <scalbn+0x30>
 800fdae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fdb2:	3236      	adds	r2, #54	; 0x36
 800fdb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fdb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	4b0c      	ldr	r3, [pc, #48]	; (800fdf0 <scalbn+0x108>)
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	e7e8      	b.n	800fd96 <scalbn+0xae>
 800fdc4:	f3af 8000 	nop.w
 800fdc8:	c2f8f359 	.word	0xc2f8f359
 800fdcc:	01a56e1f 	.word	0x01a56e1f
 800fdd0:	8800759c 	.word	0x8800759c
 800fdd4:	7e37e43c 	.word	0x7e37e43c
 800fdd8:	8800759c 	.word	0x8800759c
 800fddc:	fe37e43c 	.word	0xfe37e43c
 800fde0:	c2f8f359 	.word	0xc2f8f359
 800fde4:	81a56e1f 	.word	0x81a56e1f
 800fde8:	43500000 	.word	0x43500000
 800fdec:	ffff3cb0 	.word	0xffff3cb0
 800fdf0:	3c900000 	.word	0x3c900000

0800fdf4 <_init>:
 800fdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdf6:	bf00      	nop
 800fdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdfa:	bc08      	pop	{r3}
 800fdfc:	469e      	mov	lr, r3
 800fdfe:	4770      	bx	lr

0800fe00 <_fini>:
 800fe00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe02:	bf00      	nop
 800fe04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe06:	bc08      	pop	{r3}
 800fe08:	469e      	mov	lr, r3
 800fe0a:	4770      	bx	lr
